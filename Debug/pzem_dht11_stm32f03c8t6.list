
pzem_dht11_stm32f03c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000922c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006fc  08009340  08009340  00019340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a3c  08009a3c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009a3c  08009a3c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a3c  08009a3c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a40  08009a40  00019a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200001e0  08009c24  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08009c24  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a010  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205a  00000000  00000000  0002a219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002cd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018728  00000000  00000000  0002d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b78f  00000000  00000000  00045de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c7a  00000000  00000000  00051577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d71f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f78  00000000  00000000  000d7244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009324 	.word	0x08009324

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009324 	.word	0x08009324

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e02:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e0e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000e2e:	bf00      	nop
     __ASM volatile ("NOP");
 8000e30:	bf00      	nop
 __ASM volatile ("NOP");
 8000e32:	bf00      	nop

  /* Check if clock cycle counter has started */
	
			 if(DWT->CYCCNT)
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e000      	b.n	8000e42 <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8000e40:	2301      	movs	r3, #1
				}
				

		
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000edf0 	.word	0xe000edf0
 8000e50:	e0001000 	.word	0xe0001000

08000e54 <delay>:

 void delay(volatile uint32_t microseconds)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <delay+0x40>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e62:	f002 fafd 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <delay+0x44>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e78:	bf00      	nop
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <delay+0x40>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3f8      	bcc.n	8000e7a <delay+0x26>
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e0001000 	.word	0xe0001000
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f001 fd4b 	bl	8002964 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fd2e 	bl	8002964 <HAL_GPIO_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DHT_Start>:


void DHT_Start (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f14:	f7ff ff6e 	bl	8000df4 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f18:	2101      	movs	r1, #1
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <DHT_Start+0x40>)
 8000f1c:	f7ff ffbe 	bl	8000e9c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 8000f20:	2200      	movs	r2, #0
 8000f22:	2101      	movs	r1, #1
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <DHT_Start+0x40>)
 8000f26:	f001 feb8 	bl	8002c9a <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000f2a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f2e:	f7ff ff91 	bl	8000e54 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 8000f32:	2201      	movs	r2, #1
 8000f34:	2101      	movs	r1, #1
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <DHT_Start+0x40>)
 8000f38:	f001 feaf 	bl	8002c9a <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 8000f3c:	201e      	movs	r0, #30
 8000f3e:	f7ff ff89 	bl	8000e54 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000f42:	2101      	movs	r1, #1
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <DHT_Start+0x40>)
 8000f46:	f7ff ffc6 	bl	8000ed6 <Set_Pin_Input>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010800 	.word	0x40010800

08000f54 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	delay (50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f7ff ff78 	bl	8000e54 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000f64:	2101      	movs	r1, #1
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <DHT_Check_Response+0x58>)
 8000f68:	f001 fe80 	bl	8002c6c <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10e      	bne.n	8000f90 <DHT_Check_Response+0x3c>
	{
		delay (100);
 8000f72:	2064      	movs	r0, #100	; 0x64
 8000f74:	f7ff ff6e 	bl	8000e54 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) 
 8000f78:	2101      	movs	r1, #1
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <DHT_Check_Response+0x58>)
 8000f7c:	f001 fe76 	bl	8002c6c <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <DHT_Check_Response+0x38>
		{
			Response = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e001      	b.n	8000f90 <DHT_Check_Response+0x3c>
		}
		else 
		{
			Response = -1;
 8000f8c:	23ff      	movs	r3, #255	; 0xff
 8000f8e:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f90:	bf00      	nop
 8000f92:	2101      	movs	r1, #1
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <DHT_Check_Response+0x58>)
 8000f96:	f001 fe69 	bl	8002c6c <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f8      	bne.n	8000f92 <DHT_Check_Response+0x3e>

	return Response;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010800 	.word	0x40010800

08000fb0 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	e037      	b.n	800102c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000fbc:	bf00      	nop
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <DHT_Read+0x8c>)
 8000fc2:	f001 fe53 	bl	8002c6c <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f8      	beq.n	8000fbe <DHT_Read+0xe>
		delay (50);   // wait for 40 us
 8000fcc:	2032      	movs	r0, #50	; 0x32
 8000fce:	f7ff ff41 	bl	8000e54 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4819      	ldr	r0, [pc, #100]	; (800103c <DHT_Read+0x8c>)
 8000fd6:	f001 fe49 	bl	8002c6c <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	e00b      	b.n	8001016 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	f1c3 0307 	rsb	r3, r3, #7
 8001004:	2201      	movs	r2, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	b25a      	sxtb	r2, r3
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4313      	orrs	r3, r2
 8001012:	b25b      	sxtb	r3, r3
 8001014:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001016:	bf00      	nop
 8001018:	2101      	movs	r1, #1
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <DHT_Read+0x8c>)
 800101c:	f001 fe26 	bl	8002c6c <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f8      	bne.n	8001018 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	3301      	adds	r3, #1
 800102a:	71bb      	strb	r3, [r7, #6]
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d9c4      	bls.n	8000fbc <DHT_Read+0xc>
	}
	return i;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010800 	.word	0x40010800

08001040 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	DHT_Start ();
 8001048:	f7ff ff62 	bl	8000f10 <DHT_Start>
	Presence = DHT_Check_Response ();
 800104c:	f7ff ff82 	bl	8000f54 <DHT_Check_Response>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <DHT_GetData+0xa0>)
 8001056:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001058:	f7ff ffaa 	bl	8000fb0 <DHT_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <DHT_GetData+0xa4>)
 8001062:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001064:	f7ff ffa4 	bl	8000fb0 <DHT_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <DHT_GetData+0xa8>)
 800106e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001070:	f7ff ff9e 	bl	8000fb0 <DHT_Read>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <DHT_GetData+0xac>)
 800107a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 800107c:	f7ff ff98 	bl	8000fb0 <DHT_Read>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <DHT_GetData+0xb0>)
 8001086:	701a      	strb	r2, [r3, #0]

	
	SUM = DHT_Read();
 8001088:	f7ff ff92 	bl	8000fb0 <DHT_Read>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <DHT_GetData+0xb4>)
 8001092:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <DHT_GetData+0xb4>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <DHT_GetData+0xa4>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <DHT_GetData+0xa8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <DHT_GetData+0xac>)
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <DHT_GetData+0xb0>)
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d10f      	bne.n	80010d6 <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <DHT_GetData+0xac>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe0a 	bl	8000cd4 <__aeabi_ui2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <DHT_GetData+0xa4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe02 	bl	8000cd4 <__aeabi_ui2f>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000202 	.word	0x20000202
 80010e4:	200001fc 	.word	0x200001fc
 80010e8:	200001fd 	.word	0x200001fd
 80010ec:	200001fe 	.word	0x200001fe
 80010f0:	200001ff 	.word	0x200001ff
 80010f4:	20000200 	.word	0x20000200

080010f8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80010f8:	b4b0      	push	{r4, r5, r7}
 80010fa:	b08f      	sub	sp, #60	; 0x3c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001100:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001106:	2307      	movs	r3, #7
 8001108:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800110c:	2307      	movs	r3, #7
 800110e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001112:	2301      	movs	r3, #1
 8001114:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001124:	2308      	movs	r3, #8
 8001126:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	461d      	mov	r5, r3
 800112c:	f107 040c 	add.w	r4, r7, #12
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800113c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	373c      	adds	r7, #60	; 0x3c
 8001144:	46bd      	mov	sp, r7
 8001146:	bcb0      	pop	{r4, r5, r7}
 8001148:	4770      	bx	lr

0800114a <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6898      	ldr	r0, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	899b      	ldrh	r3, [r3, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	f001 fd9c 	bl	8002c9a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f001 fa1c 	bl	80025a0 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	899b      	ldrh	r3, [r3, #12]
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	f001 fd91 	bl	8002c9a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001178:	2064      	movs	r0, #100	; 0x64
 800117a:	f001 fa11 	bl	80025a0 <HAL_Delay>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001190:	2101      	movs	r1, #1
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f99f 	bl	80014d6 <LoRa_read>
 8001198:	4603      	mov	r3, r0
 800119a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d107      	bne.n	80011b6 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	f023 0307 	bic.w	r3, r3, #7
 80011ac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
 80011b4:	e03e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10c      	bne.n	80011d6 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80011bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011c0:	f023 0307 	bic.w	r3, r3, #7
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	61da      	str	r2, [r3, #28]
 80011d4:	e02e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d10c      	bne.n	80011f6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80011dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011e0:	f023 0307 	bic.w	r3, r3, #7
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	f043 0303 	orr.w	r3, r3, #3
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	61da      	str	r2, [r3, #28]
 80011f4:	e01e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d10c      	bne.n	8001216 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80011fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001200:	f023 0307 	bic.w	r3, r3, #7
 8001204:	b25b      	sxtb	r3, r3
 8001206:	f043 0305 	orr.w	r3, r3, #5
 800120a:	b25b      	sxtb	r3, r3
 800120c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2205      	movs	r2, #5
 8001212:	61da      	str	r2, [r3, #28]
 8001214:	e00e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b06      	cmp	r3, #6
 800121a:	d10b      	bne.n	8001234 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800121c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001220:	f023 0307 	bic.w	r3, r3, #7
 8001224:	b25b      	sxtb	r3, r3
 8001226:	f043 0306 	orr.w	r3, r3, #6
 800122a:	b25b      	sxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2206      	movs	r2, #6
 8001232:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	461a      	mov	r2, r3
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f965 	bl	800150a <LoRa_write>
	//HAL_Delay(10);
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	889b      	ldrh	r3, [r3, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	f001 fd19 	bl	8002c9a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6998      	ldr	r0, [r3, #24]
 800126c:	88fa      	ldrh	r2, [r7, #6]
 800126e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	f002 f9c8 	bl	8003608 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001278:	bf00      	nop
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fdb1 	bl	8003de6 <HAL_SPI_GetState>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d1f7      	bne.n	800127a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6998      	ldr	r0, [r3, #24]
 800128e:	8b3a      	ldrh	r2, [r7, #24]
 8001290:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	f002 faf3 	bl	8003880 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800129a:	bf00      	nop
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fda0 	bl	8003de6 <HAL_SPI_GetState>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d1f7      	bne.n	800129c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	889b      	ldrh	r3, [r3, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 fcef 	bl	8002c9a <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	f001 fcdb 	bl	8002c9a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6998      	ldr	r0, [r3, #24]
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	f002 f98a 	bl	8003608 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012f4:	bf00      	nop
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fd73 	bl	8003de6 <HAL_SPI_GetState>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d1f7      	bne.n	80012f6 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6998      	ldr	r0, [r3, #24]
 800130a:	8b3a      	ldrh	r2, [r7, #24]
 800130c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	f002 f979 	bl	8003608 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001316:	bf00      	nop
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fd62 	bl	8003de6 <HAL_SPI_GetState>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d1f7      	bne.n	8001318 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	f001 fcb1 	bl	8002c9a <HAL_GPIO_WritePin>
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	04db      	lsls	r3, r3, #19
 800134e:	115b      	asrs	r3, r3, #5
 8001350:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0c1b      	lsrs	r3, r3, #16
 8001356:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	461a      	mov	r2, r3
 800135c:	2106      	movs	r1, #6
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f8d3 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 8001364:	2005      	movs	r0, #5
 8001366:	f001 f91b 	bl	80025a0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001370:	7afb      	ldrb	r3, [r7, #11]
 8001372:	461a      	mov	r2, r3
 8001374:	2107      	movs	r1, #7
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f8c7 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 800137c:	2005      	movs	r0, #5
 800137e:	f001 f90f 	bl	80025a0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	461a      	mov	r2, r3
 800138a:	2108      	movs	r1, #8
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f8bc 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 8001392:	2005      	movs	r0, #5
 8001394:	f001 f904 	bl	80025a0 <HAL_Delay>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	dd01      	ble.n	80013b4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80013b0:	230c      	movs	r3, #12
 80013b2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	dc01      	bgt.n	80013be <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80013ba:	2307      	movs	r3, #7
 80013bc:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013be:	211e      	movs	r1, #30
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f888 	bl	80014d6 <LoRa_read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80013ca:	200a      	movs	r0, #10
 80013cc:	f001 f8e8 	bl	80025a0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	461a      	mov	r2, r3
 80013e8:	211e      	movs	r1, #30
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f88d 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 80013f0:	200a      	movs	r0, #10
 80013f2:	f001 f8d5 	bl	80025a0 <HAL_Delay>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	461a      	mov	r2, r3
 800140e:	2109      	movs	r1, #9
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f87a 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 8001416:	200a      	movs	r0, #10
 8001418:	f001 f8c2 	bl	80025a0 <HAL_Delay>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	2b2c      	cmp	r3, #44	; 0x2c
 8001438:	d801      	bhi.n	800143e <LoRa_setOCP+0x1a>
		current = 45;
 800143a:	232d      	movs	r3, #45	; 0x2d
 800143c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	2bf0      	cmp	r3, #240	; 0xf0
 8001442:	d901      	bls.n	8001448 <LoRa_setOCP+0x24>
		current = 240;
 8001444:	23f0      	movs	r3, #240	; 0xf0
 8001446:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b78      	cmp	r3, #120	; 0x78
 800144c:	d809      	bhi.n	8001462 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	3b2d      	subs	r3, #45	; 0x2d
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <LoRa_setOCP+0x78>)
 8001454:	fb82 1203 	smull	r1, r2, r2, r3
 8001458:	1052      	asrs	r2, r2, #1
 800145a:	17db      	asrs	r3, r3, #31
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e00b      	b.n	800147a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2bf0      	cmp	r3, #240	; 0xf0
 8001466:	d808      	bhi.n	800147a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	331e      	adds	r3, #30
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <LoRa_setOCP+0x78>)
 800146e:	fb82 1203 	smull	r1, r2, r2, r3
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	17db      	asrs	r3, r3, #31
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3320      	adds	r3, #32
 800147e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	461a      	mov	r2, r3
 8001484:	210b      	movs	r1, #11
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f83f 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 800148c:	200a      	movs	r0, #10
 800148e:	f001 f887 	bl	80025a0 <HAL_Delay>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	66666667 	.word	0x66666667

080014a0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80014a8:	211e      	movs	r1, #30
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f813 	bl	80014d6 <LoRa_read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f043 0307 	orr.w	r3, r3, #7
 80014ba:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	461a      	mov	r2, r3
 80014c0:	211e      	movs	r1, #30
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f821 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f001 f869 	bl	80025a0 <HAL_Delay>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af02      	add	r7, sp, #8
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80014ec:	f107 030f 	add.w	r3, r7, #15
 80014f0:	f107 010e 	add.w	r1, r7, #14
 80014f4:	2201      	movs	r2, #1
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fea4 	bl	8001248 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af02      	add	r7, sp, #8
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
 8001516:	4613      	mov	r3, r2
 8001518:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001520:	b2db      	uxtb	r3, r3
 8001522:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001524:	78bb      	ldrb	r3, [r7, #2]
 8001526:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001528:	f107 030f 	add.w	r3, r7, #15
 800152c:	f107 010e 	add.w	r1, r7, #14
 8001530:	2201      	movs	r2, #1
 8001532:	9200      	str	r2, [sp, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fec4 	bl	80012c4 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	461a      	mov	r2, r3
 8001550:	460b      	mov	r3, r1
 8001552:	72fb      	strb	r3, [r7, #11]
 8001554:	4613      	mov	r3, r2
 8001556:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800155e:	b2db      	uxtb	r3, r3
 8001560:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	f001 fb94 	bl	8002c9a <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6998      	ldr	r0, [r3, #24]
 8001576:	f107 0117 	add.w	r1, r7, #23
 800157a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800157e:	2201      	movs	r2, #1
 8001580:	f002 f842 	bl	8003608 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001584:	bf00      	nop
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fc2b 	bl	8003de6 <HAL_SPI_GetState>
 8001590:	4603      	mov	r3, r0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d1f7      	bne.n	8001586 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6998      	ldr	r0, [r3, #24]
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	b29a      	uxth	r2, r3
 800159e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f002 f830 	bl	8003608 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80015a8:	bf00      	nop
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fc19 	bl	8003de6 <HAL_SPI_GetState>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d1f7      	bne.n	80015aa <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	889b      	ldrh	r3, [r3, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4619      	mov	r1, r3
 80015c6:	f001 fb68 	bl	8002c9a <HAL_GPIO_WritePin>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]

	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	4611      	mov	r1, r2
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001602:	2101      	movs	r1, #1
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff fdbe 	bl	8001186 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800160a:	210e      	movs	r1, #14
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ff62 	bl	80014d6 <LoRa_read>
 8001612:	4603      	mov	r3, r0
 8001614:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	461a      	mov	r2, r3
 800161a:	210d      	movs	r1, #13
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff74 	bl	800150a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	461a      	mov	r2, r3
 8001626:	2122      	movs	r1, #34	; 0x22
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff ff6e 	bl	800150a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	2100      	movs	r1, #0
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff ff85 	bl	8001544 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800163a:	2103      	movs	r1, #3
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fda2 	bl	8001186 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001642:	2112      	movs	r1, #18
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff ff46 	bl	80014d6 <LoRa_read>
 800164a:	4603      	mov	r3, r0
 800164c:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800164e:	7cfb      	ldrb	r3, [r7, #19]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00a      	beq.n	800166e <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	2112      	movs	r1, #18
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff ff54 	bl	800150a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001662:	6979      	ldr	r1, [r7, #20]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fd8e 	bl	8001186 <LoRa_gotoMode>
			return 1;
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	3b01      	subs	r3, #1
 8001672:	80bb      	strh	r3, [r7, #4]
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7ff fd82 	bl	8001186 <LoRa_gotoMode>
				return 0;
 8001682:	2300      	movs	r3, #0
 8001684:	e003      	b.n	800168e <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f000 ff8a 	bl	80025a0 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800168c:	e7d9      	b.n	8001642 <LoRa_transmit+0x5c>
	}

}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ff97 	bl	80015d2 <LoRa_isvalid>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8093 	beq.w	80017d2 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80016ac:	2100      	movs	r1, #0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fd69 	bl	8001186 <LoRa_gotoMode>
			HAL_Delay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f000 ff73 	bl	80025a0 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80016ba:	2101      	movs	r1, #1
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff0a 	bl	80014d6 <LoRa_read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f000 ff6a 	bl	80025a0 <HAL_Delay>
			data = read | 0x80;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016d2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2101      	movs	r1, #1
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff15 	bl	800150a <LoRa_write>
			HAL_Delay(100);
 80016e0:	2064      	movs	r0, #100	; 0x64
 80016e2:	f000 ff5d 	bl	80025a0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fe27 	bl	8001340 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016f8:	4619      	mov	r1, r3
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe7f 	bl	80013fe <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe8b 	bl	8001424 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800170e:	2223      	movs	r2, #35	; 0x23
 8001710:	210c      	movs	r1, #12
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fef9 	bl	800150a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fec1 	bl	80014a0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fe3a 	bl	80013a0 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800172c:	22ff      	movs	r2, #255	; 0xff
 800172e:	211f      	movs	r1, #31
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff feea 	bl	800150a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4413      	add	r3, r2
 8001750:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	461a      	mov	r2, r3
 8001756:	211d      	movs	r1, #29
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fed6 	bl	800150a <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	2120      	movs	r1, #32
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fecc 	bl	800150a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	2121      	movs	r1, #33	; 0x21
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fec4 	bl	800150a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fea6 	bl	80014d6 <LoRa_read>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001794:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	461a      	mov	r2, r3
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff feb4 	bl	800150a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80017a2:	2101      	movs	r1, #1
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fcee 	bl	8001186 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 fef5 	bl	80025a0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80017b6:	2142      	movs	r1, #66	; 0x42
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe8c 	bl	80014d6 <LoRa_read>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	d101      	bne.n	80017cc <LoRa_init+0x136>
				return LORA_OK;
 80017c8:	23c8      	movs	r3, #200	; 0xc8
 80017ca:	e004      	b.n	80017d6 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80017cc:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80017d0:	e001      	b.n	80017d6 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80017d2:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <spi_Transmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void spi_Transmit(void)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b096      	sub	sp, #88	; 0x58
 80017e6:	af0e      	add	r7, sp, #56	; 0x38
	DHT_GetData(&DHT11_Data);
 80017e8:	4843      	ldr	r0, [pc, #268]	; (80018f8 <spi_Transmit+0x118>)
 80017ea:	f7ff fc29 	bl	8001040 <DHT_GetData>
	temp_value = DHT11_Data.Temperature;
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <spi_Transmit+0x118>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a42      	ldr	r2, [pc, #264]	; (80018fc <spi_Transmit+0x11c>)
 80017f4:	6013      	str	r3, [r2, #0]
	rh_value = DHT11_Data.Humidity;
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <spi_Transmit+0x118>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4a41      	ldr	r2, [pc, #260]	; (8001900 <spi_Transmit+0x120>)
 80017fc:	6013      	str	r3, [r2, #0]

	updateValues(&PZEM);
 80017fe:	4841      	ldr	r0, [pc, #260]	; (8001904 <spi_Transmit+0x124>)
 8001800:	f000 fb68 	bl	8001ed4 <updateValues>
	volt = PZEM.values.voltage;
 8001804:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <spi_Transmit+0x124>)
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	4a3f      	ldr	r2, [pc, #252]	; (8001908 <spi_Transmit+0x128>)
 800180a:	6013      	str	r3, [r2, #0]
	curr = PZEM.values.current;
 800180c:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <spi_Transmit+0x124>)
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	4a3e      	ldr	r2, [pc, #248]	; (800190c <spi_Transmit+0x12c>)
 8001812:	6013      	str	r3, [r2, #0]
	power = PZEM.values.power;
 8001814:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <spi_Transmit+0x124>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a3d      	ldr	r2, [pc, #244]	; (8001910 <spi_Transmit+0x130>)
 800181a:	6013      	str	r3, [r2, #0]
	energy = PZEM.values.energy;
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <spi_Transmit+0x124>)
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <spi_Transmit+0x134>)
 8001822:	6013      	str	r3, [r2, #0]
	freq = PZEM.values.frequency;
 8001824:	4b37      	ldr	r3, [pc, #220]	; (8001904 <spi_Transmit+0x124>)
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <spi_Transmit+0x138>)
 800182a:	6013      	str	r3, [r2, #0]
	pf = PZEM.values.pf;
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <spi_Transmit+0x124>)
 800182e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001830:	4a3a      	ldr	r2, [pc, #232]	; (800191c <spi_Transmit+0x13c>)
 8001832:	6013      	str	r3, [r2, #0]

	sprintf(value_array, "%.1f,%.1f,%.1f,%.3f,%.1f,%.3f,%.1f,%.2f,\r\n", temp_value, rh_value, volt, curr, power, energy, freq, pf);
 8001834:	4b31      	ldr	r3, [pc, #196]	; (80018fc <spi_Transmit+0x11c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fdf5 	bl	8000428 <__aeabi_f2d>
 800183e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <spi_Transmit+0x120>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fdee 	bl	8000428 <__aeabi_f2d>
 800184c:	4682      	mov	sl, r0
 800184e:	468b      	mov	fp, r1
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <spi_Transmit+0x128>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fde7 	bl	8000428 <__aeabi_f2d>
 800185a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <spi_Transmit+0x12c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fde0 	bl	8000428 <__aeabi_f2d>
 8001868:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <spi_Transmit+0x130>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fdd9 	bl	8000428 <__aeabi_f2d>
 8001876:	e9c7 0100 	strd	r0, r1, [r7]
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <spi_Transmit+0x134>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdd2 	bl	8000428 <__aeabi_f2d>
 8001884:	4680      	mov	r8, r0
 8001886:	4689      	mov	r9, r1
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <spi_Transmit+0x138>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdcb 	bl	8000428 <__aeabi_f2d>
 8001892:	4604      	mov	r4, r0
 8001894:	460d      	mov	r5, r1
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <spi_Transmit+0x13c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fdc4 	bl	8000428 <__aeabi_f2d>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80018a8:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80018ac:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80018b0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018b4:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80018b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80018bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80018c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80018c4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80018c8:	e9cd ab00 	strd	sl, fp, [sp]
 80018cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018d0:	4913      	ldr	r1, [pc, #76]	; (8001920 <spi_Transmit+0x140>)
 80018d2:	4814      	ldr	r0, [pc, #80]	; (8001924 <spi_Transmit+0x144>)
 80018d4:	f003 ff68 	bl	80057a8 <siprintf>
	LoRa_transmit(&myLoRa, (uint8_t*)value_array, strlen(value_array), 3000);
 80018d8:	4812      	ldr	r0, [pc, #72]	; (8001924 <spi_Transmit+0x144>)
 80018da:	f7fe fc39 	bl	8000150 <strlen>
 80018de:	4603      	mov	r3, r0
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80018e6:	490f      	ldr	r1, [pc, #60]	; (8001924 <spi_Transmit+0x144>)
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <spi_Transmit+0x148>)
 80018ea:	f7ff fe7c 	bl	80015e6 <LoRa_transmit>

	//HAL_UART_Transmit(&huart2, (uint8_t *)value_array, strlen(value_array), 1000);
}
 80018ee:	bf00      	nop
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f8:	20000204 	.word	0x20000204
 80018fc:	2000035c 	.word	0x2000035c
 8001900:	20000360 	.word	0x20000360
 8001904:	2000020c 	.word	0x2000020c
 8001908:	20000364 	.word	0x20000364
 800190c:	20000368 	.word	0x20000368
 8001910:	2000036c 	.word	0x2000036c
 8001914:	20000370 	.word	0x20000370
 8001918:	20000374 	.word	0x20000374
 800191c:	20000378 	.word	0x20000378
 8001920:	08009340 	.word	0x08009340
 8001924:	2000037c 	.word	0x2000037c
 8001928:	20000250 	.word	0x20000250

0800192c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001932:	f000 fdd3 	bl	80024dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001936:	f000 f87f 	bl	8001a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193a:	f000 f94d 	bl	8001bd8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800193e:	f000 f8f7 	bl	8001b30 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001942:	f000 f91f 	bl	8001b84 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001946:	f000 f8bd 	bl	8001ac4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	//PZEM CONFIG
	init_pzem(&PZEM, &huart1, 0x01);
 800194a:	2201      	movs	r2, #1
 800194c:	4933      	ldr	r1, [pc, #204]	; (8001a1c <main+0xf0>)
 800194e:	4834      	ldr	r0, [pc, #208]	; (8001a20 <main+0xf4>)
 8001950:	f000 f9e1 	bl	8001d16 <init_pzem>
	HAL_UART_Receive_IT(PZEM.huart, &PZEM.byteRx[0], 1);
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <main+0xf4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2201      	movs	r2, #1
 800195a:	4932      	ldr	r1, [pc, #200]	; (8001a24 <main+0xf8>)
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fc26 	bl	80041ae <HAL_UART_Receive_IT>


	//LORA CONFIG
	myLoRa = newLoRa();
 8001962:	4c31      	ldr	r4, [pc, #196]	; (8001a28 <main+0xfc>)
 8001964:	463b      	mov	r3, r7
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fbc6 	bl	80010f8 <newLoRa>
 800196c:	4625      	mov	r5, r4
 800196e:	463c      	mov	r4, r7
 8001970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001978:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800197c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port = NSS_GPIO_Port;
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <main+0xfc>)
 8001982:	4a2a      	ldr	r2, [pc, #168]	; (8001a2c <main+0x100>)
 8001984:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <main+0xfc>)
 8001988:	2201      	movs	r2, #1
 800198a:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <main+0xfc>)
 800198e:	4a27      	ldr	r2, [pc, #156]	; (8001a2c <main+0x100>)
 8001990:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 8001992:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <main+0xfc>)
 8001994:	2202      	movs	r2, #2
 8001996:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <main+0xfc>)
 800199a:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <main+0x100>)
 800199c:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 800199e:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <main+0xfc>)
 80019a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019a4:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <main+0xfc>)
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <main+0x104>)
 80019aa:	619a      	str	r2, [r3, #24]

	myLoRa.frequency = 433;             // default = 433 MHz
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <main+0xfc>)
 80019ae:	f240 12b1 	movw	r2, #433	; 0x1b1
 80019b2:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;            // default = SF_7
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <main+0xfc>)
 80019b6:	2207      	movs	r2, #7
 80019b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_125KHz;       // default = BW_125KHz
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <main+0xfc>)
 80019be:	2207      	movs	r2, #7
 80019c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_5;          // default = CR_4_5
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <main+0xfc>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_20db;      // default = 20db
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <main+0xfc>)
 80019ce:	22ff      	movs	r2, #255	; 0xff
 80019d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 130;             // default = 100 mA
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <main+0xfc>)
 80019d6:	2282      	movs	r2, #130	; 0x82
 80019d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 10;              // default = 8;
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <main+0xfc>)
 80019de:	220a      	movs	r2, #10
 80019e0:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 80019e2:	4811      	ldr	r0, [pc, #68]	; (8001a28 <main+0xfc>)
 80019e4:	f7ff fbb1 	bl	800114a <LoRa_reset>
	if (LoRa_init(&myLoRa) == LORA_OK)
 80019e8:	480f      	ldr	r0, [pc, #60]	; (8001a28 <main+0xfc>)
 80019ea:	f7ff fe54 	bl	8001696 <LoRa_init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2bc8      	cmp	r3, #200	; 0xc8
 80019f2:	d102      	bne.n	80019fa <main+0xce>
	{
		start_Lora = 1;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <main+0x108>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(updateValues(&PZEM))
 80019fa:	4809      	ldr	r0, [pc, #36]	; (8001a20 <main+0xf4>)
 80019fc:	f000 fa6a 	bl	8001ed4 <updateValues>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f9      	beq.n	80019fa <main+0xce>
	  {
//		  voltage = getVol(&PZEM);
//		  sprintf(voltageArray, "%1.f", voltage);
//		  HAL_UART_Transmit(&huart1, (uint8_t *)voltageArray, 5, 1000);
		  if(start_Lora == 1)
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <main+0x108>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d1f5      	bne.n	80019fa <main+0xce>
			  SPI_Power_Transmit(&myLoRa, &PZEM);
			  SPI_Energy_Transmit(&myLoRa, &PZEM);
			  SPI_Frequency_Transmit(&myLoRa, &PZEM);
			  SPI_pF_Transmit(&myLoRa, &PZEM);*/

			  spi_Transmit();
 8001a0e:	f7ff fee7 	bl	80017e0 <spi_Transmit>
			  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			  HAL_Delay(60000);
 8001a12:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001a16:	f000 fdc3 	bl	80025a0 <HAL_Delay>
	  if(updateValues(&PZEM))
 8001a1a:	e7ee      	b.n	80019fa <main+0xce>
 8001a1c:	200002d4 	.word	0x200002d4
 8001a20:	2000020c 	.word	0x2000020c
 8001a24:	2000022f 	.word	0x2000022f
 8001a28:	20000250 	.word	0x20000250
 8001a2c:	40010c00 	.word	0x40010c00
 8001a30:	2000027c 	.word	0x2000027c
 8001a34:	200003e0 	.word	0x200003e0

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b090      	sub	sp, #64	; 0x40
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0318 	add.w	r3, r7, #24
 8001a42:	2228      	movs	r2, #40	; 0x28
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f834 	bl	8004ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a76:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 f923 	bl	8002ccc <HAL_RCC_OscConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a8c:	f000 f93e 	bl	8001d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a90:	230f      	movs	r3, #15
 8001a92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a94:	2302      	movs	r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fb90 	bl	80031d0 <HAL_RCC_ClockConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ab6:	f000 f929 	bl	8001d0c <Error_Handler>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3740      	adds	r7, #64	; 0x40
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <MX_SPI1_Init+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001af8:	2210      	movs	r2, #16
 8001afa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001b10:	220a      	movs	r2, #10
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_SPI1_Init+0x64>)
 8001b16:	f001 fcf3 	bl	8003500 <HAL_SPI_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b20:	f000 f8f4 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000027c 	.word	0x2000027c
 8001b2c:	40013000 	.word	0x40013000

08001b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <MX_USART1_UART_Init+0x50>)
 8001b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b56:	220c      	movs	r2, #12
 8001b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART1_UART_Init+0x4c>)
 8001b68:	f002 fa42 	bl	8003ff0 <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b72:	f000 f8cb 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200002d4 	.word	0x200002d4
 8001b80:	40013800 	.word	0x40013800

08001b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <MX_USART2_UART_Init+0x50>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bba:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_USART2_UART_Init+0x4c>)
 8001bbc:	f002 fa18 	bl	8003ff0 <HAL_UART_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bc6:	f000 f8a1 	bl	8001d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000318 	.word	0x20000318
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a28      	ldr	r2, [pc, #160]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a1c      	ldr	r2, [pc, #112]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_GPIO_Init+0xbc>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	2103      	movs	r1, #3
 8001c38:	4817      	ldr	r0, [pc, #92]	; (8001c98 <MX_GPIO_Init+0xc0>)
 8001c3a:	f001 f82e 	bl	8002c9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 0310 	add.w	r3, r7, #16
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4812      	ldr	r0, [pc, #72]	; (8001c9c <MX_GPIO_Init+0xc4>)
 8001c52:	f000 fe87 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001c56:	2303      	movs	r3, #3
 8001c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2302      	movs	r3, #2
 8001c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f107 0310 	add.w	r3, r7, #16
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <MX_GPIO_Init+0xc0>)
 8001c6e:	f000 fe79 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_GPIO_Init+0xc8>)
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	4619      	mov	r1, r3
 8001c86:	4804      	ldr	r0, [pc, #16]	; (8001c98 <MX_GPIO_Init+0xc0>)
 8001c88:	f000 fe6c 	bl	8002964 <HAL_GPIO_Init>

}
 8001c8c:	bf00      	nop
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010c00 	.word	0x40010c00
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	10110000 	.word	0x10110000

08001ca4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	if(PZEM.rxbufferIndex >30)
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b1e      	cmp	r3, #30
 8001cb4:	d902      	bls.n	8001cbc <HAL_UART_RxCpltCallback+0x18>
	{
		 PZEM.rxbufferIndex=0;
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	711a      	strb	r2, [r3, #4]
	}

	if (huart->Instance == UART_PZEM) //queried which uart is used
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_UART_RxCpltCallback+0x60>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d117      	bne.n	8001cf6 <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(PZEM.huart,&PZEM.byteRx[0], 1);
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	490e      	ldr	r1, [pc, #56]	; (8001d08 <HAL_UART_RxCpltCallback+0x64>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fa6d 	bl	80041ae <HAL_UART_Receive_IT>
		PZEM.rxBuffer[PZEM.rxbufferIndex] =PZEM.byteRx[0];
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001cd6:	791b      	ldrb	r3, [r3, #4]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001cde:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001ce4:	440b      	add	r3, r1
 8001ce6:	715a      	strb	r2, [r3, #5]
		PZEM.rxbufferIndex++;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001cea:	791b      	ldrb	r3, [r3, #4]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_UART_RxCpltCallback+0x5c>)
 8001cf4:	711a      	strb	r2, [r3, #4]
	}
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000020c 	.word	0x2000020c
 8001d04:	40013800 	.word	0x40013800
 8001d08:	2000022f 	.word	0x2000022f

08001d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d10:	b672      	cpsid	i
}
 8001d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <Error_Handler+0x8>

08001d16 <init_pzem>:
//float value = 0.0;
//char valueArray[100] = {0};


void init_pzem(pzem *pzem, UART_HandleTypeDef *huart, uint8_t addr)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71fb      	strb	r3, [r7, #7]
	if(addr < 0x01 || addr > 0xF8)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <init_pzem+0x1a>
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2bf8      	cmp	r3, #248	; 0xf8
 8001d2e:	d901      	bls.n	8001d34 <init_pzem+0x1e>
	{
		addr = PZEM_DEFAULT_ADDR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	71fb      	strb	r3, [r7, #7]
	}
	pzem->_addr = addr;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	79fa      	ldrb	r2, [r7, #7]
 8001d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pzem->huart = huart;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <sendCmd8>:
	}
	return 0;
}

void sendCmd8(pzem *pzem, uint8_t cmd, uint16_t rAddr, uint16_t val, uint16_t slave_addr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	4608      	mov	r0, r1
 8001d56:	4611      	mov	r1, r2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	72fb      	strb	r3, [r7, #11]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	813b      	strh	r3, [r7, #8]
 8001d62:	4613      	mov	r3, r2
 8001d64:	80fb      	strh	r3, [r7, #6]
	uint8_t sendBuffer[8]; //send buffer

	if((slave_addr == 0xFFFF) || (slave_addr < 0x01) || (slave_addr > 0xF7))
 8001d66:	8c3b      	ldrh	r3, [r7, #32]
 8001d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d005      	beq.n	8001d7c <sendCmd8+0x30>
 8001d70:	8c3b      	ldrh	r3, [r7, #32]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <sendCmd8+0x30>
 8001d76:	8c3b      	ldrh	r3, [r7, #32]
 8001d78:	2bf7      	cmp	r3, #247	; 0xf7
 8001d7a:	d903      	bls.n	8001d84 <sendCmd8+0x38>
	{
		slave_addr = pzem->_addr;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d82:	843b      	strh	r3, [r7, #32]
	}

	sendBuffer[0] = slave_addr;					// set slave address
 8001d84:	8c3b      	ldrh	r3, [r7, #32]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	743b      	strb	r3, [r7, #16]
	sendBuffer[1] = cmd;						// set command
 8001d8a:	7afb      	ldrb	r3, [r7, #11]
 8001d8c:	747b      	strb	r3, [r7, #17]
	sendBuffer[2] = (rAddr >> 8) & 0xFF;		// set high byte of register address
 8001d8e:	893b      	ldrh	r3, [r7, #8]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	74bb      	strb	r3, [r7, #18]
	sendBuffer[3] = (rAddr) & 0xFF;				// set low byte of register address
 8001d98:	893b      	ldrh	r3, [r7, #8]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	74fb      	strb	r3, [r7, #19]
	sendBuffer[4] = (val >> 8) & 0xFF;			// set high byte of register value
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	753b      	strb	r3, [r7, #20]
	sendBuffer[5] = (val) & 0xFF;				// set low byte of register value
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	757b      	strb	r3, [r7, #21]

	setCRC((uint8_t *)sendBuffer, 8);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2108      	movs	r1, #8
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f83c 	bl	8001e32 <setCRC>
	HAL_UART_Transmit(pzem->huart, sendBuffer, 8, 100);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	f107 0110 	add.w	r1, r7, #16
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	f002 f960 	bl	800408a <HAL_UART_Transmit>
	HAL_Delay(100);
 8001dca:	2064      	movs	r0, #100	; 0x64
 8001dcc:	f000 fbe8 	bl	80025a0 <HAL_Delay>
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <checkCRC>:

uint8_t checkCRC(pzem *pzem, uint8_t len)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_check, crc_buffer;
	crc_buffer = ((uint16_t)pzem->rxBuffer[len-2]  | (uint16_t)pzem->rxBuffer[len-1] << 8);
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	3b02      	subs	r3, #2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	795b      	ldrb	r3, [r3, #5]
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	440b      	add	r3, r1
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	81fb      	strh	r3, [r7, #14]
	crc_check = CRC16(pzem->rxBuffer, len-2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1d5a      	adds	r2, r3, #5
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b02      	subs	r3, #2
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 f834 	bl	8001e80 <CRC16>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	81bb      	strh	r3, [r7, #12]

	if(crc_buffer == crc_check)
 8001e1c:	89fa      	ldrh	r2, [r7, #14]
 8001e1e:	89bb      	ldrh	r3, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d101      	bne.n	8001e28 <checkCRC+0x50>
	{
		return 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <checkCRC+0x52>
	}
	else
	{
		return 0;
 8001e28:	2300      	movs	r3, #0
	}
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <setCRC>:


void setCRC(uint8_t *buf, uint16_t len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	807b      	strh	r3, [r7, #2]
	if(len <= 2) return;		//sanity check
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d919      	bls.n	8001e78 <setCRC+0x46>

	uint16_t crc = CRC16(buf, len-2);		// crc of data
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	3b02      	subs	r3, #2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f817 	bl	8001e80 <CRC16>
 8001e52:	4603      	mov	r3, r0
 8001e54:	81fb      	strh	r3, [r7, #14]

	// Write high and low byte to last positions of sendBuffer
	buf[len - 1] = (crc >> 8) & 0xFF;		// high byte
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b299      	uxth	r1, r3
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	b2ca      	uxtb	r2, r1
 8001e66:	701a      	strb	r2, [r3, #0]
	buf[len - 2] = crc & 0xFF;				// low byte
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	3b02      	subs	r3, #2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	89fa      	ldrh	r2, [r7, #14]
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
 8001e76:	e000      	b.n	8001e7a <setCRC+0x48>
	if(len <= 2) return;		//sanity check
 8001e78:	bf00      	nop

}
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <CRC16>:
    0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
    0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
};

uint16_t CRC16(const volatile uint8_t *data, uint16_t len)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
    uint8_t nTemp; // CRC table index
    uint16_t crc = 0xFFFF; // Default value
 8001e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e90:	81fb      	strh	r3, [r7, #14]

    while (len--)
 8001e92:	e012      	b.n	8001eba <CRC16+0x3a>
    {
        nTemp = (*data++) ^ crc;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	89fb      	ldrh	r3, [r7, #14]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4053      	eors	r3, r2
 8001ea4:	737b      	strb	r3, [r7, #13]
        crc >>= 8;
 8001ea6:	89fb      	ldrh	r3, [r7, #14]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	81fb      	strh	r3, [r7, #14]
        crc ^= (uint16_t)crcTable[nTemp];
 8001eac:	7b7b      	ldrb	r3, [r7, #13]
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <CRC16+0x50>)
 8001eb0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001eb4:	89fb      	ldrh	r3, [r7, #14]
 8001eb6:	4053      	eors	r3, r2
 8001eb8:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	1e5a      	subs	r2, r3, #1
 8001ebe:	807a      	strh	r2, [r7, #2]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e7      	bne.n	8001e94 <CRC16+0x14>
    }
    return crc;
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	0800937c 	.word	0x0800937c

08001ed4 <updateValues>:

uint8_t updateValues(pzem *pzem)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	6078      	str	r0, [r7, #4]
	sendCmd8(pzem, (uint8_t)CMD_RIR, 0x00, 0x0A, (uint16_t)pzem->_addr);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	230a      	movs	r3, #10
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2104      	movs	r1, #4
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff2d 	bl	8001d4c <sendCmd8>
//	while(isrPzem);
//	isrPzem = 1;
	if(checkCRC(pzem, 25))
 8001ef2:	2119      	movs	r1, #25
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff6f 	bl	8001dd8 <checkCRC>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80bb 	beq.w	8002078 <updateValues+0x1a4>
	{
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7a1b      	ldrb	r3, [r3, #8]
 8001f06:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[4])/10.0;
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	7a52      	ldrb	r2, [r2, #9]
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 8001f0c:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[4])/10.0;
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fa68 	bl	80003e4 <__aeabi_ui2d>
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <updateValues+0x1b0>)
 8001f1a:	f7fe fc07 	bl	800072c <__aeabi_ddiv>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fdcf 	bl	8000ac8 <__aeabi_d2f>
 8001f2a:	4602      	mov	r2, r0
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7a9b      	ldrb	r3, [r3, #10]
 8001f34:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[6] |
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	7ad2      	ldrb	r2, [r2, #11]
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 8001f3a:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[7] << 24 |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7b1b      	ldrb	r3, [r3, #12]
 8001f40:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[6] |
 8001f42:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[8] << 16) / 1000.0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7b5b      	ldrb	r3, [r3, #13]
 8001f48:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[7] << 24 |
 8001f4a:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[8] << 16) / 1000.0;
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fa49 	bl	80003e4 <__aeabi_ui2d>
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <updateValues+0x1b4>)
 8001f58:	f7fe fbe8 	bl	800072c <__aeabi_ddiv>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fdb0 	bl	8000ac8 <__aeabi_d2f>
 8001f68:	4602      	mov	r2, r0
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c

		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7b9b      	ldrb	r3, [r3, #14]
 8001f72:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[10] |
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	7bd2      	ldrb	r2, [r2, #15]
		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 8001f78:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[11] << 24 |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7c1b      	ldrb	r3, [r3, #16]
 8001f7e:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[10] |
 8001f80:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[12] << 16) / 10.0;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7c5b      	ldrb	r3, [r3, #17]
 8001f86:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[11] << 24 |
 8001f88:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[12] << 16) / 10.0;
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fa2a 	bl	80003e4 <__aeabi_ui2d>
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <updateValues+0x1b0>)
 8001f96:	f7fe fbc9 	bl	800072c <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fd91 	bl	8000ac8 <__aeabi_d2f>
 8001fa6:	4602      	mov	r2, r0
		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30

		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7c9b      	ldrb	r3, [r3, #18]
 8001fb0:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[14] |
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	7cd2      	ldrb	r2, [r2, #19]
		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 8001fb6:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[15] << 24 |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7d1b      	ldrb	r3, [r3, #20]
 8001fbc:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[14] |
 8001fbe:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[16] << 16) / 1000.0;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7d5b      	ldrb	r3, [r3, #21]
 8001fc4:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[15] << 24 |
 8001fc6:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[16] << 16) / 1000.0;
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fa0b 	bl	80003e4 <__aeabi_ui2d>
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <updateValues+0x1b4>)
 8001fd4:	f7fe fbaa 	bl	800072c <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f7fe fd72 	bl	8000ac8 <__aeabi_d2f>
 8001fe4:	4602      	mov	r2, r0
		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34

		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7d9b      	ldrb	r3, [r3, #22]
 8001fee:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[18]) / 10.0;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	7dd2      	ldrb	r2, [r2, #23]
		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 8001ff4:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[18]) / 10.0;
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe f9f4 	bl	80003e4 <__aeabi_ui2d>
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <updateValues+0x1b0>)
 8002002:	f7fe fb93 	bl	800072c <__aeabi_ddiv>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fd5b 	bl	8000ac8 <__aeabi_d2f>
 8002012:	4602      	mov	r2, r0
		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	639a      	str	r2, [r3, #56]	; 0x38

		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7e1b      	ldrb	r3, [r3, #24]
 800201c:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[20])/100.0;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	7e52      	ldrb	r2, [r2, #25]
		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 8002022:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[20])/100.0;
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f9dd 	bl	80003e4 <__aeabi_ui2d>
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	4b17      	ldr	r3, [pc, #92]	; (800208c <updateValues+0x1b8>)
 8002030:	f7fe fb7c 	bl	800072c <__aeabi_ddiv>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fd44 	bl	8000ac8 <__aeabi_d2f>
 8002040:	4602      	mov	r2, r0
		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	63da      	str	r2, [r3, #60]	; 0x3c

		pzem->values.alarms =  ((uint32_t)pzem->rxBuffer[21] << 8 | // Raw alarm value
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7e9b      	ldrb	r3, [r3, #26]
 800204a:	b29b      	uxth	r3, r3
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b29a      	uxth	r2, r3
								(uint32_t)pzem->rxBuffer[22]);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7edb      	ldrb	r3, [r3, #27]
 8002054:	b29b      	uxth	r3, r3
		pzem->values.alarms =  ((uint32_t)pzem->rxBuffer[21] << 8 | // Raw alarm value
 8002056:	4313      	orrs	r3, r2
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		memset(pzem->rxBuffer,0,sizeof(pzem->rxBuffer));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3305      	adds	r3, #5
 8002064:	221e      	movs	r2, #30
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fd23 	bl	8004ab4 <memset>
		pzem->rxbufferIndex=0;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	711a      	strb	r2, [r3, #4]

		return 1;
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <updateValues+0x1a6>
	}
	return 0;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40240000 	.word	0x40240000
 8002088:	408f4000 	.word	0x408f4000
 800208c:	40590000 	.word	0x40590000

08002090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_MspInit+0x5c>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4a14      	ldr	r2, [pc, #80]	; (80020ec <HAL_MspInit+0x5c>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6193      	str	r3, [r2, #24]
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_MspInit+0x5c>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_MspInit+0x5c>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_MspInit+0x5c>)
 80020b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b8:	61d3      	str	r3, [r2, #28]
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <HAL_MspInit+0x5c>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_MspInit+0x60>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_MspInit+0x60>)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000

080020f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_SPI_MspInit+0x88>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d12f      	bne.n	8002174 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_SPI_MspInit+0x8c>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_SPI_MspInit+0x8c>)
 800211a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800211e:	6193      	str	r3, [r2, #24]
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_SPI_MspInit+0x8c>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_SPI_MspInit+0x8c>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a13      	ldr	r2, [pc, #76]	; (8002180 <HAL_SPI_MspInit+0x8c>)
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_SPI_MspInit+0x8c>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002144:	23a0      	movs	r3, #160	; 0xa0
 8002146:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	4619      	mov	r1, r3
 8002156:	480b      	ldr	r0, [pc, #44]	; (8002184 <HAL_SPI_MspInit+0x90>)
 8002158:	f000 fc04 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800215c:	2340      	movs	r3, #64	; 0x40
 800215e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	4619      	mov	r1, r3
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <HAL_SPI_MspInit+0x90>)
 8002170:	f000 fbf8 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002174:	bf00      	nop
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40013000 	.word	0x40013000
 8002180:	40021000 	.word	0x40021000
 8002184:	40010800 	.word	0x40010800

08002188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0318 	add.w	r3, r7, #24
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a3b      	ldr	r2, [pc, #236]	; (8002290 <HAL_UART_MspInit+0x108>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d13a      	bne.n	800221e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_UART_MspInit+0x10c>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a39      	ldr	r2, [pc, #228]	; (8002294 <HAL_UART_MspInit+0x10c>)
 80021ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_UART_MspInit+0x10c>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	4b34      	ldr	r3, [pc, #208]	; (8002294 <HAL_UART_MspInit+0x10c>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a33      	ldr	r2, [pc, #204]	; (8002294 <HAL_UART_MspInit+0x10c>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_UART_MspInit+0x10c>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	4619      	mov	r1, r3
 80021ec:	482a      	ldr	r0, [pc, #168]	; (8002298 <HAL_UART_MspInit+0x110>)
 80021ee:	f000 fbb9 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	4619      	mov	r1, r3
 8002206:	4824      	ldr	r0, [pc, #144]	; (8002298 <HAL_UART_MspInit+0x110>)
 8002208:	f000 fbac 	bl	8002964 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	2025      	movs	r0, #37	; 0x25
 8002212:	f000 fac0 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002216:	2025      	movs	r0, #37	; 0x25
 8002218:	f000 fad9 	bl	80027ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800221c:	e034      	b.n	8002288 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1e      	ldr	r2, [pc, #120]	; (800229c <HAL_UART_MspInit+0x114>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d12f      	bne.n	8002288 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <HAL_UART_MspInit+0x10c>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a19      	ldr	r2, [pc, #100]	; (8002294 <HAL_UART_MspInit+0x10c>)
 800222e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002232:	61d3      	str	r3, [r2, #28]
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <HAL_UART_MspInit+0x10c>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_UART_MspInit+0x10c>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	4a13      	ldr	r2, [pc, #76]	; (8002294 <HAL_UART_MspInit+0x10c>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6193      	str	r3, [r2, #24]
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_UART_MspInit+0x10c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002258:	2304      	movs	r3, #4
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 0318 	add.w	r3, r7, #24
 8002268:	4619      	mov	r1, r3
 800226a:	480b      	ldr	r0, [pc, #44]	; (8002298 <HAL_UART_MspInit+0x110>)
 800226c:	f000 fb7a 	bl	8002964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002270:	2308      	movs	r3, #8
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0318 	add.w	r3, r7, #24
 8002280:	4619      	mov	r1, r3
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <HAL_UART_MspInit+0x110>)
 8002284:	f000 fb6e 	bl	8002964 <HAL_GPIO_Init>
}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40013800 	.word	0x40013800
 8002294:	40021000 	.word	0x40021000
 8002298:	40010800 	.word	0x40010800
 800229c:	40004400 	.word	0x40004400

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler+0x4>

080022a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <MemManage_Handler+0x4>

080022b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <BusFault_Handler+0x4>

080022b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <UsageFault_Handler+0x4>

080022be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e6:	f000 f93f 	bl	8002568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <USART1_IRQHandler+0x10>)
 80022f6:	f001 ff8b 	bl	8004210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200002d4 	.word	0x200002d4

08002304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	return 1;
 8002308:	2301      	movs	r3, #1
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <_kill>:

int _kill(int pid, int sig)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800231c:	f002 fba0 	bl	8004a60 <__errno>
 8002320:	4603      	mov	r3, r0
 8002322:	2216      	movs	r2, #22
 8002324:	601a      	str	r2, [r3, #0]
	return -1;
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_exit>:

void _exit (int status)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800233a:	f04f 31ff 	mov.w	r1, #4294967295
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffe7 	bl	8002312 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002344:	e7fe      	b.n	8002344 <_exit+0x12>

08002346 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e00a      	b.n	800236e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002358:	f3af 8000 	nop.w
 800235c:	4601      	mov	r1, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3301      	adds	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	dbf0      	blt.n	8002358 <_read+0x12>
	}

return len;
 8002376:	687b      	ldr	r3, [r7, #4]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e009      	b.n	80023a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	60ba      	str	r2, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dbf1      	blt.n	8002392 <_write+0x12>
	}
	return len;
 80023ae:	687b      	ldr	r3, [r7, #4]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_close>:

int _close(int file)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	return -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023de:	605a      	str	r2, [r3, #4]
	return 0;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <_isatty>:

int _isatty(int file)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	return 1;
 80023f4:	2301      	movs	r3, #1
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
	return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f002 fb0a 	bl	8004a60 <__errno>
 800244c:	4603      	mov	r3, r0
 800244e:	220c      	movs	r2, #12
 8002450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <_sbrk+0x64>)
 8002468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20005000 	.word	0x20005000
 8002478:	00000400 	.word	0x00000400
 800247c:	200003e4 	.word	0x200003e4
 8002480:	20000400 	.word	0x20000400

08002484 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002492:	490d      	ldr	r1, [pc, #52]	; (80024c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002498:	e002      	b.n	80024a0 <LoopCopyDataInit>

0800249a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800249c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249e:	3304      	adds	r3, #4

080024a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a4:	d3f9      	bcc.n	800249a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024a8:	4c0a      	ldr	r4, [pc, #40]	; (80024d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024ac:	e001      	b.n	80024b2 <LoopFillZerobss>

080024ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b0:	3204      	adds	r2, #4

080024b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b4:	d3fb      	bcc.n	80024ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024b6:	f7ff ffe5 	bl	8002484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ba:	f002 fad7 	bl	8004a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024be:	f7ff fa35 	bl	800192c <main>
  bx lr
 80024c2:	4770      	bx	lr
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80024cc:	08009a44 	.word	0x08009a44
  ldr r2, =_sbss
 80024d0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80024d4:	200003fc 	.word	0x200003fc

080024d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <ADC1_2_IRQHandler>
	...

080024dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <HAL_Init+0x28>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_Init+0x28>)
 80024e6:	f043 0310 	orr.w	r3, r3, #16
 80024ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ec:	2003      	movs	r0, #3
 80024ee:	f000 f947 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024f2:	200f      	movs	r0, #15
 80024f4:	f000 f808 	bl	8002508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f8:	f7ff fdca 	bl	8002090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40022000 	.word	0x40022000

08002508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_InitTick+0x54>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_InitTick+0x58>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002522:	fbb2 f3f3 	udiv	r3, r2, r3
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f95f 	bl	80027ea <HAL_SYSTICK_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e00e      	b.n	8002554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b0f      	cmp	r3, #15
 800253a:	d80a      	bhi.n	8002552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800253c:	2200      	movs	r2, #0
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f000 f927 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002548:	4a06      	ldr	r2, [pc, #24]	; (8002564 <HAL_InitTick+0x5c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000000 	.word	0x20000000
 8002560:	20000008 	.word	0x20000008
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_IncTick+0x1c>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_IncTick+0x20>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4413      	add	r3, r2
 8002578:	4a03      	ldr	r2, [pc, #12]	; (8002588 <HAL_IncTick+0x20>)
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	20000008 	.word	0x20000008
 8002588:	200003e8 	.word	0x200003e8

0800258c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b02      	ldr	r3, [pc, #8]	; (800259c <HAL_GetTick+0x10>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	200003e8 	.word	0x200003e8

080025a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff fff0 	bl	800258c <HAL_GetTick>
 80025ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b8:	d005      	beq.n	80025c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_Delay+0x44>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025c6:	bf00      	nop
 80025c8:	f7ff ffe0 	bl	800258c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d8f7      	bhi.n	80025c8 <HAL_Delay+0x28>
  {
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000008 	.word	0x20000008

080025e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002604:	4013      	ands	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261a:	4a04      	ldr	r2, [pc, #16]	; (800262c <__NVIC_SetPriorityGrouping+0x44>)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	60d3      	str	r3, [r2, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <__NVIC_GetPriorityGrouping+0x18>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 0307 	and.w	r3, r3, #7
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	db0b      	blt.n	8002676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	4906      	ldr	r1, [pc, #24]	; (8002680 <__NVIC_EnableIRQ+0x34>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	2001      	movs	r0, #1
 800266e:	fa00 f202 	lsl.w	r2, r0, r2
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100

08002684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	; (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	; (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
         );
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	; 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff90 	bl	8002684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff2d 	bl	80025e8 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff42 	bl	8002630 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff90 	bl	80026d8 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5f 	bl	8002684 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff35 	bl	800264c <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002814:	2b02      	cmp	r3, #2
 8002816:	d008      	beq.n	800282a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2204      	movs	r2, #4
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e020      	b.n	800286c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 020e 	bic.w	r2, r2, #14
 8002838:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800286a:	7bfb      	ldrb	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
	...

08002878 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800288a:	2b02      	cmp	r3, #2
 800288c:	d005      	beq.n	800289a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2204      	movs	r2, #4
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	e051      	b.n	800293e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 020e 	bic.w	r2, r2, #14
 80028a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0201 	bic.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <HAL_DMA_Abort_IT+0xd0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d029      	beq.n	8002918 <HAL_DMA_Abort_IT+0xa0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a20      	ldr	r2, [pc, #128]	; (800294c <HAL_DMA_Abort_IT+0xd4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d022      	beq.n	8002914 <HAL_DMA_Abort_IT+0x9c>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_DMA_Abort_IT+0xd8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d01a      	beq.n	800290e <HAL_DMA_Abort_IT+0x96>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_DMA_Abort_IT+0xdc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d012      	beq.n	8002908 <HAL_DMA_Abort_IT+0x90>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <HAL_DMA_Abort_IT+0xe0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00a      	beq.n	8002902 <HAL_DMA_Abort_IT+0x8a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_DMA_Abort_IT+0xe4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d102      	bne.n	80028fc <HAL_DMA_Abort_IT+0x84>
 80028f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028fa:	e00e      	b.n	800291a <HAL_DMA_Abort_IT+0xa2>
 80028fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002900:	e00b      	b.n	800291a <HAL_DMA_Abort_IT+0xa2>
 8002902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002906:	e008      	b.n	800291a <HAL_DMA_Abort_IT+0xa2>
 8002908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290c:	e005      	b.n	800291a <HAL_DMA_Abort_IT+0xa2>
 800290e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002912:	e002      	b.n	800291a <HAL_DMA_Abort_IT+0xa2>
 8002914:	2310      	movs	r3, #16
 8002916:	e000      	b.n	800291a <HAL_DMA_Abort_IT+0xa2>
 8002918:	2301      	movs	r3, #1
 800291a:	4a11      	ldr	r2, [pc, #68]	; (8002960 <HAL_DMA_Abort_IT+0xe8>)
 800291c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
    } 
  }
  return status;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40020008 	.word	0x40020008
 800294c:	4002001c 	.word	0x4002001c
 8002950:	40020030 	.word	0x40020030
 8002954:	40020044 	.word	0x40020044
 8002958:	40020058 	.word	0x40020058
 800295c:	4002006c 	.word	0x4002006c
 8002960:	40020000 	.word	0x40020000

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b08b      	sub	sp, #44	; 0x2c
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002976:	e169      	b.n	8002c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002978:	2201      	movs	r2, #1
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	429a      	cmp	r2, r3
 8002992:	f040 8158 	bne.w	8002c46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	4a9a      	ldr	r2, [pc, #616]	; (8002c04 <HAL_GPIO_Init+0x2a0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d05e      	beq.n	8002a5e <HAL_GPIO_Init+0xfa>
 80029a0:	4a98      	ldr	r2, [pc, #608]	; (8002c04 <HAL_GPIO_Init+0x2a0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d875      	bhi.n	8002a92 <HAL_GPIO_Init+0x12e>
 80029a6:	4a98      	ldr	r2, [pc, #608]	; (8002c08 <HAL_GPIO_Init+0x2a4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d058      	beq.n	8002a5e <HAL_GPIO_Init+0xfa>
 80029ac:	4a96      	ldr	r2, [pc, #600]	; (8002c08 <HAL_GPIO_Init+0x2a4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d86f      	bhi.n	8002a92 <HAL_GPIO_Init+0x12e>
 80029b2:	4a96      	ldr	r2, [pc, #600]	; (8002c0c <HAL_GPIO_Init+0x2a8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d052      	beq.n	8002a5e <HAL_GPIO_Init+0xfa>
 80029b8:	4a94      	ldr	r2, [pc, #592]	; (8002c0c <HAL_GPIO_Init+0x2a8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d869      	bhi.n	8002a92 <HAL_GPIO_Init+0x12e>
 80029be:	4a94      	ldr	r2, [pc, #592]	; (8002c10 <HAL_GPIO_Init+0x2ac>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d04c      	beq.n	8002a5e <HAL_GPIO_Init+0xfa>
 80029c4:	4a92      	ldr	r2, [pc, #584]	; (8002c10 <HAL_GPIO_Init+0x2ac>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d863      	bhi.n	8002a92 <HAL_GPIO_Init+0x12e>
 80029ca:	4a92      	ldr	r2, [pc, #584]	; (8002c14 <HAL_GPIO_Init+0x2b0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d046      	beq.n	8002a5e <HAL_GPIO_Init+0xfa>
 80029d0:	4a90      	ldr	r2, [pc, #576]	; (8002c14 <HAL_GPIO_Init+0x2b0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d85d      	bhi.n	8002a92 <HAL_GPIO_Init+0x12e>
 80029d6:	2b12      	cmp	r3, #18
 80029d8:	d82a      	bhi.n	8002a30 <HAL_GPIO_Init+0xcc>
 80029da:	2b12      	cmp	r3, #18
 80029dc:	d859      	bhi.n	8002a92 <HAL_GPIO_Init+0x12e>
 80029de:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <HAL_GPIO_Init+0x80>)
 80029e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e4:	08002a5f 	.word	0x08002a5f
 80029e8:	08002a39 	.word	0x08002a39
 80029ec:	08002a4b 	.word	0x08002a4b
 80029f0:	08002a8d 	.word	0x08002a8d
 80029f4:	08002a93 	.word	0x08002a93
 80029f8:	08002a93 	.word	0x08002a93
 80029fc:	08002a93 	.word	0x08002a93
 8002a00:	08002a93 	.word	0x08002a93
 8002a04:	08002a93 	.word	0x08002a93
 8002a08:	08002a93 	.word	0x08002a93
 8002a0c:	08002a93 	.word	0x08002a93
 8002a10:	08002a93 	.word	0x08002a93
 8002a14:	08002a93 	.word	0x08002a93
 8002a18:	08002a93 	.word	0x08002a93
 8002a1c:	08002a93 	.word	0x08002a93
 8002a20:	08002a93 	.word	0x08002a93
 8002a24:	08002a93 	.word	0x08002a93
 8002a28:	08002a41 	.word	0x08002a41
 8002a2c:	08002a55 	.word	0x08002a55
 8002a30:	4a79      	ldr	r2, [pc, #484]	; (8002c18 <HAL_GPIO_Init+0x2b4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a36:	e02c      	b.n	8002a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	623b      	str	r3, [r7, #32]
          break;
 8002a3e:	e029      	b.n	8002a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	3304      	adds	r3, #4
 8002a46:	623b      	str	r3, [r7, #32]
          break;
 8002a48:	e024      	b.n	8002a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	3308      	adds	r3, #8
 8002a50:	623b      	str	r3, [r7, #32]
          break;
 8002a52:	e01f      	b.n	8002a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	623b      	str	r3, [r7, #32]
          break;
 8002a5c:	e01a      	b.n	8002a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a66:	2304      	movs	r3, #4
 8002a68:	623b      	str	r3, [r7, #32]
          break;
 8002a6a:	e013      	b.n	8002a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a74:	2308      	movs	r3, #8
 8002a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	611a      	str	r2, [r3, #16]
          break;
 8002a7e:	e009      	b.n	8002a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a80:	2308      	movs	r3, #8
 8002a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	615a      	str	r2, [r3, #20]
          break;
 8002a8a:	e003      	b.n	8002a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
          break;
 8002a90:	e000      	b.n	8002a94 <HAL_GPIO_Init+0x130>
          break;
 8002a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2bff      	cmp	r3, #255	; 0xff
 8002a98:	d801      	bhi.n	8002a9e <HAL_GPIO_Init+0x13a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	e001      	b.n	8002aa2 <HAL_GPIO_Init+0x13e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2bff      	cmp	r3, #255	; 0xff
 8002aa8:	d802      	bhi.n	8002ab0 <HAL_GPIO_Init+0x14c>
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	e002      	b.n	8002ab6 <HAL_GPIO_Init+0x152>
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	3b08      	subs	r3, #8
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	210f      	movs	r1, #15
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	401a      	ands	r2, r3
 8002ac8:	6a39      	ldr	r1, [r7, #32]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80b1 	beq.w	8002c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ae4:	4b4d      	ldr	r3, [pc, #308]	; (8002c1c <HAL_GPIO_Init+0x2b8>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4a4c      	ldr	r2, [pc, #304]	; (8002c1c <HAL_GPIO_Init+0x2b8>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6193      	str	r3, [r2, #24]
 8002af0:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_GPIO_Init+0x2b8>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002afc:	4a48      	ldr	r2, [pc, #288]	; (8002c20 <HAL_GPIO_Init+0x2bc>)
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3302      	adds	r3, #2
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a40      	ldr	r2, [pc, #256]	; (8002c24 <HAL_GPIO_Init+0x2c0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d013      	beq.n	8002b50 <HAL_GPIO_Init+0x1ec>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a3f      	ldr	r2, [pc, #252]	; (8002c28 <HAL_GPIO_Init+0x2c4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00d      	beq.n	8002b4c <HAL_GPIO_Init+0x1e8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a3e      	ldr	r2, [pc, #248]	; (8002c2c <HAL_GPIO_Init+0x2c8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x1e4>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a3d      	ldr	r2, [pc, #244]	; (8002c30 <HAL_GPIO_Init+0x2cc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_GPIO_Init+0x1e0>
 8002b40:	2303      	movs	r3, #3
 8002b42:	e006      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b44:	2304      	movs	r3, #4
 8002b46:	e004      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e002      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_GPIO_Init+0x1ee>
 8002b50:	2300      	movs	r3, #0
 8002b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b54:	f002 0203 	and.w	r2, r2, #3
 8002b58:	0092      	lsls	r2, r2, #2
 8002b5a:	4093      	lsls	r3, r2
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b62:	492f      	ldr	r1, [pc, #188]	; (8002c20 <HAL_GPIO_Init+0x2bc>)
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3302      	adds	r3, #2
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	492c      	ldr	r1, [pc, #176]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4928      	ldr	r1, [pc, #160]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4922      	ldr	r1, [pc, #136]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	491e      	ldr	r1, [pc, #120]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d006      	beq.n	8002bda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	4918      	ldr	r1, [pc, #96]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]
 8002bd8:	e006      	b.n	8002be8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4914      	ldr	r1, [pc, #80]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d021      	beq.n	8002c38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	490e      	ldr	r1, [pc, #56]	; (8002c34 <HAL_GPIO_Init+0x2d0>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60cb      	str	r3, [r1, #12]
 8002c00:	e021      	b.n	8002c46 <HAL_GPIO_Init+0x2e2>
 8002c02:	bf00      	nop
 8002c04:	10320000 	.word	0x10320000
 8002c08:	10310000 	.word	0x10310000
 8002c0c:	10220000 	.word	0x10220000
 8002c10:	10210000 	.word	0x10210000
 8002c14:	10120000 	.word	0x10120000
 8002c18:	10110000 	.word	0x10110000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40010800 	.word	0x40010800
 8002c28:	40010c00 	.word	0x40010c00
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	40011400 	.word	0x40011400
 8002c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <HAL_GPIO_Init+0x304>)
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	4909      	ldr	r1, [pc, #36]	; (8002c68 <HAL_GPIO_Init+0x304>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	3301      	adds	r3, #1
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	fa22 f303 	lsr.w	r3, r2, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f47f ae8e 	bne.w	8002978 <HAL_GPIO_Init+0x14>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	372c      	adds	r7, #44	; 0x2c
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40010400 	.word	0x40010400

08002c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	e001      	b.n	8002c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002caa:	787b      	ldrb	r3, [r7, #1]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb0:	887a      	ldrh	r2, [r7, #2]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cb6:	e003      	b.n	8002cc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	041a      	lsls	r2, r3, #16
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	611a      	str	r2, [r3, #16]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e272      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8087 	beq.w	8002dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cec:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d00c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf8:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d112      	bne.n	8002d2a <HAL_RCC_OscConfig+0x5e>
 8002d04:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d12:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d06c      	beq.n	8002df8 <HAL_RCC_OscConfig+0x12c>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d168      	bne.n	8002df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e24c      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d106      	bne.n	8002d42 <HAL_RCC_OscConfig+0x76>
 8002d34:	4b80      	ldr	r3, [pc, #512]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a7f      	ldr	r2, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e02e      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x98>
 8002d4a:	4b7b      	ldr	r3, [pc, #492]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a7a      	ldr	r2, [pc, #488]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b78      	ldr	r3, [pc, #480]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a77      	ldr	r2, [pc, #476]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0xbc>
 8002d6e:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a71      	ldr	r2, [pc, #452]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xd4>
 8002d88:	4b6b      	ldr	r3, [pc, #428]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6a      	ldr	r2, [pc, #424]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a67      	ldr	r2, [pc, #412]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff fbf0 	bl	800258c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff fbec 	bl	800258c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e200      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5d      	ldr	r3, [pc, #372]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe4>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fbdc 	bl	800258c <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff fbd8 	bl	800258c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1ec      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x10c>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e06:	4b4c      	ldr	r3, [pc, #304]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e12:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x18c>
 8002e1e:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x176>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c0      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3d      	ldr	r3, [pc, #244]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4939      	ldr	r1, [pc, #228]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7ff fb91 	bl	800258c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff fb8d 	bl	800258c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a1      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4927      	ldr	r1, [pc, #156]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_RCC_OscConfig+0x270>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fb70 	bl	800258c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fb6c 	bl	800258c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e180      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d03a      	beq.n	8002f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d019      	beq.n	8002f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <HAL_RCC_OscConfig+0x274>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee8:	f7ff fb50 	bl	800258c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff fb4c 	bl	800258c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e160      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f000 fad8 	bl	80034c4 <RCC_Delay>
 8002f14:	e01c      	b.n	8002f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_RCC_OscConfig+0x274>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1c:	f7ff fb36 	bl	800258c <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f22:	e00f      	b.n	8002f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f24:	f7ff fb32 	bl	800258c <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d908      	bls.n	8002f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e146      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	42420000 	.word	0x42420000
 8002f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	4b92      	ldr	r3, [pc, #584]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e9      	bne.n	8002f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a6 	beq.w	80030aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f62:	4b8b      	ldr	r3, [pc, #556]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10d      	bne.n	8002f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	4a87      	ldr	r2, [pc, #540]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	61d3      	str	r3, [r2, #28]
 8002f7a:	4b85      	ldr	r3, [pc, #532]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b82      	ldr	r3, [pc, #520]	; (8003194 <HAL_RCC_OscConfig+0x4c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d118      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f96:	4b7f      	ldr	r3, [pc, #508]	; (8003194 <HAL_RCC_OscConfig+0x4c8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a7e      	ldr	r2, [pc, #504]	; (8003194 <HAL_RCC_OscConfig+0x4c8>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7ff faf3 	bl	800258c <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7ff faef 	bl	800258c <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	; 0x64
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e103      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b75      	ldr	r3, [pc, #468]	; (8003194 <HAL_RCC_OscConfig+0x4c8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x312>
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	4a6e      	ldr	r2, [pc, #440]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6213      	str	r3, [r2, #32]
 8002fdc:	e02d      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x334>
 8002fe6:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4a69      	ldr	r2, [pc, #420]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6213      	str	r3, [r2, #32]
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	4a66      	ldr	r2, [pc, #408]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	6213      	str	r3, [r2, #32]
 8002ffe:	e01c      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b05      	cmp	r3, #5
 8003006:	d10c      	bne.n	8003022 <HAL_RCC_OscConfig+0x356>
 8003008:	4b61      	ldr	r3, [pc, #388]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	4a60      	ldr	r2, [pc, #384]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	6213      	str	r3, [r2, #32]
 8003014:	4b5e      	ldr	r3, [pc, #376]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4a5d      	ldr	r2, [pc, #372]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6213      	str	r3, [r2, #32]
 8003020:	e00b      	b.n	800303a <HAL_RCC_OscConfig+0x36e>
 8003022:	4b5b      	ldr	r3, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4a5a      	ldr	r2, [pc, #360]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	6213      	str	r3, [r2, #32]
 800302e:	4b58      	ldr	r3, [pc, #352]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a57      	ldr	r2, [pc, #348]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d015      	beq.n	800306e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7ff faa3 	bl	800258c <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7ff fa9f 	bl	800258c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0b1      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	4b4b      	ldr	r3, [pc, #300]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ee      	beq.n	800304a <HAL_RCC_OscConfig+0x37e>
 800306c:	e014      	b.n	8003098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800306e:	f7ff fa8d 	bl	800258c <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003074:	e00a      	b.n	800308c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003076:	f7ff fa89 	bl	800258c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	; 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e09b      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	4b40      	ldr	r3, [pc, #256]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ee      	bne.n	8003076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d105      	bne.n	80030aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800309e:	4b3c      	ldr	r3, [pc, #240]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a3b      	ldr	r2, [pc, #236]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8087 	beq.w	80031c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d061      	beq.n	8003184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d146      	bne.n	8003156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7ff fa5d 	bl	800258c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7ff fa59 	bl	800258c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e06d      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1f0      	bne.n	80030d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d108      	bne.n	8003110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	4921      	ldr	r1, [pc, #132]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003110:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a19      	ldr	r1, [r3, #32]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	430b      	orrs	r3, r1
 8003122:	491b      	ldr	r1, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_RCC_OscConfig+0x4cc>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7ff fa2d 	bl	800258c <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003136:	f7ff fa29 	bl	800258c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e03d      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003148:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x46a>
 8003154:	e035      	b.n	80031c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCC_OscConfig+0x4cc>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7ff fa16 	bl	800258c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7ff fa12 	bl	800258c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e026      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x498>
 8003182:	e01e      	b.n	80031c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e019      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
 8003190:	40021000 	.word	0x40021000
 8003194:	40007000 	.word	0x40007000
 8003198:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x500>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d106      	bne.n	80031be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0d0      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b67      	ldr	r3, [pc, #412]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 0207 	bic.w	r2, r3, #7
 80031fa:	4965      	ldr	r1, [pc, #404]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b63      	ldr	r3, [pc, #396]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0b8      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800322c:	4b59      	ldr	r3, [pc, #356]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4a58      	ldr	r2, [pc, #352]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003236:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003244:	4b53      	ldr	r3, [pc, #332]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a52      	ldr	r2, [pc, #328]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800324e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b50      	ldr	r3, [pc, #320]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	494d      	ldr	r1, [pc, #308]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d040      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d115      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e07f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e073      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06b      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b39      	ldr	r3, [pc, #228]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4936      	ldr	r1, [pc, #216]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c0:	f7ff f964 	bl	800258c <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7ff f960 	bl	800258c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e053      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d210      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 0207 	bic.w	r2, r3, #7
 8003306:	4922      	ldr	r1, [pc, #136]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e032      	b.n	8003386 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4916      	ldr	r1, [pc, #88]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	490e      	ldr	r1, [pc, #56]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335e:	f000 f821 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003362:	4602      	mov	r2, r0
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	490a      	ldr	r1, [pc, #40]	; (8003398 <HAL_RCC_ClockConfig+0x1c8>)
 8003370:	5ccb      	ldrb	r3, [r1, r3]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a09      	ldr	r2, [pc, #36]	; (800339c <HAL_RCC_ClockConfig+0x1cc>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1d0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f8c2 	bl	8002508 <HAL_InitTick>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40022000 	.word	0x40022000
 8003394:	40021000 	.word	0x40021000
 8003398:	0800957c 	.word	0x0800957c
 800339c:	20000000 	.word	0x20000000
 80033a0:	20000004 	.word	0x20000004

080033a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	b490      	push	{r4, r7}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033aa:	4b29      	ldr	r3, [pc, #164]	; (8003450 <HAL_RCC_GetSysClockFreq+0xac>)
 80033ac:	1d3c      	adds	r4, r7, #4
 80033ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033b4:	f240 2301 	movw	r3, #513	; 0x201
 80033b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ce:	4b21      	ldr	r3, [pc, #132]	; (8003454 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d002      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x40>
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x46>
 80033e2:	e02b      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033e6:	623b      	str	r3, [r7, #32]
      break;
 80033e8:	e02b      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	0c9b      	lsrs	r3, r3, #18
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	3328      	adds	r3, #40	; 0x28
 80033f4:	443b      	add	r3, r7
 80033f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d012      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	0c5b      	lsrs	r3, r3, #17
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	3328      	adds	r3, #40	; 0x28
 8003412:	443b      	add	r3, r7
 8003414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003418:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb4>)
 800341e:	fb03 f202 	mul.w	r2, r3, r2
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	fbb2 f3f3 	udiv	r3, r2, r3
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
 800342a:	e004      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	4a0b      	ldr	r2, [pc, #44]	; (800345c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003430:	fb02 f303 	mul.w	r3, r2, r3
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	623b      	str	r3, [r7, #32]
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb4>)
 800343e:	623b      	str	r3, [r7, #32]
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	6a3b      	ldr	r3, [r7, #32]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3728      	adds	r7, #40	; 0x28
 8003448:	46bd      	mov	sp, r7
 800344a:	bc90      	pop	{r4, r7}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	0800936c 	.word	0x0800936c
 8003454:	40021000 	.word	0x40021000
 8003458:	007a1200 	.word	0x007a1200
 800345c:	003d0900 	.word	0x003d0900

08003460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003464:	4b02      	ldr	r3, [pc, #8]	; (8003470 <HAL_RCC_GetHCLKFreq+0x10>)
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000000 	.word	0x20000000

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff2 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	0a1b      	lsrs	r3, r3, #8
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021000 	.word	0x40021000
 8003498:	0800958c 	.word	0x0800958c

0800349c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a0:	f7ff ffde 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	0adb      	lsrs	r3, r3, #11
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b2:	5ccb      	ldrb	r3, [r1, r3]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	0800958c 	.word	0x0800958c

080034c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <RCC_Delay+0x34>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <RCC_Delay+0x38>)
 80034d2:	fba2 2303 	umull	r2, r3, r2, r3
 80034d6:	0a5b      	lsrs	r3, r3, #9
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034e0:	bf00      	nop
  }
  while (Delay --);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1e5a      	subs	r2, r3, #1
 80034e6:	60fa      	str	r2, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f9      	bne.n	80034e0 <RCC_Delay+0x1c>
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	20000000 	.word	0x20000000
 80034fc:	10624dd3 	.word	0x10624dd3

08003500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e076      	b.n	8003600 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003522:	d009      	beq.n	8003538 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	61da      	str	r2, [r3, #28]
 800352a:	e005      	b.n	8003538 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fdce 	bl	80020f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a8:	431a      	orrs	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035bc:	ea42 0103 	orr.w	r1, r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	0c1a      	lsrs	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f002 0204 	and.w	r2, r2, #4
 80035de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_SPI_Transmit+0x22>
 8003626:	2302      	movs	r3, #2
 8003628:	e126      	b.n	8003878 <HAL_SPI_Transmit+0x270>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003632:	f7fe ffab 	bl	800258c <HAL_GetTick>
 8003636:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d002      	beq.n	800364e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800364c:	e10b      	b.n	8003866 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_SPI_Transmit+0x52>
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800365e:	e102      	b.n	8003866 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2203      	movs	r2, #3
 8003664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88fa      	ldrh	r2, [r7, #6]
 800367e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a6:	d10f      	bne.n	80036c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d007      	beq.n	80036e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d14b      	bne.n	8003788 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_Transmit+0xf6>
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d13e      	bne.n	800377c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	1c9a      	adds	r2, r3, #2
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003722:	e02b      	b.n	800377c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d112      	bne.n	8003758 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	881a      	ldrh	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	1c9a      	adds	r2, r3, #2
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	86da      	strh	r2, [r3, #54]	; 0x36
 8003756:	e011      	b.n	800377c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003758:	f7fe ff18 	bl	800258c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d803      	bhi.n	8003770 <HAL_SPI_Transmit+0x168>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d102      	bne.n	8003776 <HAL_SPI_Transmit+0x16e>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	77fb      	strb	r3, [r7, #31]
          goto error;
 800377a:	e074      	b.n	8003866 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ce      	bne.n	8003724 <HAL_SPI_Transmit+0x11c>
 8003786:	e04c      	b.n	8003822 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_Transmit+0x18e>
 8003790:	8afb      	ldrh	r3, [r7, #22]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d140      	bne.n	8003818 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	7812      	ldrb	r2, [r2, #0]
 80037a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037bc:	e02c      	b.n	8003818 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d113      	bne.n	80037f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	330c      	adds	r3, #12
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80037f2:	e011      	b.n	8003818 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037f4:	f7fe feca 	bl	800258c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d803      	bhi.n	800380c <HAL_SPI_Transmit+0x204>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d102      	bne.n	8003812 <HAL_SPI_Transmit+0x20a>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003816:	e026      	b.n	8003866 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1cd      	bne.n	80037be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fbc4 	bl	8003fb4 <SPI_EndRxTxTransaction>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003840:	2300      	movs	r3, #0
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e000      	b.n	8003866 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003864:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003876:	7ffb      	ldrb	r3, [r7, #31]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3720      	adds	r7, #32
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	4613      	mov	r3, r2
 800388e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389c:	d112      	bne.n	80038c4 <HAL_SPI_Receive+0x44>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10e      	bne.n	80038c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2204      	movs	r2, #4
 80038aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80038ae:	88fa      	ldrh	r2, [r7, #6]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	4613      	mov	r3, r2
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f8f1 	bl	8003aa2 <HAL_SPI_TransmitReceive>
 80038c0:	4603      	mov	r3, r0
 80038c2:	e0ea      	b.n	8003a9a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_SPI_Receive+0x52>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e0e3      	b.n	8003a9a <HAL_SPI_Receive+0x21a>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038da:	f7fe fe57 	bl	800258c <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d002      	beq.n	80038f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
 80038ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038f0:	e0ca      	b.n	8003a88 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_SPI_Receive+0x7e>
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003902:	e0c1      	b.n	8003a88 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2204      	movs	r2, #4
 8003908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	88fa      	ldrh	r2, [r7, #6]
 8003922:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394a:	d10f      	bne.n	800396c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800395a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800396a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d007      	beq.n	800398a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003988:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d162      	bne.n	8003a58 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003992:	e02e      	b.n	80039f2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d115      	bne.n	80039ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f103 020c 	add.w	r2, r3, #12
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039cc:	e011      	b.n	80039f2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ce:	f7fe fddd 	bl	800258c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d803      	bhi.n	80039e6 <HAL_SPI_Receive+0x166>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_Receive+0x16c>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039f0:	e04a      	b.n	8003a88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1cb      	bne.n	8003994 <HAL_SPI_Receive+0x114>
 80039fc:	e031      	b.n	8003a62 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d113      	bne.n	8003a34 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	b292      	uxth	r2, r2
 8003a18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	1c9a      	adds	r2, r3, #2
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a32:	e011      	b.n	8003a58 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a34:	f7fe fdaa 	bl	800258c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d803      	bhi.n	8003a4c <HAL_SPI_Receive+0x1cc>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d102      	bne.n	8003a52 <HAL_SPI_Receive+0x1d2>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d102      	bne.n	8003a58 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003a56:	e017      	b.n	8003a88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1cd      	bne.n	80039fe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa52 	bl	8003f10 <SPI_EndRxTransaction>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
 8003a84:	e000      	b.n	8003a88 <HAL_SPI_Receive+0x208>
  }

error :
 8003a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b08c      	sub	sp, #48	; 0x30
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_SPI_TransmitReceive+0x26>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e18a      	b.n	8003dde <HAL_SPI_TransmitReceive+0x33c>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad0:	f7fe fd5c 	bl	800258c <HAL_GetTick>
 8003ad4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003aea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d00f      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x70>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af8:	d107      	bne.n	8003b0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <HAL_SPI_TransmitReceive+0x68>
 8003b02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d003      	beq.n	8003b12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b10:	e15b      	b.n	8003dca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x82>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x82>
 8003b1e:	887b      	ldrh	r3, [r7, #2]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b2a:	e14e      	b.n	8003dca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d003      	beq.n	8003b40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	887a      	ldrh	r2, [r7, #2]
 8003b56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	887a      	ldrh	r2, [r7, #2]
 8003b62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d007      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9c:	d178      	bne.n	8003c90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_SPI_TransmitReceive+0x10a>
 8003ba6:	8b7b      	ldrh	r3, [r7, #26]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d166      	bne.n	8003c7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	881a      	ldrh	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	1c9a      	adds	r2, r3, #2
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd0:	e053      	b.n	8003c7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d11b      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x176>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x176>
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d113      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	881a      	ldrh	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	1c9a      	adds	r2, r3, #2
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d119      	bne.n	8003c5a <HAL_SPI_TransmitReceive+0x1b8>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d014      	beq.n	8003c5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	b292      	uxth	r2, r2
 8003c3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	1c9a      	adds	r2, r3, #2
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c56:	2301      	movs	r3, #1
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c5a:	f7fe fc97 	bl	800258c <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d807      	bhi.n	8003c7a <HAL_SPI_TransmitReceive+0x1d8>
 8003c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d003      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c78:	e0a7      	b.n	8003dca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1a6      	bne.n	8003bd2 <HAL_SPI_TransmitReceive+0x130>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1a1      	bne.n	8003bd2 <HAL_SPI_TransmitReceive+0x130>
 8003c8e:	e07c      	b.n	8003d8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_SPI_TransmitReceive+0x1fc>
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d16b      	bne.n	8003d76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc4:	e057      	b.n	8003d76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d11c      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x26c>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x26c>
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d114      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d119      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x2ae>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d014      	beq.n	8003d50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d50:	f7fe fc1c 	bl	800258c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d803      	bhi.n	8003d68 <HAL_SPI_TransmitReceive+0x2c6>
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_TransmitReceive+0x2cc>
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d74:	e029      	b.n	8003dca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1a2      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x224>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d19d      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 f910 	bl	8003fb4 <SPI_EndRxTxTransaction>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003da6:	e010      	b.n	8003dca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	e000      	b.n	8003dca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003dc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3730      	adds	r7, #48	; 0x30
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df4:	b2db      	uxtb	r3, r3
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e10:	f7fe fbbc 	bl	800258c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e20:	f7fe fbb4 	bl	800258c <HAL_GetTick>
 8003e24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e26:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	015b      	lsls	r3, r3, #5
 8003e2c:	0d1b      	lsrs	r3, r3, #20
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e36:	e054      	b.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d050      	beq.n	8003ee2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e40:	f7fe fba4 	bl	800258c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d902      	bls.n	8003e56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d13d      	bne.n	8003ed2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6e:	d111      	bne.n	8003e94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e78:	d004      	beq.n	8003e84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e82:	d107      	bne.n	8003e94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e9c:	d10f      	bne.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ebc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e017      	b.n	8003f02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4013      	ands	r3, r2
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	bf0c      	ite	eq
 8003ef2:	2301      	moveq	r3, #1
 8003ef4:	2300      	movne	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d19b      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000000 	.word	0x20000000

08003f10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f24:	d111      	bne.n	8003f4a <SPI_EndRxTransaction+0x3a>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2e:	d004      	beq.n	8003f3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f38:	d107      	bne.n	8003f4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f48:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f52:	d117      	bne.n	8003f84 <SPI_EndRxTransaction+0x74>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5c:	d112      	bne.n	8003f84 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2101      	movs	r1, #1
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff ff49 	bl	8003e00 <SPI_WaitFlagStateUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01a      	beq.n	8003faa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	f043 0220 	orr.w	r2, r3, #32
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e013      	b.n	8003fac <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff ff36 	bl	8003e00 <SPI_WaitFlagStateUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e000      	b.n	8003fac <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2180      	movs	r1, #128	; 0x80
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff ff18 	bl	8003e00 <SPI_WaitFlagStateUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e000      	b.n	8003fe8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d101      	bne.n	8004002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e03f      	b.n	8004082 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe f8b6 	bl	8002188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	; 0x24
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fc85 	bl	8004944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08a      	sub	sp, #40	; 0x28
 800408e:	af02      	add	r7, sp, #8
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d17c      	bne.n	80041a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_UART_Transmit+0x2c>
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e075      	b.n	80041a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_UART_Transmit+0x3e>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e06e      	b.n	80041a6 <HAL_UART_Transmit+0x11c>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2221      	movs	r2, #33	; 0x21
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040de:	f7fe fa55 	bl	800258c <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d108      	bne.n	800410c <HAL_UART_Transmit+0x82>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d104      	bne.n	800410c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	e003      	b.n	8004114 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800411c:	e02a      	b.n	8004174 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fa38 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e036      	b.n	80041a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800414c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3302      	adds	r3, #2
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e007      	b.n	8004166 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	3301      	adds	r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1cf      	bne.n	800411e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2200      	movs	r2, #0
 8004186:	2140      	movs	r1, #64	; 0x40
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fa08 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e006      	b.n	80041a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	e000      	b.n	80041a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b20      	cmp	r3, #32
 80041c6:	d11d      	bne.n	8004204 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_UART_Receive_IT+0x26>
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e016      	b.n	8004206 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Receive_IT+0x38>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e00f      	b.n	8004206 <HAL_UART_Receive_IT+0x58>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fa19 	bl	8004632 <UART_Start_Receive_IT>
 8004200:	4603      	mov	r3, r0
 8004202:	e000      	b.n	8004206 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004204:	2302      	movs	r3, #2
  }
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	; 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_UART_IRQHandler+0x52>
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fac9 	bl	80047f2 <UART_Receive_IT>
      return;
 8004260:	e17b      	b.n	800455a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80b1 	beq.w	80043cc <HAL_UART_IRQHandler+0x1bc>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <HAL_UART_IRQHandler+0x70>
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80a6 	beq.w	80043cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_UART_IRQHandler+0x90>
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	f043 0201 	orr.w	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_UART_IRQHandler+0xb0>
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	f043 0202 	orr.w	r2, r3, #2
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <HAL_UART_IRQHandler+0xd0>
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	f043 0204 	orr.w	r2, r3, #4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00f      	beq.n	800430a <HAL_UART_IRQHandler+0xfa>
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <HAL_UART_IRQHandler+0xee>
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0208 	orr.w	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 811e 	beq.w	8004550 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	d007      	beq.n	800432e <HAL_UART_IRQHandler+0x11e>
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 fa62 	bl	80047f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf14      	ite	ne
 800433c:	2301      	movne	r3, #1
 800433e:	2300      	moveq	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <HAL_UART_IRQHandler+0x146>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d031      	beq.n	80043ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f9a4 	bl	80046a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d023      	beq.n	80043b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004378:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d013      	beq.n	80043aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	4a76      	ldr	r2, [pc, #472]	; (8004560 <HAL_UART_IRQHandler+0x350>)
 8004388:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fa72 	bl	8002878 <HAL_DMA_Abort_IT>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043a4:	4610      	mov	r0, r2
 80043a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e00e      	b.n	80043c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8e3 	bl	8004576 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e00a      	b.n	80043c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f8df 	bl	8004576 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	e006      	b.n	80043c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f8db 	bl	8004576 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043c6:	e0c3      	b.n	8004550 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c8:	bf00      	nop
    return;
 80043ca:	e0c1      	b.n	8004550 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	f040 80a1 	bne.w	8004518 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 809b 	beq.w	8004518 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8095 	beq.w	8004518 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d04e      	beq.n	80044b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800441c:	8a3b      	ldrh	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8098 	beq.w	8004554 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004428:	8a3a      	ldrh	r2, [r7, #16]
 800442a:	429a      	cmp	r2, r3
 800442c:	f080 8092 	bcs.w	8004554 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8a3a      	ldrh	r2, [r7, #16]
 8004434:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b20      	cmp	r3, #32
 800443e:	d02b      	beq.n	8004498 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800444e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800446e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0210 	bic.w	r2, r2, #16
 800448c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe f9b5 	bl	8002802 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f86d 	bl	8004588 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044ae:	e051      	b.n	8004554 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d047      	beq.n	8004558 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80044c8:	8a7b      	ldrh	r3, [r7, #18]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d044      	beq.n	8004558 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0210 	bic.w	r2, r2, #16
 800450a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800450c:	8a7b      	ldrh	r3, [r7, #18]
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f839 	bl	8004588 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004516:	e01f      	b.n	8004558 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d008      	beq.n	8004534 <HAL_UART_IRQHandler+0x324>
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8f9 	bl	8004724 <UART_Transmit_IT>
    return;
 8004532:	e012      	b.n	800455a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00d      	beq.n	800455a <HAL_UART_IRQHandler+0x34a>
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f93a 	bl	80047c2 <UART_EndTransmit_IT>
    return;
 800454e:	e004      	b.n	800455a <HAL_UART_IRQHandler+0x34a>
    return;
 8004550:	bf00      	nop
 8004552:	e002      	b.n	800455a <HAL_UART_IRQHandler+0x34a>
      return;
 8004554:	bf00      	nop
 8004556:	e000      	b.n	800455a <HAL_UART_IRQHandler+0x34a>
      return;
 8004558:	bf00      	nop
  }
}
 800455a:	3728      	adds	r7, #40	; 0x28
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	080046fd 	.word	0x080046fd

08004564 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ae:	e02c      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d028      	beq.n	800460a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x30>
 80045be:	f7fd ffe5 	bl	800258c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d21d      	bcs.n	800460a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e00f      	b.n	800462a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4013      	ands	r3, r2
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	429a      	cmp	r2, r3
 8004626:	d0c3      	beq.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	4613      	mov	r3, r2
 800463e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2222      	movs	r2, #34	; 0x22
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004676:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0220 	orr.w	r2, r2, #32
 8004696:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0210 	bic.w	r2, r2, #16
 80046e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7ff ff2d 	bl	8004576 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b21      	cmp	r3, #33	; 0x21
 8004736:	d13e      	bne.n	80047b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004740:	d114      	bne.n	800476c <UART_Transmit_IT+0x48>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d110      	bne.n	800476c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800475e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	1c9a      	adds	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]
 800476a:	e008      	b.n	800477e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	1c59      	adds	r1, r3, #1
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6211      	str	r1, [r2, #32]
 8004776:	781a      	ldrb	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29b      	uxth	r3, r3
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4619      	mov	r1, r3
 800478c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10f      	bne.n	80047b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	e000      	b.n	80047b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047b6:	2302      	movs	r3, #2
  }
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff febe 	bl	8004564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b086      	sub	sp, #24
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b22      	cmp	r3, #34	; 0x22
 8004804:	f040 8099 	bne.w	800493a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004810:	d117      	bne.n	8004842 <UART_Receive_IT+0x50>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d113      	bne.n	8004842 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004830:	b29a      	uxth	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	1c9a      	adds	r2, r3, #2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	; 0x28
 8004840:	e026      	b.n	8004890 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004854:	d007      	beq.n	8004866 <UART_Receive_IT+0x74>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <UART_Receive_IT+0x82>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e008      	b.n	8004886 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004880:	b2da      	uxtb	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29b      	uxth	r3, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4619      	mov	r1, r3
 800489e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d148      	bne.n	8004936 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0220 	bic.w	r2, r2, #32
 80048b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d123      	bne.n	800492c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0210 	bic.w	r2, r2, #16
 80048f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b10      	cmp	r3, #16
 8004906:	d10a      	bne.n	800491e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7ff fe2f 	bl	8004588 <HAL_UARTEx_RxEventCallback>
 800492a:	e002      	b.n	8004932 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7fd f9b9 	bl	8001ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	e002      	b.n	800493c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e000      	b.n	800493c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800493a:	2302      	movs	r3, #2
  }
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800497e:	f023 030c 	bic.w	r3, r3, #12
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	430b      	orrs	r3, r1
 800498a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2c      	ldr	r2, [pc, #176]	; (8004a58 <UART_SetConfig+0x114>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d103      	bne.n	80049b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049ac:	f7fe fd76 	bl	800349c <HAL_RCC_GetPCLK2Freq>
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	e002      	b.n	80049ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049b4:	f7fe fd5e 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 80049b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	4a22      	ldr	r2, [pc, #136]	; (8004a5c <UART_SetConfig+0x118>)
 80049d2:	fba2 2303 	umull	r2, r3, r2, r3
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	0119      	lsls	r1, r3, #4
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009a      	lsls	r2, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f0:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <UART_SetConfig+0x118>)
 80049f2:	fba3 0302 	umull	r0, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2064      	movs	r0, #100	; 0x64
 80049fa:	fb00 f303 	mul.w	r3, r0, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a15      	ldr	r2, [pc, #84]	; (8004a5c <UART_SetConfig+0x118>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a10:	4419      	add	r1, r3
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009a      	lsls	r2, r3, #2
 8004a1c:	441a      	add	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a28:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <UART_SetConfig+0x118>)
 8004a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2064      	movs	r0, #100	; 0x64
 8004a32:	fb00 f303 	mul.w	r3, r0, r3
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	3332      	adds	r3, #50	; 0x32
 8004a3c:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <UART_SetConfig+0x118>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	f003 020f 	and.w	r2, r3, #15
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	51eb851f 	.word	0x51eb851f

08004a60 <__errno>:
 8004a60:	4b01      	ldr	r3, [pc, #4]	; (8004a68 <__errno+0x8>)
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	2000000c 	.word	0x2000000c

08004a6c <__libc_init_array>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	2600      	movs	r6, #0
 8004a70:	4d0c      	ldr	r5, [pc, #48]	; (8004aa4 <__libc_init_array+0x38>)
 8004a72:	4c0d      	ldr	r4, [pc, #52]	; (8004aa8 <__libc_init_array+0x3c>)
 8004a74:	1b64      	subs	r4, r4, r5
 8004a76:	10a4      	asrs	r4, r4, #2
 8004a78:	42a6      	cmp	r6, r4
 8004a7a:	d109      	bne.n	8004a90 <__libc_init_array+0x24>
 8004a7c:	f004 fc52 	bl	8009324 <_init>
 8004a80:	2600      	movs	r6, #0
 8004a82:	4d0a      	ldr	r5, [pc, #40]	; (8004aac <__libc_init_array+0x40>)
 8004a84:	4c0a      	ldr	r4, [pc, #40]	; (8004ab0 <__libc_init_array+0x44>)
 8004a86:	1b64      	subs	r4, r4, r5
 8004a88:	10a4      	asrs	r4, r4, #2
 8004a8a:	42a6      	cmp	r6, r4
 8004a8c:	d105      	bne.n	8004a9a <__libc_init_array+0x2e>
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a94:	4798      	blx	r3
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7ee      	b.n	8004a78 <__libc_init_array+0xc>
 8004a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9e:	4798      	blx	r3
 8004aa0:	3601      	adds	r6, #1
 8004aa2:	e7f2      	b.n	8004a8a <__libc_init_array+0x1e>
 8004aa4:	08009a3c 	.word	0x08009a3c
 8004aa8:	08009a3c 	.word	0x08009a3c
 8004aac:	08009a3c 	.word	0x08009a3c
 8004ab0:	08009a40 	.word	0x08009a40

08004ab4 <memset>:
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4402      	add	r2, r0
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d100      	bne.n	8004abe <memset+0xa>
 8004abc:	4770      	bx	lr
 8004abe:	f803 1b01 	strb.w	r1, [r3], #1
 8004ac2:	e7f9      	b.n	8004ab8 <memset+0x4>

08004ac4 <__cvt>:
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aca:	461f      	mov	r7, r3
 8004acc:	bfbb      	ittet	lt
 8004ace:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004ad2:	461f      	movlt	r7, r3
 8004ad4:	2300      	movge	r3, #0
 8004ad6:	232d      	movlt	r3, #45	; 0x2d
 8004ad8:	b088      	sub	sp, #32
 8004ada:	4614      	mov	r4, r2
 8004adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ade:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004ae0:	7013      	strb	r3, [r2, #0]
 8004ae2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ae4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004ae8:	f023 0820 	bic.w	r8, r3, #32
 8004aec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004af0:	d005      	beq.n	8004afe <__cvt+0x3a>
 8004af2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004af6:	d100      	bne.n	8004afa <__cvt+0x36>
 8004af8:	3501      	adds	r5, #1
 8004afa:	2302      	movs	r3, #2
 8004afc:	e000      	b.n	8004b00 <__cvt+0x3c>
 8004afe:	2303      	movs	r3, #3
 8004b00:	aa07      	add	r2, sp, #28
 8004b02:	9204      	str	r2, [sp, #16]
 8004b04:	aa06      	add	r2, sp, #24
 8004b06:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004b0a:	e9cd 3500 	strd	r3, r5, [sp]
 8004b0e:	4622      	mov	r2, r4
 8004b10:	463b      	mov	r3, r7
 8004b12:	f001 fd85 	bl	8006620 <_dtoa_r>
 8004b16:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	d102      	bne.n	8004b24 <__cvt+0x60>
 8004b1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b20:	07db      	lsls	r3, r3, #31
 8004b22:	d522      	bpl.n	8004b6a <__cvt+0xa6>
 8004b24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b28:	eb06 0905 	add.w	r9, r6, r5
 8004b2c:	d110      	bne.n	8004b50 <__cvt+0x8c>
 8004b2e:	7833      	ldrb	r3, [r6, #0]
 8004b30:	2b30      	cmp	r3, #48	; 0x30
 8004b32:	d10a      	bne.n	8004b4a <__cvt+0x86>
 8004b34:	2200      	movs	r2, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4639      	mov	r1, r7
 8004b3c:	f7fb ff34 	bl	80009a8 <__aeabi_dcmpeq>
 8004b40:	b918      	cbnz	r0, 8004b4a <__cvt+0x86>
 8004b42:	f1c5 0501 	rsb	r5, r5, #1
 8004b46:	f8ca 5000 	str.w	r5, [sl]
 8004b4a:	f8da 3000 	ldr.w	r3, [sl]
 8004b4e:	4499      	add	r9, r3
 8004b50:	2200      	movs	r2, #0
 8004b52:	2300      	movs	r3, #0
 8004b54:	4620      	mov	r0, r4
 8004b56:	4639      	mov	r1, r7
 8004b58:	f7fb ff26 	bl	80009a8 <__aeabi_dcmpeq>
 8004b5c:	b108      	cbz	r0, 8004b62 <__cvt+0x9e>
 8004b5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b62:	2230      	movs	r2, #48	; 0x30
 8004b64:	9b07      	ldr	r3, [sp, #28]
 8004b66:	454b      	cmp	r3, r9
 8004b68:	d307      	bcc.n	8004b7a <__cvt+0xb6>
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	9b07      	ldr	r3, [sp, #28]
 8004b6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b70:	1b9b      	subs	r3, r3, r6
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	b008      	add	sp, #32
 8004b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7a:	1c59      	adds	r1, r3, #1
 8004b7c:	9107      	str	r1, [sp, #28]
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	e7f0      	b.n	8004b64 <__cvt+0xa0>

08004b82 <__exponent>:
 8004b82:	4603      	mov	r3, r0
 8004b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b86:	2900      	cmp	r1, #0
 8004b88:	f803 2b02 	strb.w	r2, [r3], #2
 8004b8c:	bfb6      	itet	lt
 8004b8e:	222d      	movlt	r2, #45	; 0x2d
 8004b90:	222b      	movge	r2, #43	; 0x2b
 8004b92:	4249      	neglt	r1, r1
 8004b94:	2909      	cmp	r1, #9
 8004b96:	7042      	strb	r2, [r0, #1]
 8004b98:	dd2b      	ble.n	8004bf2 <__exponent+0x70>
 8004b9a:	f10d 0407 	add.w	r4, sp, #7
 8004b9e:	46a4      	mov	ip, r4
 8004ba0:	270a      	movs	r7, #10
 8004ba2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ba6:	460a      	mov	r2, r1
 8004ba8:	46a6      	mov	lr, r4
 8004baa:	fb07 1516 	mls	r5, r7, r6, r1
 8004bae:	2a63      	cmp	r2, #99	; 0x63
 8004bb0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	f104 34ff 	add.w	r4, r4, #4294967295
 8004bba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004bbe:	dcf0      	bgt.n	8004ba2 <__exponent+0x20>
 8004bc0:	3130      	adds	r1, #48	; 0x30
 8004bc2:	f1ae 0502 	sub.w	r5, lr, #2
 8004bc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004bca:	4629      	mov	r1, r5
 8004bcc:	1c44      	adds	r4, r0, #1
 8004bce:	4561      	cmp	r1, ip
 8004bd0:	d30a      	bcc.n	8004be8 <__exponent+0x66>
 8004bd2:	f10d 0209 	add.w	r2, sp, #9
 8004bd6:	eba2 020e 	sub.w	r2, r2, lr
 8004bda:	4565      	cmp	r5, ip
 8004bdc:	bf88      	it	hi
 8004bde:	2200      	movhi	r2, #0
 8004be0:	4413      	add	r3, r2
 8004be2:	1a18      	subs	r0, r3, r0
 8004be4:	b003      	add	sp, #12
 8004be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bec:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004bf0:	e7ed      	b.n	8004bce <__exponent+0x4c>
 8004bf2:	2330      	movs	r3, #48	; 0x30
 8004bf4:	3130      	adds	r1, #48	; 0x30
 8004bf6:	7083      	strb	r3, [r0, #2]
 8004bf8:	70c1      	strb	r1, [r0, #3]
 8004bfa:	1d03      	adds	r3, r0, #4
 8004bfc:	e7f1      	b.n	8004be2 <__exponent+0x60>
	...

08004c00 <_printf_float>:
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	b091      	sub	sp, #68	; 0x44
 8004c06:	460c      	mov	r4, r1
 8004c08:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	461f      	mov	r7, r3
 8004c10:	4605      	mov	r5, r0
 8004c12:	f002 fe59 	bl	80078c8 <_localeconv_r>
 8004c16:	6803      	ldr	r3, [r0, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1c:	f7fb fa98 	bl	8000150 <strlen>
 8004c20:	2300      	movs	r3, #0
 8004c22:	930e      	str	r3, [sp, #56]	; 0x38
 8004c24:	f8d8 3000 	ldr.w	r3, [r8]
 8004c28:	900a      	str	r0, [sp, #40]	; 0x28
 8004c2a:	3307      	adds	r3, #7
 8004c2c:	f023 0307 	bic.w	r3, r3, #7
 8004c30:	f103 0208 	add.w	r2, r3, #8
 8004c34:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004c38:	f8d4 b000 	ldr.w	fp, [r4]
 8004c3c:	f8c8 2000 	str.w	r2, [r8]
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c48:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004c4c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004c50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c52:	f04f 32ff 	mov.w	r2, #4294967295
 8004c56:	4640      	mov	r0, r8
 8004c58:	4b9c      	ldr	r3, [pc, #624]	; (8004ecc <_printf_float+0x2cc>)
 8004c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c5c:	f7fb fed6 	bl	8000a0c <__aeabi_dcmpun>
 8004c60:	bb70      	cbnz	r0, 8004cc0 <_printf_float+0xc0>
 8004c62:	f04f 32ff 	mov.w	r2, #4294967295
 8004c66:	4640      	mov	r0, r8
 8004c68:	4b98      	ldr	r3, [pc, #608]	; (8004ecc <_printf_float+0x2cc>)
 8004c6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c6c:	f7fb feb0 	bl	80009d0 <__aeabi_dcmple>
 8004c70:	bb30      	cbnz	r0, 8004cc0 <_printf_float+0xc0>
 8004c72:	2200      	movs	r2, #0
 8004c74:	2300      	movs	r3, #0
 8004c76:	4640      	mov	r0, r8
 8004c78:	4651      	mov	r1, sl
 8004c7a:	f7fb fe9f 	bl	80009bc <__aeabi_dcmplt>
 8004c7e:	b110      	cbz	r0, 8004c86 <_printf_float+0x86>
 8004c80:	232d      	movs	r3, #45	; 0x2d
 8004c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c86:	4b92      	ldr	r3, [pc, #584]	; (8004ed0 <_printf_float+0x2d0>)
 8004c88:	4892      	ldr	r0, [pc, #584]	; (8004ed4 <_printf_float+0x2d4>)
 8004c8a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c8e:	bf94      	ite	ls
 8004c90:	4698      	movls	r8, r3
 8004c92:	4680      	movhi	r8, r0
 8004c94:	2303      	movs	r3, #3
 8004c96:	f04f 0a00 	mov.w	sl, #0
 8004c9a:	6123      	str	r3, [r4, #16]
 8004c9c:	f02b 0304 	bic.w	r3, fp, #4
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	4633      	mov	r3, r6
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	9700      	str	r7, [sp, #0]
 8004caa:	aa0f      	add	r2, sp, #60	; 0x3c
 8004cac:	f000 f9d4 	bl	8005058 <_printf_common>
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	f040 8090 	bne.w	8004dd6 <_printf_float+0x1d6>
 8004cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cba:	b011      	add	sp, #68	; 0x44
 8004cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	4653      	mov	r3, sl
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	f7fb fea0 	bl	8000a0c <__aeabi_dcmpun>
 8004ccc:	b148      	cbz	r0, 8004ce2 <_printf_float+0xe2>
 8004cce:	f1ba 0f00 	cmp.w	sl, #0
 8004cd2:	bfb8      	it	lt
 8004cd4:	232d      	movlt	r3, #45	; 0x2d
 8004cd6:	4880      	ldr	r0, [pc, #512]	; (8004ed8 <_printf_float+0x2d8>)
 8004cd8:	bfb8      	it	lt
 8004cda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004cde:	4b7f      	ldr	r3, [pc, #508]	; (8004edc <_printf_float+0x2dc>)
 8004ce0:	e7d3      	b.n	8004c8a <_printf_float+0x8a>
 8004ce2:	6863      	ldr	r3, [r4, #4]
 8004ce4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	d142      	bne.n	8004d72 <_printf_float+0x172>
 8004cec:	2306      	movs	r3, #6
 8004cee:	6063      	str	r3, [r4, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	9206      	str	r2, [sp, #24]
 8004cf4:	aa0e      	add	r2, sp, #56	; 0x38
 8004cf6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004cfa:	aa0d      	add	r2, sp, #52	; 0x34
 8004cfc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004d00:	9203      	str	r2, [sp, #12]
 8004d02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004d06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004d0a:	6023      	str	r3, [r4, #0]
 8004d0c:	6863      	ldr	r3, [r4, #4]
 8004d0e:	4642      	mov	r2, r8
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	4628      	mov	r0, r5
 8004d14:	4653      	mov	r3, sl
 8004d16:	910b      	str	r1, [sp, #44]	; 0x2c
 8004d18:	f7ff fed4 	bl	8004ac4 <__cvt>
 8004d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d1e:	4680      	mov	r8, r0
 8004d20:	2947      	cmp	r1, #71	; 0x47
 8004d22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004d24:	d108      	bne.n	8004d38 <_printf_float+0x138>
 8004d26:	1cc8      	adds	r0, r1, #3
 8004d28:	db02      	blt.n	8004d30 <_printf_float+0x130>
 8004d2a:	6863      	ldr	r3, [r4, #4]
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	dd40      	ble.n	8004db2 <_printf_float+0x1b2>
 8004d30:	f1a9 0902 	sub.w	r9, r9, #2
 8004d34:	fa5f f989 	uxtb.w	r9, r9
 8004d38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d3c:	d81f      	bhi.n	8004d7e <_printf_float+0x17e>
 8004d3e:	464a      	mov	r2, r9
 8004d40:	3901      	subs	r1, #1
 8004d42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d46:	910d      	str	r1, [sp, #52]	; 0x34
 8004d48:	f7ff ff1b 	bl	8004b82 <__exponent>
 8004d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d4e:	4682      	mov	sl, r0
 8004d50:	1813      	adds	r3, r2, r0
 8004d52:	2a01      	cmp	r2, #1
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	dc02      	bgt.n	8004d5e <_printf_float+0x15e>
 8004d58:	6822      	ldr	r2, [r4, #0]
 8004d5a:	07d2      	lsls	r2, r2, #31
 8004d5c:	d501      	bpl.n	8004d62 <_printf_float+0x162>
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6123      	str	r3, [r4, #16]
 8004d62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d09b      	beq.n	8004ca2 <_printf_float+0xa2>
 8004d6a:	232d      	movs	r3, #45	; 0x2d
 8004d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d70:	e797      	b.n	8004ca2 <_printf_float+0xa2>
 8004d72:	2947      	cmp	r1, #71	; 0x47
 8004d74:	d1bc      	bne.n	8004cf0 <_printf_float+0xf0>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ba      	bne.n	8004cf0 <_printf_float+0xf0>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e7b7      	b.n	8004cee <_printf_float+0xee>
 8004d7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d82:	d118      	bne.n	8004db6 <_printf_float+0x1b6>
 8004d84:	2900      	cmp	r1, #0
 8004d86:	6863      	ldr	r3, [r4, #4]
 8004d88:	dd0b      	ble.n	8004da2 <_printf_float+0x1a2>
 8004d8a:	6121      	str	r1, [r4, #16]
 8004d8c:	b913      	cbnz	r3, 8004d94 <_printf_float+0x194>
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	07d0      	lsls	r0, r2, #31
 8004d92:	d502      	bpl.n	8004d9a <_printf_float+0x19a>
 8004d94:	3301      	adds	r3, #1
 8004d96:	440b      	add	r3, r1
 8004d98:	6123      	str	r3, [r4, #16]
 8004d9a:	f04f 0a00 	mov.w	sl, #0
 8004d9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004da0:	e7df      	b.n	8004d62 <_printf_float+0x162>
 8004da2:	b913      	cbnz	r3, 8004daa <_printf_float+0x1aa>
 8004da4:	6822      	ldr	r2, [r4, #0]
 8004da6:	07d2      	lsls	r2, r2, #31
 8004da8:	d501      	bpl.n	8004dae <_printf_float+0x1ae>
 8004daa:	3302      	adds	r3, #2
 8004dac:	e7f4      	b.n	8004d98 <_printf_float+0x198>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e7f2      	b.n	8004d98 <_printf_float+0x198>
 8004db2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db8:	4299      	cmp	r1, r3
 8004dba:	db05      	blt.n	8004dc8 <_printf_float+0x1c8>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	6121      	str	r1, [r4, #16]
 8004dc0:	07d8      	lsls	r0, r3, #31
 8004dc2:	d5ea      	bpl.n	8004d9a <_printf_float+0x19a>
 8004dc4:	1c4b      	adds	r3, r1, #1
 8004dc6:	e7e7      	b.n	8004d98 <_printf_float+0x198>
 8004dc8:	2900      	cmp	r1, #0
 8004dca:	bfcc      	ite	gt
 8004dcc:	2201      	movgt	r2, #1
 8004dce:	f1c1 0202 	rsble	r2, r1, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	e7e0      	b.n	8004d98 <_printf_float+0x198>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	055a      	lsls	r2, r3, #21
 8004dda:	d407      	bmi.n	8004dec <_printf_float+0x1ec>
 8004ddc:	6923      	ldr	r3, [r4, #16]
 8004dde:	4642      	mov	r2, r8
 8004de0:	4631      	mov	r1, r6
 8004de2:	4628      	mov	r0, r5
 8004de4:	47b8      	blx	r7
 8004de6:	3001      	adds	r0, #1
 8004de8:	d12b      	bne.n	8004e42 <_printf_float+0x242>
 8004dea:	e764      	b.n	8004cb6 <_printf_float+0xb6>
 8004dec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004df0:	f240 80dd 	bls.w	8004fae <_printf_float+0x3ae>
 8004df4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f7fb fdd4 	bl	80009a8 <__aeabi_dcmpeq>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d033      	beq.n	8004e6c <_printf_float+0x26c>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4631      	mov	r1, r6
 8004e08:	4628      	mov	r0, r5
 8004e0a:	4a35      	ldr	r2, [pc, #212]	; (8004ee0 <_printf_float+0x2e0>)
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f af51 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	db02      	blt.n	8004e22 <_printf_float+0x222>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	07d8      	lsls	r0, r3, #31
 8004e20:	d50f      	bpl.n	8004e42 <_printf_float+0x242>
 8004e22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b8      	blx	r7
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	f43f af42 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e32:	f04f 0800 	mov.w	r8, #0
 8004e36:	f104 091a 	add.w	r9, r4, #26
 8004e3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	4543      	cmp	r3, r8
 8004e40:	dc09      	bgt.n	8004e56 <_printf_float+0x256>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	079b      	lsls	r3, r3, #30
 8004e46:	f100 8102 	bmi.w	800504e <_printf_float+0x44e>
 8004e4a:	68e0      	ldr	r0, [r4, #12]
 8004e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e4e:	4298      	cmp	r0, r3
 8004e50:	bfb8      	it	lt
 8004e52:	4618      	movlt	r0, r3
 8004e54:	e731      	b.n	8004cba <_printf_float+0xba>
 8004e56:	2301      	movs	r3, #1
 8004e58:	464a      	mov	r2, r9
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f af28 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	e7e6      	b.n	8004e3a <_printf_float+0x23a>
 8004e6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dc38      	bgt.n	8004ee4 <_printf_float+0x2e4>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4631      	mov	r1, r6
 8004e76:	4628      	mov	r0, r5
 8004e78:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <_printf_float+0x2e0>)
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f af1a 	beq.w	8004cb6 <_printf_float+0xb6>
 8004e82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d102      	bne.n	8004e90 <_printf_float+0x290>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	07d9      	lsls	r1, r3, #31
 8004e8e:	d5d8      	bpl.n	8004e42 <_printf_float+0x242>
 8004e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e94:	4631      	mov	r1, r6
 8004e96:	4628      	mov	r0, r5
 8004e98:	47b8      	blx	r7
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	f43f af0b 	beq.w	8004cb6 <_printf_float+0xb6>
 8004ea0:	f04f 0900 	mov.w	r9, #0
 8004ea4:	f104 0a1a 	add.w	sl, r4, #26
 8004ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eaa:	425b      	negs	r3, r3
 8004eac:	454b      	cmp	r3, r9
 8004eae:	dc01      	bgt.n	8004eb4 <_printf_float+0x2b4>
 8004eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eb2:	e794      	b.n	8004dde <_printf_float+0x1de>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	4652      	mov	r2, sl
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b8      	blx	r7
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	f43f aef9 	beq.w	8004cb6 <_printf_float+0xb6>
 8004ec4:	f109 0901 	add.w	r9, r9, #1
 8004ec8:	e7ee      	b.n	8004ea8 <_printf_float+0x2a8>
 8004eca:	bf00      	nop
 8004ecc:	7fefffff 	.word	0x7fefffff
 8004ed0:	08009598 	.word	0x08009598
 8004ed4:	0800959c 	.word	0x0800959c
 8004ed8:	080095a4 	.word	0x080095a4
 8004edc:	080095a0 	.word	0x080095a0
 8004ee0:	080095a8 	.word	0x080095a8
 8004ee4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ee6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	bfa8      	it	ge
 8004eec:	461a      	movge	r2, r3
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	4691      	mov	r9, r2
 8004ef2:	dc37      	bgt.n	8004f64 <_printf_float+0x364>
 8004ef4:	f04f 0b00 	mov.w	fp, #0
 8004ef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004efc:	f104 021a 	add.w	r2, r4, #26
 8004f00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f04:	ebaa 0309 	sub.w	r3, sl, r9
 8004f08:	455b      	cmp	r3, fp
 8004f0a:	dc33      	bgt.n	8004f74 <_printf_float+0x374>
 8004f0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f10:	429a      	cmp	r2, r3
 8004f12:	db3b      	blt.n	8004f8c <_printf_float+0x38c>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	07da      	lsls	r2, r3, #31
 8004f18:	d438      	bmi.n	8004f8c <_printf_float+0x38c>
 8004f1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f1e:	eba3 020a 	sub.w	r2, r3, sl
 8004f22:	eba3 0901 	sub.w	r9, r3, r1
 8004f26:	4591      	cmp	r9, r2
 8004f28:	bfa8      	it	ge
 8004f2a:	4691      	movge	r9, r2
 8004f2c:	f1b9 0f00 	cmp.w	r9, #0
 8004f30:	dc34      	bgt.n	8004f9c <_printf_float+0x39c>
 8004f32:	f04f 0800 	mov.w	r8, #0
 8004f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f3a:	f104 0a1a 	add.w	sl, r4, #26
 8004f3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	eba3 0309 	sub.w	r3, r3, r9
 8004f48:	4543      	cmp	r3, r8
 8004f4a:	f77f af7a 	ble.w	8004e42 <_printf_float+0x242>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4652      	mov	r2, sl
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f43f aeac 	beq.w	8004cb6 <_printf_float+0xb6>
 8004f5e:	f108 0801 	add.w	r8, r8, #1
 8004f62:	e7ec      	b.n	8004f3e <_printf_float+0x33e>
 8004f64:	4613      	mov	r3, r2
 8004f66:	4631      	mov	r1, r6
 8004f68:	4642      	mov	r2, r8
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d1c0      	bne.n	8004ef4 <_printf_float+0x2f4>
 8004f72:	e6a0      	b.n	8004cb6 <_printf_float+0xb6>
 8004f74:	2301      	movs	r3, #1
 8004f76:	4631      	mov	r1, r6
 8004f78:	4628      	mov	r0, r5
 8004f7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f7c:	47b8      	blx	r7
 8004f7e:	3001      	adds	r0, #1
 8004f80:	f43f ae99 	beq.w	8004cb6 <_printf_float+0xb6>
 8004f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f86:	f10b 0b01 	add.w	fp, fp, #1
 8004f8a:	e7b9      	b.n	8004f00 <_printf_float+0x300>
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b8      	blx	r7
 8004f96:	3001      	adds	r0, #1
 8004f98:	d1bf      	bne.n	8004f1a <_printf_float+0x31a>
 8004f9a:	e68c      	b.n	8004cb6 <_printf_float+0xb6>
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	eb08 020a 	add.w	r2, r8, sl
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d1c2      	bne.n	8004f32 <_printf_float+0x332>
 8004fac:	e683      	b.n	8004cb6 <_printf_float+0xb6>
 8004fae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fb0:	2a01      	cmp	r2, #1
 8004fb2:	dc01      	bgt.n	8004fb8 <_printf_float+0x3b8>
 8004fb4:	07db      	lsls	r3, r3, #31
 8004fb6:	d537      	bpl.n	8005028 <_printf_float+0x428>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	4642      	mov	r2, r8
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	47b8      	blx	r7
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	f43f ae77 	beq.w	8004cb6 <_printf_float+0xb6>
 8004fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b8      	blx	r7
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	f43f ae6f 	beq.w	8004cb6 <_printf_float+0xb6>
 8004fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f7fb fce2 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe4:	b9d8      	cbnz	r0, 800501e <_printf_float+0x41e>
 8004fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fe8:	f108 0201 	add.w	r2, r8, #1
 8004fec:	3b01      	subs	r3, #1
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d10e      	bne.n	8005016 <_printf_float+0x416>
 8004ff8:	e65d      	b.n	8004cb6 <_printf_float+0xb6>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	464a      	mov	r2, r9
 8004ffe:	4631      	mov	r1, r6
 8005000:	4628      	mov	r0, r5
 8005002:	47b8      	blx	r7
 8005004:	3001      	adds	r0, #1
 8005006:	f43f ae56 	beq.w	8004cb6 <_printf_float+0xb6>
 800500a:	f108 0801 	add.w	r8, r8, #1
 800500e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005010:	3b01      	subs	r3, #1
 8005012:	4543      	cmp	r3, r8
 8005014:	dcf1      	bgt.n	8004ffa <_printf_float+0x3fa>
 8005016:	4653      	mov	r3, sl
 8005018:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800501c:	e6e0      	b.n	8004de0 <_printf_float+0x1e0>
 800501e:	f04f 0800 	mov.w	r8, #0
 8005022:	f104 091a 	add.w	r9, r4, #26
 8005026:	e7f2      	b.n	800500e <_printf_float+0x40e>
 8005028:	2301      	movs	r3, #1
 800502a:	4642      	mov	r2, r8
 800502c:	e7df      	b.n	8004fee <_printf_float+0x3ee>
 800502e:	2301      	movs	r3, #1
 8005030:	464a      	mov	r2, r9
 8005032:	4631      	mov	r1, r6
 8005034:	4628      	mov	r0, r5
 8005036:	47b8      	blx	r7
 8005038:	3001      	adds	r0, #1
 800503a:	f43f ae3c 	beq.w	8004cb6 <_printf_float+0xb6>
 800503e:	f108 0801 	add.w	r8, r8, #1
 8005042:	68e3      	ldr	r3, [r4, #12]
 8005044:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005046:	1a5b      	subs	r3, r3, r1
 8005048:	4543      	cmp	r3, r8
 800504a:	dcf0      	bgt.n	800502e <_printf_float+0x42e>
 800504c:	e6fd      	b.n	8004e4a <_printf_float+0x24a>
 800504e:	f04f 0800 	mov.w	r8, #0
 8005052:	f104 0919 	add.w	r9, r4, #25
 8005056:	e7f4      	b.n	8005042 <_printf_float+0x442>

08005058 <_printf_common>:
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	4616      	mov	r6, r2
 800505e:	4699      	mov	r9, r3
 8005060:	688a      	ldr	r2, [r1, #8]
 8005062:	690b      	ldr	r3, [r1, #16]
 8005064:	4607      	mov	r7, r0
 8005066:	4293      	cmp	r3, r2
 8005068:	bfb8      	it	lt
 800506a:	4613      	movlt	r3, r2
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005072:	460c      	mov	r4, r1
 8005074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005078:	b10a      	cbz	r2, 800507e <_printf_common+0x26>
 800507a:	3301      	adds	r3, #1
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	0699      	lsls	r1, r3, #26
 8005082:	bf42      	ittt	mi
 8005084:	6833      	ldrmi	r3, [r6, #0]
 8005086:	3302      	addmi	r3, #2
 8005088:	6033      	strmi	r3, [r6, #0]
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	f015 0506 	ands.w	r5, r5, #6
 8005090:	d106      	bne.n	80050a0 <_printf_common+0x48>
 8005092:	f104 0a19 	add.w	sl, r4, #25
 8005096:	68e3      	ldr	r3, [r4, #12]
 8005098:	6832      	ldr	r2, [r6, #0]
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	42ab      	cmp	r3, r5
 800509e:	dc28      	bgt.n	80050f2 <_printf_common+0x9a>
 80050a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050a4:	1e13      	subs	r3, r2, #0
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	bf18      	it	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	0692      	lsls	r2, r2, #26
 80050ae:	d42d      	bmi.n	800510c <_printf_common+0xb4>
 80050b0:	4649      	mov	r1, r9
 80050b2:	4638      	mov	r0, r7
 80050b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b8:	47c0      	blx	r8
 80050ba:	3001      	adds	r0, #1
 80050bc:	d020      	beq.n	8005100 <_printf_common+0xa8>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	68e5      	ldr	r5, [r4, #12]
 80050c2:	f003 0306 	and.w	r3, r3, #6
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	bf18      	it	ne
 80050ca:	2500      	movne	r5, #0
 80050cc:	6832      	ldr	r2, [r6, #0]
 80050ce:	f04f 0600 	mov.w	r6, #0
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	bf08      	it	eq
 80050d6:	1aad      	subeq	r5, r5, r2
 80050d8:	6922      	ldr	r2, [r4, #16]
 80050da:	bf08      	it	eq
 80050dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e0:	4293      	cmp	r3, r2
 80050e2:	bfc4      	itt	gt
 80050e4:	1a9b      	subgt	r3, r3, r2
 80050e6:	18ed      	addgt	r5, r5, r3
 80050e8:	341a      	adds	r4, #26
 80050ea:	42b5      	cmp	r5, r6
 80050ec:	d11a      	bne.n	8005124 <_printf_common+0xcc>
 80050ee:	2000      	movs	r0, #0
 80050f0:	e008      	b.n	8005104 <_printf_common+0xac>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4652      	mov	r2, sl
 80050f6:	4649      	mov	r1, r9
 80050f8:	4638      	mov	r0, r7
 80050fa:	47c0      	blx	r8
 80050fc:	3001      	adds	r0, #1
 80050fe:	d103      	bne.n	8005108 <_printf_common+0xb0>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005108:	3501      	adds	r5, #1
 800510a:	e7c4      	b.n	8005096 <_printf_common+0x3e>
 800510c:	2030      	movs	r0, #48	; 0x30
 800510e:	18e1      	adds	r1, r4, r3
 8005110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800511a:	4422      	add	r2, r4
 800511c:	3302      	adds	r3, #2
 800511e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005122:	e7c5      	b.n	80050b0 <_printf_common+0x58>
 8005124:	2301      	movs	r3, #1
 8005126:	4622      	mov	r2, r4
 8005128:	4649      	mov	r1, r9
 800512a:	4638      	mov	r0, r7
 800512c:	47c0      	blx	r8
 800512e:	3001      	adds	r0, #1
 8005130:	d0e6      	beq.n	8005100 <_printf_common+0xa8>
 8005132:	3601      	adds	r6, #1
 8005134:	e7d9      	b.n	80050ea <_printf_common+0x92>
	...

08005138 <_printf_i>:
 8005138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	7e0f      	ldrb	r7, [r1, #24]
 800513e:	4691      	mov	r9, r2
 8005140:	2f78      	cmp	r7, #120	; 0x78
 8005142:	4680      	mov	r8, r0
 8005144:	460c      	mov	r4, r1
 8005146:	469a      	mov	sl, r3
 8005148:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800514a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800514e:	d807      	bhi.n	8005160 <_printf_i+0x28>
 8005150:	2f62      	cmp	r7, #98	; 0x62
 8005152:	d80a      	bhi.n	800516a <_printf_i+0x32>
 8005154:	2f00      	cmp	r7, #0
 8005156:	f000 80d9 	beq.w	800530c <_printf_i+0x1d4>
 800515a:	2f58      	cmp	r7, #88	; 0x58
 800515c:	f000 80a4 	beq.w	80052a8 <_printf_i+0x170>
 8005160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005168:	e03a      	b.n	80051e0 <_printf_i+0xa8>
 800516a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800516e:	2b15      	cmp	r3, #21
 8005170:	d8f6      	bhi.n	8005160 <_printf_i+0x28>
 8005172:	a101      	add	r1, pc, #4	; (adr r1, 8005178 <_printf_i+0x40>)
 8005174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005178:	080051d1 	.word	0x080051d1
 800517c:	080051e5 	.word	0x080051e5
 8005180:	08005161 	.word	0x08005161
 8005184:	08005161 	.word	0x08005161
 8005188:	08005161 	.word	0x08005161
 800518c:	08005161 	.word	0x08005161
 8005190:	080051e5 	.word	0x080051e5
 8005194:	08005161 	.word	0x08005161
 8005198:	08005161 	.word	0x08005161
 800519c:	08005161 	.word	0x08005161
 80051a0:	08005161 	.word	0x08005161
 80051a4:	080052f3 	.word	0x080052f3
 80051a8:	08005215 	.word	0x08005215
 80051ac:	080052d5 	.word	0x080052d5
 80051b0:	08005161 	.word	0x08005161
 80051b4:	08005161 	.word	0x08005161
 80051b8:	08005315 	.word	0x08005315
 80051bc:	08005161 	.word	0x08005161
 80051c0:	08005215 	.word	0x08005215
 80051c4:	08005161 	.word	0x08005161
 80051c8:	08005161 	.word	0x08005161
 80051cc:	080052dd 	.word	0x080052dd
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	602a      	str	r2, [r5, #0]
 80051d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0a4      	b.n	800532e <_printf_i+0x1f6>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	6829      	ldr	r1, [r5, #0]
 80051e8:	0606      	lsls	r6, r0, #24
 80051ea:	f101 0304 	add.w	r3, r1, #4
 80051ee:	d50a      	bpl.n	8005206 <_printf_i+0xce>
 80051f0:	680e      	ldr	r6, [r1, #0]
 80051f2:	602b      	str	r3, [r5, #0]
 80051f4:	2e00      	cmp	r6, #0
 80051f6:	da03      	bge.n	8005200 <_printf_i+0xc8>
 80051f8:	232d      	movs	r3, #45	; 0x2d
 80051fa:	4276      	negs	r6, r6
 80051fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005200:	230a      	movs	r3, #10
 8005202:	485e      	ldr	r0, [pc, #376]	; (800537c <_printf_i+0x244>)
 8005204:	e019      	b.n	800523a <_printf_i+0x102>
 8005206:	680e      	ldr	r6, [r1, #0]
 8005208:	f010 0f40 	tst.w	r0, #64	; 0x40
 800520c:	602b      	str	r3, [r5, #0]
 800520e:	bf18      	it	ne
 8005210:	b236      	sxthne	r6, r6
 8005212:	e7ef      	b.n	80051f4 <_printf_i+0xbc>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	6820      	ldr	r0, [r4, #0]
 8005218:	1d19      	adds	r1, r3, #4
 800521a:	6029      	str	r1, [r5, #0]
 800521c:	0601      	lsls	r1, r0, #24
 800521e:	d501      	bpl.n	8005224 <_printf_i+0xec>
 8005220:	681e      	ldr	r6, [r3, #0]
 8005222:	e002      	b.n	800522a <_printf_i+0xf2>
 8005224:	0646      	lsls	r6, r0, #25
 8005226:	d5fb      	bpl.n	8005220 <_printf_i+0xe8>
 8005228:	881e      	ldrh	r6, [r3, #0]
 800522a:	2f6f      	cmp	r7, #111	; 0x6f
 800522c:	bf0c      	ite	eq
 800522e:	2308      	moveq	r3, #8
 8005230:	230a      	movne	r3, #10
 8005232:	4852      	ldr	r0, [pc, #328]	; (800537c <_printf_i+0x244>)
 8005234:	2100      	movs	r1, #0
 8005236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800523a:	6865      	ldr	r5, [r4, #4]
 800523c:	2d00      	cmp	r5, #0
 800523e:	bfa8      	it	ge
 8005240:	6821      	ldrge	r1, [r4, #0]
 8005242:	60a5      	str	r5, [r4, #8]
 8005244:	bfa4      	itt	ge
 8005246:	f021 0104 	bicge.w	r1, r1, #4
 800524a:	6021      	strge	r1, [r4, #0]
 800524c:	b90e      	cbnz	r6, 8005252 <_printf_i+0x11a>
 800524e:	2d00      	cmp	r5, #0
 8005250:	d04d      	beq.n	80052ee <_printf_i+0x1b6>
 8005252:	4615      	mov	r5, r2
 8005254:	fbb6 f1f3 	udiv	r1, r6, r3
 8005258:	fb03 6711 	mls	r7, r3, r1, r6
 800525c:	5dc7      	ldrb	r7, [r0, r7]
 800525e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005262:	4637      	mov	r7, r6
 8005264:	42bb      	cmp	r3, r7
 8005266:	460e      	mov	r6, r1
 8005268:	d9f4      	bls.n	8005254 <_printf_i+0x11c>
 800526a:	2b08      	cmp	r3, #8
 800526c:	d10b      	bne.n	8005286 <_printf_i+0x14e>
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	07de      	lsls	r6, r3, #31
 8005272:	d508      	bpl.n	8005286 <_printf_i+0x14e>
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	6861      	ldr	r1, [r4, #4]
 8005278:	4299      	cmp	r1, r3
 800527a:	bfde      	ittt	le
 800527c:	2330      	movle	r3, #48	; 0x30
 800527e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005282:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005286:	1b52      	subs	r2, r2, r5
 8005288:	6122      	str	r2, [r4, #16]
 800528a:	464b      	mov	r3, r9
 800528c:	4621      	mov	r1, r4
 800528e:	4640      	mov	r0, r8
 8005290:	f8cd a000 	str.w	sl, [sp]
 8005294:	aa03      	add	r2, sp, #12
 8005296:	f7ff fedf 	bl	8005058 <_printf_common>
 800529a:	3001      	adds	r0, #1
 800529c:	d14c      	bne.n	8005338 <_printf_i+0x200>
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	b004      	add	sp, #16
 80052a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a8:	4834      	ldr	r0, [pc, #208]	; (800537c <_printf_i+0x244>)
 80052aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052ae:	6829      	ldr	r1, [r5, #0]
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80052b6:	6029      	str	r1, [r5, #0]
 80052b8:	061d      	lsls	r5, r3, #24
 80052ba:	d514      	bpl.n	80052e6 <_printf_i+0x1ae>
 80052bc:	07df      	lsls	r7, r3, #31
 80052be:	bf44      	itt	mi
 80052c0:	f043 0320 	orrmi.w	r3, r3, #32
 80052c4:	6023      	strmi	r3, [r4, #0]
 80052c6:	b91e      	cbnz	r6, 80052d0 <_printf_i+0x198>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	f023 0320 	bic.w	r3, r3, #32
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	2310      	movs	r3, #16
 80052d2:	e7af      	b.n	8005234 <_printf_i+0xfc>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	f043 0320 	orr.w	r3, r3, #32
 80052da:	6023      	str	r3, [r4, #0]
 80052dc:	2378      	movs	r3, #120	; 0x78
 80052de:	4828      	ldr	r0, [pc, #160]	; (8005380 <_printf_i+0x248>)
 80052e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052e4:	e7e3      	b.n	80052ae <_printf_i+0x176>
 80052e6:	0659      	lsls	r1, r3, #25
 80052e8:	bf48      	it	mi
 80052ea:	b2b6      	uxthmi	r6, r6
 80052ec:	e7e6      	b.n	80052bc <_printf_i+0x184>
 80052ee:	4615      	mov	r5, r2
 80052f0:	e7bb      	b.n	800526a <_printf_i+0x132>
 80052f2:	682b      	ldr	r3, [r5, #0]
 80052f4:	6826      	ldr	r6, [r4, #0]
 80052f6:	1d18      	adds	r0, r3, #4
 80052f8:	6961      	ldr	r1, [r4, #20]
 80052fa:	6028      	str	r0, [r5, #0]
 80052fc:	0635      	lsls	r5, r6, #24
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	d501      	bpl.n	8005306 <_printf_i+0x1ce>
 8005302:	6019      	str	r1, [r3, #0]
 8005304:	e002      	b.n	800530c <_printf_i+0x1d4>
 8005306:	0670      	lsls	r0, r6, #25
 8005308:	d5fb      	bpl.n	8005302 <_printf_i+0x1ca>
 800530a:	8019      	strh	r1, [r3, #0]
 800530c:	2300      	movs	r3, #0
 800530e:	4615      	mov	r5, r2
 8005310:	6123      	str	r3, [r4, #16]
 8005312:	e7ba      	b.n	800528a <_printf_i+0x152>
 8005314:	682b      	ldr	r3, [r5, #0]
 8005316:	2100      	movs	r1, #0
 8005318:	1d1a      	adds	r2, r3, #4
 800531a:	602a      	str	r2, [r5, #0]
 800531c:	681d      	ldr	r5, [r3, #0]
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	4628      	mov	r0, r5
 8005322:	f002 faef 	bl	8007904 <memchr>
 8005326:	b108      	cbz	r0, 800532c <_printf_i+0x1f4>
 8005328:	1b40      	subs	r0, r0, r5
 800532a:	6060      	str	r0, [r4, #4]
 800532c:	6863      	ldr	r3, [r4, #4]
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	2300      	movs	r3, #0
 8005332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005336:	e7a8      	b.n	800528a <_printf_i+0x152>
 8005338:	462a      	mov	r2, r5
 800533a:	4649      	mov	r1, r9
 800533c:	4640      	mov	r0, r8
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	47d0      	blx	sl
 8005342:	3001      	adds	r0, #1
 8005344:	d0ab      	beq.n	800529e <_printf_i+0x166>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	079b      	lsls	r3, r3, #30
 800534a:	d413      	bmi.n	8005374 <_printf_i+0x23c>
 800534c:	68e0      	ldr	r0, [r4, #12]
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	4298      	cmp	r0, r3
 8005352:	bfb8      	it	lt
 8005354:	4618      	movlt	r0, r3
 8005356:	e7a4      	b.n	80052a2 <_printf_i+0x16a>
 8005358:	2301      	movs	r3, #1
 800535a:	4632      	mov	r2, r6
 800535c:	4649      	mov	r1, r9
 800535e:	4640      	mov	r0, r8
 8005360:	47d0      	blx	sl
 8005362:	3001      	adds	r0, #1
 8005364:	d09b      	beq.n	800529e <_printf_i+0x166>
 8005366:	3501      	adds	r5, #1
 8005368:	68e3      	ldr	r3, [r4, #12]
 800536a:	9903      	ldr	r1, [sp, #12]
 800536c:	1a5b      	subs	r3, r3, r1
 800536e:	42ab      	cmp	r3, r5
 8005370:	dcf2      	bgt.n	8005358 <_printf_i+0x220>
 8005372:	e7eb      	b.n	800534c <_printf_i+0x214>
 8005374:	2500      	movs	r5, #0
 8005376:	f104 0619 	add.w	r6, r4, #25
 800537a:	e7f5      	b.n	8005368 <_printf_i+0x230>
 800537c:	080095aa 	.word	0x080095aa
 8005380:	080095bb 	.word	0x080095bb

08005384 <_scanf_float>:
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	b087      	sub	sp, #28
 800538a:	9303      	str	r3, [sp, #12]
 800538c:	688b      	ldr	r3, [r1, #8]
 800538e:	4617      	mov	r7, r2
 8005390:	1e5a      	subs	r2, r3, #1
 8005392:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005396:	bf85      	ittet	hi
 8005398:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800539c:	195b      	addhi	r3, r3, r5
 800539e:	2300      	movls	r3, #0
 80053a0:	9302      	strhi	r3, [sp, #8]
 80053a2:	bf88      	it	hi
 80053a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80053a8:	468b      	mov	fp, r1
 80053aa:	f04f 0500 	mov.w	r5, #0
 80053ae:	bf8c      	ite	hi
 80053b0:	608b      	strhi	r3, [r1, #8]
 80053b2:	9302      	strls	r3, [sp, #8]
 80053b4:	680b      	ldr	r3, [r1, #0]
 80053b6:	4680      	mov	r8, r0
 80053b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80053bc:	f84b 3b1c 	str.w	r3, [fp], #28
 80053c0:	460c      	mov	r4, r1
 80053c2:	465e      	mov	r6, fp
 80053c4:	46aa      	mov	sl, r5
 80053c6:	46a9      	mov	r9, r5
 80053c8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80053cc:	9501      	str	r5, [sp, #4]
 80053ce:	68a2      	ldr	r2, [r4, #8]
 80053d0:	b152      	cbz	r2, 80053e8 <_scanf_float+0x64>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b4e      	cmp	r3, #78	; 0x4e
 80053d8:	d864      	bhi.n	80054a4 <_scanf_float+0x120>
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d83c      	bhi.n	8005458 <_scanf_float+0xd4>
 80053de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80053e2:	b2c8      	uxtb	r0, r1
 80053e4:	280e      	cmp	r0, #14
 80053e6:	d93a      	bls.n	800545e <_scanf_float+0xda>
 80053e8:	f1b9 0f00 	cmp.w	r9, #0
 80053ec:	d003      	beq.n	80053f6 <_scanf_float+0x72>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053fa:	f1ba 0f01 	cmp.w	sl, #1
 80053fe:	f200 8113 	bhi.w	8005628 <_scanf_float+0x2a4>
 8005402:	455e      	cmp	r6, fp
 8005404:	f200 8105 	bhi.w	8005612 <_scanf_float+0x28e>
 8005408:	2501      	movs	r5, #1
 800540a:	4628      	mov	r0, r5
 800540c:	b007      	add	sp, #28
 800540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005412:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005416:	2a0d      	cmp	r2, #13
 8005418:	d8e6      	bhi.n	80053e8 <_scanf_float+0x64>
 800541a:	a101      	add	r1, pc, #4	; (adr r1, 8005420 <_scanf_float+0x9c>)
 800541c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005420:	0800555f 	.word	0x0800555f
 8005424:	080053e9 	.word	0x080053e9
 8005428:	080053e9 	.word	0x080053e9
 800542c:	080053e9 	.word	0x080053e9
 8005430:	080055bf 	.word	0x080055bf
 8005434:	08005597 	.word	0x08005597
 8005438:	080053e9 	.word	0x080053e9
 800543c:	080053e9 	.word	0x080053e9
 8005440:	0800556d 	.word	0x0800556d
 8005444:	080053e9 	.word	0x080053e9
 8005448:	080053e9 	.word	0x080053e9
 800544c:	080053e9 	.word	0x080053e9
 8005450:	080053e9 	.word	0x080053e9
 8005454:	08005525 	.word	0x08005525
 8005458:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800545c:	e7db      	b.n	8005416 <_scanf_float+0x92>
 800545e:	290e      	cmp	r1, #14
 8005460:	d8c2      	bhi.n	80053e8 <_scanf_float+0x64>
 8005462:	a001      	add	r0, pc, #4	; (adr r0, 8005468 <_scanf_float+0xe4>)
 8005464:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005468:	08005517 	.word	0x08005517
 800546c:	080053e9 	.word	0x080053e9
 8005470:	08005517 	.word	0x08005517
 8005474:	080055ab 	.word	0x080055ab
 8005478:	080053e9 	.word	0x080053e9
 800547c:	080054c5 	.word	0x080054c5
 8005480:	08005501 	.word	0x08005501
 8005484:	08005501 	.word	0x08005501
 8005488:	08005501 	.word	0x08005501
 800548c:	08005501 	.word	0x08005501
 8005490:	08005501 	.word	0x08005501
 8005494:	08005501 	.word	0x08005501
 8005498:	08005501 	.word	0x08005501
 800549c:	08005501 	.word	0x08005501
 80054a0:	08005501 	.word	0x08005501
 80054a4:	2b6e      	cmp	r3, #110	; 0x6e
 80054a6:	d809      	bhi.n	80054bc <_scanf_float+0x138>
 80054a8:	2b60      	cmp	r3, #96	; 0x60
 80054aa:	d8b2      	bhi.n	8005412 <_scanf_float+0x8e>
 80054ac:	2b54      	cmp	r3, #84	; 0x54
 80054ae:	d077      	beq.n	80055a0 <_scanf_float+0x21c>
 80054b0:	2b59      	cmp	r3, #89	; 0x59
 80054b2:	d199      	bne.n	80053e8 <_scanf_float+0x64>
 80054b4:	2d07      	cmp	r5, #7
 80054b6:	d197      	bne.n	80053e8 <_scanf_float+0x64>
 80054b8:	2508      	movs	r5, #8
 80054ba:	e029      	b.n	8005510 <_scanf_float+0x18c>
 80054bc:	2b74      	cmp	r3, #116	; 0x74
 80054be:	d06f      	beq.n	80055a0 <_scanf_float+0x21c>
 80054c0:	2b79      	cmp	r3, #121	; 0x79
 80054c2:	e7f6      	b.n	80054b2 <_scanf_float+0x12e>
 80054c4:	6821      	ldr	r1, [r4, #0]
 80054c6:	05c8      	lsls	r0, r1, #23
 80054c8:	d51a      	bpl.n	8005500 <_scanf_float+0x17c>
 80054ca:	9b02      	ldr	r3, [sp, #8]
 80054cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80054d0:	6021      	str	r1, [r4, #0]
 80054d2:	f109 0901 	add.w	r9, r9, #1
 80054d6:	b11b      	cbz	r3, 80054e0 <_scanf_float+0x15c>
 80054d8:	3b01      	subs	r3, #1
 80054da:	3201      	adds	r2, #1
 80054dc:	9302      	str	r3, [sp, #8]
 80054de:	60a2      	str	r2, [r4, #8]
 80054e0:	68a3      	ldr	r3, [r4, #8]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	60a3      	str	r3, [r4, #8]
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	3301      	adds	r3, #1
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	f340 8084 	ble.w	8005600 <_scanf_float+0x27c>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	e766      	b.n	80053ce <_scanf_float+0x4a>
 8005500:	eb1a 0f05 	cmn.w	sl, r5
 8005504:	f47f af70 	bne.w	80053e8 <_scanf_float+0x64>
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800550e:	6022      	str	r2, [r4, #0]
 8005510:	f806 3b01 	strb.w	r3, [r6], #1
 8005514:	e7e4      	b.n	80054e0 <_scanf_float+0x15c>
 8005516:	6822      	ldr	r2, [r4, #0]
 8005518:	0610      	lsls	r0, r2, #24
 800551a:	f57f af65 	bpl.w	80053e8 <_scanf_float+0x64>
 800551e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005522:	e7f4      	b.n	800550e <_scanf_float+0x18a>
 8005524:	f1ba 0f00 	cmp.w	sl, #0
 8005528:	d10e      	bne.n	8005548 <_scanf_float+0x1c4>
 800552a:	f1b9 0f00 	cmp.w	r9, #0
 800552e:	d10e      	bne.n	800554e <_scanf_float+0x1ca>
 8005530:	6822      	ldr	r2, [r4, #0]
 8005532:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005536:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800553a:	d108      	bne.n	800554e <_scanf_float+0x1ca>
 800553c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005540:	f04f 0a01 	mov.w	sl, #1
 8005544:	6022      	str	r2, [r4, #0]
 8005546:	e7e3      	b.n	8005510 <_scanf_float+0x18c>
 8005548:	f1ba 0f02 	cmp.w	sl, #2
 800554c:	d055      	beq.n	80055fa <_scanf_float+0x276>
 800554e:	2d01      	cmp	r5, #1
 8005550:	d002      	beq.n	8005558 <_scanf_float+0x1d4>
 8005552:	2d04      	cmp	r5, #4
 8005554:	f47f af48 	bne.w	80053e8 <_scanf_float+0x64>
 8005558:	3501      	adds	r5, #1
 800555a:	b2ed      	uxtb	r5, r5
 800555c:	e7d8      	b.n	8005510 <_scanf_float+0x18c>
 800555e:	f1ba 0f01 	cmp.w	sl, #1
 8005562:	f47f af41 	bne.w	80053e8 <_scanf_float+0x64>
 8005566:	f04f 0a02 	mov.w	sl, #2
 800556a:	e7d1      	b.n	8005510 <_scanf_float+0x18c>
 800556c:	b97d      	cbnz	r5, 800558e <_scanf_float+0x20a>
 800556e:	f1b9 0f00 	cmp.w	r9, #0
 8005572:	f47f af3c 	bne.w	80053ee <_scanf_float+0x6a>
 8005576:	6822      	ldr	r2, [r4, #0]
 8005578:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800557c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005580:	f47f af39 	bne.w	80053f6 <_scanf_float+0x72>
 8005584:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005588:	2501      	movs	r5, #1
 800558a:	6022      	str	r2, [r4, #0]
 800558c:	e7c0      	b.n	8005510 <_scanf_float+0x18c>
 800558e:	2d03      	cmp	r5, #3
 8005590:	d0e2      	beq.n	8005558 <_scanf_float+0x1d4>
 8005592:	2d05      	cmp	r5, #5
 8005594:	e7de      	b.n	8005554 <_scanf_float+0x1d0>
 8005596:	2d02      	cmp	r5, #2
 8005598:	f47f af26 	bne.w	80053e8 <_scanf_float+0x64>
 800559c:	2503      	movs	r5, #3
 800559e:	e7b7      	b.n	8005510 <_scanf_float+0x18c>
 80055a0:	2d06      	cmp	r5, #6
 80055a2:	f47f af21 	bne.w	80053e8 <_scanf_float+0x64>
 80055a6:	2507      	movs	r5, #7
 80055a8:	e7b2      	b.n	8005510 <_scanf_float+0x18c>
 80055aa:	6822      	ldr	r2, [r4, #0]
 80055ac:	0591      	lsls	r1, r2, #22
 80055ae:	f57f af1b 	bpl.w	80053e8 <_scanf_float+0x64>
 80055b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80055b6:	6022      	str	r2, [r4, #0]
 80055b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80055bc:	e7a8      	b.n	8005510 <_scanf_float+0x18c>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80055c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80055c8:	d006      	beq.n	80055d8 <_scanf_float+0x254>
 80055ca:	0550      	lsls	r0, r2, #21
 80055cc:	f57f af0c 	bpl.w	80053e8 <_scanf_float+0x64>
 80055d0:	f1b9 0f00 	cmp.w	r9, #0
 80055d4:	f43f af0f 	beq.w	80053f6 <_scanf_float+0x72>
 80055d8:	0591      	lsls	r1, r2, #22
 80055da:	bf58      	it	pl
 80055dc:	9901      	ldrpl	r1, [sp, #4]
 80055de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055e2:	bf58      	it	pl
 80055e4:	eba9 0101 	subpl.w	r1, r9, r1
 80055e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80055ec:	f04f 0900 	mov.w	r9, #0
 80055f0:	bf58      	it	pl
 80055f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	e78a      	b.n	8005510 <_scanf_float+0x18c>
 80055fa:	f04f 0a03 	mov.w	sl, #3
 80055fe:	e787      	b.n	8005510 <_scanf_float+0x18c>
 8005600:	4639      	mov	r1, r7
 8005602:	4640      	mov	r0, r8
 8005604:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005608:	4798      	blx	r3
 800560a:	2800      	cmp	r0, #0
 800560c:	f43f aedf 	beq.w	80053ce <_scanf_float+0x4a>
 8005610:	e6ea      	b.n	80053e8 <_scanf_float+0x64>
 8005612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005616:	463a      	mov	r2, r7
 8005618:	4640      	mov	r0, r8
 800561a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800561e:	4798      	blx	r3
 8005620:	6923      	ldr	r3, [r4, #16]
 8005622:	3b01      	subs	r3, #1
 8005624:	6123      	str	r3, [r4, #16]
 8005626:	e6ec      	b.n	8005402 <_scanf_float+0x7e>
 8005628:	1e6b      	subs	r3, r5, #1
 800562a:	2b06      	cmp	r3, #6
 800562c:	d825      	bhi.n	800567a <_scanf_float+0x2f6>
 800562e:	2d02      	cmp	r5, #2
 8005630:	d836      	bhi.n	80056a0 <_scanf_float+0x31c>
 8005632:	455e      	cmp	r6, fp
 8005634:	f67f aee8 	bls.w	8005408 <_scanf_float+0x84>
 8005638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800563c:	463a      	mov	r2, r7
 800563e:	4640      	mov	r0, r8
 8005640:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005644:	4798      	blx	r3
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	3b01      	subs	r3, #1
 800564a:	6123      	str	r3, [r4, #16]
 800564c:	e7f1      	b.n	8005632 <_scanf_float+0x2ae>
 800564e:	9802      	ldr	r0, [sp, #8]
 8005650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005654:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005658:	463a      	mov	r2, r7
 800565a:	9002      	str	r0, [sp, #8]
 800565c:	4640      	mov	r0, r8
 800565e:	4798      	blx	r3
 8005660:	6923      	ldr	r3, [r4, #16]
 8005662:	3b01      	subs	r3, #1
 8005664:	6123      	str	r3, [r4, #16]
 8005666:	f10a 3aff 	add.w	sl, sl, #4294967295
 800566a:	fa5f fa8a 	uxtb.w	sl, sl
 800566e:	f1ba 0f02 	cmp.w	sl, #2
 8005672:	d1ec      	bne.n	800564e <_scanf_float+0x2ca>
 8005674:	3d03      	subs	r5, #3
 8005676:	b2ed      	uxtb	r5, r5
 8005678:	1b76      	subs	r6, r6, r5
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	05da      	lsls	r2, r3, #23
 800567e:	d52f      	bpl.n	80056e0 <_scanf_float+0x35c>
 8005680:	055b      	lsls	r3, r3, #21
 8005682:	d510      	bpl.n	80056a6 <_scanf_float+0x322>
 8005684:	455e      	cmp	r6, fp
 8005686:	f67f aebf 	bls.w	8005408 <_scanf_float+0x84>
 800568a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800568e:	463a      	mov	r2, r7
 8005690:	4640      	mov	r0, r8
 8005692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005696:	4798      	blx	r3
 8005698:	6923      	ldr	r3, [r4, #16]
 800569a:	3b01      	subs	r3, #1
 800569c:	6123      	str	r3, [r4, #16]
 800569e:	e7f1      	b.n	8005684 <_scanf_float+0x300>
 80056a0:	46aa      	mov	sl, r5
 80056a2:	9602      	str	r6, [sp, #8]
 80056a4:	e7df      	b.n	8005666 <_scanf_float+0x2e2>
 80056a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80056aa:	6923      	ldr	r3, [r4, #16]
 80056ac:	2965      	cmp	r1, #101	; 0x65
 80056ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80056b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	d00c      	beq.n	80056d4 <_scanf_float+0x350>
 80056ba:	2945      	cmp	r1, #69	; 0x45
 80056bc:	d00a      	beq.n	80056d4 <_scanf_float+0x350>
 80056be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056c2:	463a      	mov	r2, r7
 80056c4:	4640      	mov	r0, r8
 80056c6:	4798      	blx	r3
 80056c8:	6923      	ldr	r3, [r4, #16]
 80056ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	1eb5      	subs	r5, r6, #2
 80056d2:	6123      	str	r3, [r4, #16]
 80056d4:	463a      	mov	r2, r7
 80056d6:	4640      	mov	r0, r8
 80056d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056dc:	4798      	blx	r3
 80056de:	462e      	mov	r6, r5
 80056e0:	6825      	ldr	r5, [r4, #0]
 80056e2:	f015 0510 	ands.w	r5, r5, #16
 80056e6:	d155      	bne.n	8005794 <_scanf_float+0x410>
 80056e8:	7035      	strb	r5, [r6, #0]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f4:	d11b      	bne.n	800572e <_scanf_float+0x3aa>
 80056f6:	9b01      	ldr	r3, [sp, #4]
 80056f8:	454b      	cmp	r3, r9
 80056fa:	eba3 0209 	sub.w	r2, r3, r9
 80056fe:	d123      	bne.n	8005748 <_scanf_float+0x3c4>
 8005700:	2200      	movs	r2, #0
 8005702:	4659      	mov	r1, fp
 8005704:	4640      	mov	r0, r8
 8005706:	f000 fe7b 	bl	8006400 <_strtod_r>
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	9b03      	ldr	r3, [sp, #12]
 800570e:	f012 0f02 	tst.w	r2, #2
 8005712:	4606      	mov	r6, r0
 8005714:	460f      	mov	r7, r1
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	d021      	beq.n	800575e <_scanf_float+0x3da>
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	9903      	ldr	r1, [sp, #12]
 800571e:	600a      	str	r2, [r1, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	e9c3 6700 	strd	r6, r7, [r3]
 8005726:	68e3      	ldr	r3, [r4, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60e3      	str	r3, [r4, #12]
 800572c:	e66d      	b.n	800540a <_scanf_float+0x86>
 800572e:	9b04      	ldr	r3, [sp, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0e5      	beq.n	8005700 <_scanf_float+0x37c>
 8005734:	9905      	ldr	r1, [sp, #20]
 8005736:	230a      	movs	r3, #10
 8005738:	462a      	mov	r2, r5
 800573a:	4640      	mov	r0, r8
 800573c:	3101      	adds	r1, #1
 800573e:	f000 fee1 	bl	8006504 <_strtol_r>
 8005742:	9b04      	ldr	r3, [sp, #16]
 8005744:	9e05      	ldr	r6, [sp, #20]
 8005746:	1ac2      	subs	r2, r0, r3
 8005748:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800574c:	429e      	cmp	r6, r3
 800574e:	bf28      	it	cs
 8005750:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005754:	4630      	mov	r0, r6
 8005756:	4910      	ldr	r1, [pc, #64]	; (8005798 <_scanf_float+0x414>)
 8005758:	f000 f826 	bl	80057a8 <siprintf>
 800575c:	e7d0      	b.n	8005700 <_scanf_float+0x37c>
 800575e:	f012 0f04 	tst.w	r2, #4
 8005762:	f103 0204 	add.w	r2, r3, #4
 8005766:	d1d9      	bne.n	800571c <_scanf_float+0x398>
 8005768:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800576c:	f8cc 2000 	str.w	r2, [ip]
 8005770:	f8d3 8000 	ldr.w	r8, [r3]
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	f7fb f948 	bl	8000a0c <__aeabi_dcmpun>
 800577c:	b128      	cbz	r0, 800578a <_scanf_float+0x406>
 800577e:	4807      	ldr	r0, [pc, #28]	; (800579c <_scanf_float+0x418>)
 8005780:	f000 f80e 	bl	80057a0 <nanf>
 8005784:	f8c8 0000 	str.w	r0, [r8]
 8005788:	e7cd      	b.n	8005726 <_scanf_float+0x3a2>
 800578a:	4630      	mov	r0, r6
 800578c:	4639      	mov	r1, r7
 800578e:	f7fb f99b 	bl	8000ac8 <__aeabi_d2f>
 8005792:	e7f7      	b.n	8005784 <_scanf_float+0x400>
 8005794:	2500      	movs	r5, #0
 8005796:	e638      	b.n	800540a <_scanf_float+0x86>
 8005798:	080095cc 	.word	0x080095cc
 800579c:	080099d8 	.word	0x080099d8

080057a0 <nanf>:
 80057a0:	4800      	ldr	r0, [pc, #0]	; (80057a4 <nanf+0x4>)
 80057a2:	4770      	bx	lr
 80057a4:	7fc00000 	.word	0x7fc00000

080057a8 <siprintf>:
 80057a8:	b40e      	push	{r1, r2, r3}
 80057aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057ae:	b500      	push	{lr}
 80057b0:	b09c      	sub	sp, #112	; 0x70
 80057b2:	ab1d      	add	r3, sp, #116	; 0x74
 80057b4:	9002      	str	r0, [sp, #8]
 80057b6:	9006      	str	r0, [sp, #24]
 80057b8:	9107      	str	r1, [sp, #28]
 80057ba:	9104      	str	r1, [sp, #16]
 80057bc:	4808      	ldr	r0, [pc, #32]	; (80057e0 <siprintf+0x38>)
 80057be:	4909      	ldr	r1, [pc, #36]	; (80057e4 <siprintf+0x3c>)
 80057c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057c4:	9105      	str	r1, [sp, #20]
 80057c6:	6800      	ldr	r0, [r0, #0]
 80057c8:	a902      	add	r1, sp, #8
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	f002 feba 	bl	8008544 <_svfiprintf_r>
 80057d0:	2200      	movs	r2, #0
 80057d2:	9b02      	ldr	r3, [sp, #8]
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	b01c      	add	sp, #112	; 0x70
 80057d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80057dc:	b003      	add	sp, #12
 80057de:	4770      	bx	lr
 80057e0:	2000000c 	.word	0x2000000c
 80057e4:	ffff0208 	.word	0xffff0208

080057e8 <sulp>:
 80057e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ec:	460f      	mov	r7, r1
 80057ee:	4690      	mov	r8, r2
 80057f0:	f002 fc14 	bl	800801c <__ulp>
 80057f4:	4604      	mov	r4, r0
 80057f6:	460d      	mov	r5, r1
 80057f8:	f1b8 0f00 	cmp.w	r8, #0
 80057fc:	d011      	beq.n	8005822 <sulp+0x3a>
 80057fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005806:	2b00      	cmp	r3, #0
 8005808:	dd0b      	ble.n	8005822 <sulp+0x3a>
 800580a:	2400      	movs	r4, #0
 800580c:	051b      	lsls	r3, r3, #20
 800580e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005812:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005816:	4622      	mov	r2, r4
 8005818:	462b      	mov	r3, r5
 800581a:	f7fa fe5d 	bl	80004d8 <__aeabi_dmul>
 800581e:	4604      	mov	r4, r0
 8005820:	460d      	mov	r5, r1
 8005822:	4620      	mov	r0, r4
 8005824:	4629      	mov	r1, r5
 8005826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582a:	0000      	movs	r0, r0
 800582c:	0000      	movs	r0, r0
	...

08005830 <_strtod_l>:
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	469b      	mov	fp, r3
 8005836:	2300      	movs	r3, #0
 8005838:	b09f      	sub	sp, #124	; 0x7c
 800583a:	931a      	str	r3, [sp, #104]	; 0x68
 800583c:	4b9e      	ldr	r3, [pc, #632]	; (8005ab8 <_strtod_l+0x288>)
 800583e:	4682      	mov	sl, r0
 8005840:	681f      	ldr	r7, [r3, #0]
 8005842:	460e      	mov	r6, r1
 8005844:	4638      	mov	r0, r7
 8005846:	9215      	str	r2, [sp, #84]	; 0x54
 8005848:	f7fa fc82 	bl	8000150 <strlen>
 800584c:	f04f 0800 	mov.w	r8, #0
 8005850:	4604      	mov	r4, r0
 8005852:	f04f 0900 	mov.w	r9, #0
 8005856:	9619      	str	r6, [sp, #100]	; 0x64
 8005858:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	2a2b      	cmp	r2, #43	; 0x2b
 800585e:	d04c      	beq.n	80058fa <_strtod_l+0xca>
 8005860:	d83a      	bhi.n	80058d8 <_strtod_l+0xa8>
 8005862:	2a0d      	cmp	r2, #13
 8005864:	d833      	bhi.n	80058ce <_strtod_l+0x9e>
 8005866:	2a08      	cmp	r2, #8
 8005868:	d833      	bhi.n	80058d2 <_strtod_l+0xa2>
 800586a:	2a00      	cmp	r2, #0
 800586c:	d03d      	beq.n	80058ea <_strtod_l+0xba>
 800586e:	2300      	movs	r3, #0
 8005870:	930a      	str	r3, [sp, #40]	; 0x28
 8005872:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005874:	782b      	ldrb	r3, [r5, #0]
 8005876:	2b30      	cmp	r3, #48	; 0x30
 8005878:	f040 80aa 	bne.w	80059d0 <_strtod_l+0x1a0>
 800587c:	786b      	ldrb	r3, [r5, #1]
 800587e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005882:	2b58      	cmp	r3, #88	; 0x58
 8005884:	d166      	bne.n	8005954 <_strtod_l+0x124>
 8005886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005888:	4650      	mov	r0, sl
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	ab1a      	add	r3, sp, #104	; 0x68
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	4a8a      	ldr	r2, [pc, #552]	; (8005abc <_strtod_l+0x28c>)
 8005892:	f8cd b008 	str.w	fp, [sp, #8]
 8005896:	ab1b      	add	r3, sp, #108	; 0x6c
 8005898:	a919      	add	r1, sp, #100	; 0x64
 800589a:	f001 fd17 	bl	80072cc <__gethex>
 800589e:	f010 0607 	ands.w	r6, r0, #7
 80058a2:	4604      	mov	r4, r0
 80058a4:	d005      	beq.n	80058b2 <_strtod_l+0x82>
 80058a6:	2e06      	cmp	r6, #6
 80058a8:	d129      	bne.n	80058fe <_strtod_l+0xce>
 80058aa:	2300      	movs	r3, #0
 80058ac:	3501      	adds	r5, #1
 80058ae:	9519      	str	r5, [sp, #100]	; 0x64
 80058b0:	930a      	str	r3, [sp, #40]	; 0x28
 80058b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 858a 	bne.w	80063ce <_strtod_l+0xb9e>
 80058ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058bc:	b1d3      	cbz	r3, 80058f4 <_strtod_l+0xc4>
 80058be:	4642      	mov	r2, r8
 80058c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80058c4:	4610      	mov	r0, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	b01f      	add	sp, #124	; 0x7c
 80058ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ce:	2a20      	cmp	r2, #32
 80058d0:	d1cd      	bne.n	800586e <_strtod_l+0x3e>
 80058d2:	3301      	adds	r3, #1
 80058d4:	9319      	str	r3, [sp, #100]	; 0x64
 80058d6:	e7bf      	b.n	8005858 <_strtod_l+0x28>
 80058d8:	2a2d      	cmp	r2, #45	; 0x2d
 80058da:	d1c8      	bne.n	800586e <_strtod_l+0x3e>
 80058dc:	2201      	movs	r2, #1
 80058de:	920a      	str	r2, [sp, #40]	; 0x28
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	9219      	str	r2, [sp, #100]	; 0x64
 80058e4:	785b      	ldrb	r3, [r3, #1]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1c3      	bne.n	8005872 <_strtod_l+0x42>
 80058ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058ec:	9619      	str	r6, [sp, #100]	; 0x64
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 856b 	bne.w	80063ca <_strtod_l+0xb9a>
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	e7e4      	b.n	80058c4 <_strtod_l+0x94>
 80058fa:	2200      	movs	r2, #0
 80058fc:	e7ef      	b.n	80058de <_strtod_l+0xae>
 80058fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005900:	b13a      	cbz	r2, 8005912 <_strtod_l+0xe2>
 8005902:	2135      	movs	r1, #53	; 0x35
 8005904:	a81c      	add	r0, sp, #112	; 0x70
 8005906:	f002 fc8d 	bl	8008224 <__copybits>
 800590a:	4650      	mov	r0, sl
 800590c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800590e:	f002 f855 	bl	80079bc <_Bfree>
 8005912:	3e01      	subs	r6, #1
 8005914:	2e04      	cmp	r6, #4
 8005916:	d806      	bhi.n	8005926 <_strtod_l+0xf6>
 8005918:	e8df f006 	tbb	[pc, r6]
 800591c:	1714030a 	.word	0x1714030a
 8005920:	0a          	.byte	0x0a
 8005921:	00          	.byte	0x00
 8005922:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005926:	0721      	lsls	r1, r4, #28
 8005928:	d5c3      	bpl.n	80058b2 <_strtod_l+0x82>
 800592a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800592e:	e7c0      	b.n	80058b2 <_strtod_l+0x82>
 8005930:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005932:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005936:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800593a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800593e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005942:	e7f0      	b.n	8005926 <_strtod_l+0xf6>
 8005944:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005ac0 <_strtod_l+0x290>
 8005948:	e7ed      	b.n	8005926 <_strtod_l+0xf6>
 800594a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800594e:	f04f 38ff 	mov.w	r8, #4294967295
 8005952:	e7e8      	b.n	8005926 <_strtod_l+0xf6>
 8005954:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	9219      	str	r2, [sp, #100]	; 0x64
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b30      	cmp	r3, #48	; 0x30
 800595e:	d0f9      	beq.n	8005954 <_strtod_l+0x124>
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0a6      	beq.n	80058b2 <_strtod_l+0x82>
 8005964:	2301      	movs	r3, #1
 8005966:	9307      	str	r3, [sp, #28]
 8005968:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800596a:	220a      	movs	r2, #10
 800596c:	9308      	str	r3, [sp, #32]
 800596e:	2300      	movs	r3, #0
 8005970:	469b      	mov	fp, r3
 8005972:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005976:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005978:	7805      	ldrb	r5, [r0, #0]
 800597a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800597e:	b2d9      	uxtb	r1, r3
 8005980:	2909      	cmp	r1, #9
 8005982:	d927      	bls.n	80059d4 <_strtod_l+0x1a4>
 8005984:	4622      	mov	r2, r4
 8005986:	4639      	mov	r1, r7
 8005988:	f002 fef2 	bl	8008770 <strncmp>
 800598c:	2800      	cmp	r0, #0
 800598e:	d033      	beq.n	80059f8 <_strtod_l+0x1c8>
 8005990:	2000      	movs	r0, #0
 8005992:	462a      	mov	r2, r5
 8005994:	465c      	mov	r4, fp
 8005996:	4603      	mov	r3, r0
 8005998:	9004      	str	r0, [sp, #16]
 800599a:	2a65      	cmp	r2, #101	; 0x65
 800599c:	d001      	beq.n	80059a2 <_strtod_l+0x172>
 800599e:	2a45      	cmp	r2, #69	; 0x45
 80059a0:	d114      	bne.n	80059cc <_strtod_l+0x19c>
 80059a2:	b91c      	cbnz	r4, 80059ac <_strtod_l+0x17c>
 80059a4:	9a07      	ldr	r2, [sp, #28]
 80059a6:	4302      	orrs	r2, r0
 80059a8:	d09f      	beq.n	80058ea <_strtod_l+0xba>
 80059aa:	2400      	movs	r4, #0
 80059ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80059ae:	1c72      	adds	r2, r6, #1
 80059b0:	9219      	str	r2, [sp, #100]	; 0x64
 80059b2:	7872      	ldrb	r2, [r6, #1]
 80059b4:	2a2b      	cmp	r2, #43	; 0x2b
 80059b6:	d079      	beq.n	8005aac <_strtod_l+0x27c>
 80059b8:	2a2d      	cmp	r2, #45	; 0x2d
 80059ba:	f000 8083 	beq.w	8005ac4 <_strtod_l+0x294>
 80059be:	2700      	movs	r7, #0
 80059c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80059c4:	2909      	cmp	r1, #9
 80059c6:	f240 8083 	bls.w	8005ad0 <_strtod_l+0x2a0>
 80059ca:	9619      	str	r6, [sp, #100]	; 0x64
 80059cc:	2500      	movs	r5, #0
 80059ce:	e09f      	b.n	8005b10 <_strtod_l+0x2e0>
 80059d0:	2300      	movs	r3, #0
 80059d2:	e7c8      	b.n	8005966 <_strtod_l+0x136>
 80059d4:	f1bb 0f08 	cmp.w	fp, #8
 80059d8:	bfd5      	itete	le
 80059da:	9906      	ldrle	r1, [sp, #24]
 80059dc:	9905      	ldrgt	r1, [sp, #20]
 80059de:	fb02 3301 	mlale	r3, r2, r1, r3
 80059e2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80059e6:	f100 0001 	add.w	r0, r0, #1
 80059ea:	bfd4      	ite	le
 80059ec:	9306      	strle	r3, [sp, #24]
 80059ee:	9305      	strgt	r3, [sp, #20]
 80059f0:	f10b 0b01 	add.w	fp, fp, #1
 80059f4:	9019      	str	r0, [sp, #100]	; 0x64
 80059f6:	e7be      	b.n	8005976 <_strtod_l+0x146>
 80059f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059fa:	191a      	adds	r2, r3, r4
 80059fc:	9219      	str	r2, [sp, #100]	; 0x64
 80059fe:	5d1a      	ldrb	r2, [r3, r4]
 8005a00:	f1bb 0f00 	cmp.w	fp, #0
 8005a04:	d036      	beq.n	8005a74 <_strtod_l+0x244>
 8005a06:	465c      	mov	r4, fp
 8005a08:	9004      	str	r0, [sp, #16]
 8005a0a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005a0e:	2b09      	cmp	r3, #9
 8005a10:	d912      	bls.n	8005a38 <_strtod_l+0x208>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e7c1      	b.n	800599a <_strtod_l+0x16a>
 8005a16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a18:	3001      	adds	r0, #1
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	9219      	str	r2, [sp, #100]	; 0x64
 8005a1e:	785a      	ldrb	r2, [r3, #1]
 8005a20:	2a30      	cmp	r2, #48	; 0x30
 8005a22:	d0f8      	beq.n	8005a16 <_strtod_l+0x1e6>
 8005a24:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	f200 84d5 	bhi.w	80063d8 <_strtod_l+0xba8>
 8005a2e:	9004      	str	r0, [sp, #16]
 8005a30:	2000      	movs	r0, #0
 8005a32:	4604      	mov	r4, r0
 8005a34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a36:	9308      	str	r3, [sp, #32]
 8005a38:	3a30      	subs	r2, #48	; 0x30
 8005a3a:	f100 0301 	add.w	r3, r0, #1
 8005a3e:	d013      	beq.n	8005a68 <_strtod_l+0x238>
 8005a40:	9904      	ldr	r1, [sp, #16]
 8005a42:	1905      	adds	r5, r0, r4
 8005a44:	4419      	add	r1, r3
 8005a46:	9104      	str	r1, [sp, #16]
 8005a48:	4623      	mov	r3, r4
 8005a4a:	210a      	movs	r1, #10
 8005a4c:	42ab      	cmp	r3, r5
 8005a4e:	d113      	bne.n	8005a78 <_strtod_l+0x248>
 8005a50:	1823      	adds	r3, r4, r0
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	f104 0401 	add.w	r4, r4, #1
 8005a58:	4404      	add	r4, r0
 8005a5a:	dc1b      	bgt.n	8005a94 <_strtod_l+0x264>
 8005a5c:	230a      	movs	r3, #10
 8005a5e:	9906      	ldr	r1, [sp, #24]
 8005a60:	fb03 2301 	mla	r3, r3, r1, r2
 8005a64:	9306      	str	r3, [sp, #24]
 8005a66:	2300      	movs	r3, #0
 8005a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	1c51      	adds	r1, r2, #1
 8005a6e:	9119      	str	r1, [sp, #100]	; 0x64
 8005a70:	7852      	ldrb	r2, [r2, #1]
 8005a72:	e7ca      	b.n	8005a0a <_strtod_l+0x1da>
 8005a74:	4658      	mov	r0, fp
 8005a76:	e7d3      	b.n	8005a20 <_strtod_l+0x1f0>
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	dc04      	bgt.n	8005a86 <_strtod_l+0x256>
 8005a7c:	9f06      	ldr	r7, [sp, #24]
 8005a7e:	434f      	muls	r7, r1
 8005a80:	9706      	str	r7, [sp, #24]
 8005a82:	3301      	adds	r3, #1
 8005a84:	e7e2      	b.n	8005a4c <_strtod_l+0x21c>
 8005a86:	1c5f      	adds	r7, r3, #1
 8005a88:	2f10      	cmp	r7, #16
 8005a8a:	bfde      	ittt	le
 8005a8c:	9f05      	ldrle	r7, [sp, #20]
 8005a8e:	434f      	mulle	r7, r1
 8005a90:	9705      	strle	r7, [sp, #20]
 8005a92:	e7f6      	b.n	8005a82 <_strtod_l+0x252>
 8005a94:	2c10      	cmp	r4, #16
 8005a96:	bfdf      	itttt	le
 8005a98:	230a      	movle	r3, #10
 8005a9a:	9905      	ldrle	r1, [sp, #20]
 8005a9c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005aa0:	9305      	strle	r3, [sp, #20]
 8005aa2:	e7e0      	b.n	8005a66 <_strtod_l+0x236>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9304      	str	r3, [sp, #16]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e77b      	b.n	80059a4 <_strtod_l+0x174>
 8005aac:	2700      	movs	r7, #0
 8005aae:	1cb2      	adds	r2, r6, #2
 8005ab0:	9219      	str	r2, [sp, #100]	; 0x64
 8005ab2:	78b2      	ldrb	r2, [r6, #2]
 8005ab4:	e784      	b.n	80059c0 <_strtod_l+0x190>
 8005ab6:	bf00      	nop
 8005ab8:	08009820 	.word	0x08009820
 8005abc:	080095d4 	.word	0x080095d4
 8005ac0:	7ff00000 	.word	0x7ff00000
 8005ac4:	2701      	movs	r7, #1
 8005ac6:	e7f2      	b.n	8005aae <_strtod_l+0x27e>
 8005ac8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005aca:	1c51      	adds	r1, r2, #1
 8005acc:	9119      	str	r1, [sp, #100]	; 0x64
 8005ace:	7852      	ldrb	r2, [r2, #1]
 8005ad0:	2a30      	cmp	r2, #48	; 0x30
 8005ad2:	d0f9      	beq.n	8005ac8 <_strtod_l+0x298>
 8005ad4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005ad8:	2908      	cmp	r1, #8
 8005ada:	f63f af77 	bhi.w	80059cc <_strtod_l+0x19c>
 8005ade:	f04f 0e0a 	mov.w	lr, #10
 8005ae2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005ae6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005aec:	1c51      	adds	r1, r2, #1
 8005aee:	9119      	str	r1, [sp, #100]	; 0x64
 8005af0:	7852      	ldrb	r2, [r2, #1]
 8005af2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005af6:	2d09      	cmp	r5, #9
 8005af8:	d935      	bls.n	8005b66 <_strtod_l+0x336>
 8005afa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005afc:	1b49      	subs	r1, r1, r5
 8005afe:	2908      	cmp	r1, #8
 8005b00:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005b04:	dc02      	bgt.n	8005b0c <_strtod_l+0x2dc>
 8005b06:	4565      	cmp	r5, ip
 8005b08:	bfa8      	it	ge
 8005b0a:	4665      	movge	r5, ip
 8005b0c:	b107      	cbz	r7, 8005b10 <_strtod_l+0x2e0>
 8005b0e:	426d      	negs	r5, r5
 8005b10:	2c00      	cmp	r4, #0
 8005b12:	d14c      	bne.n	8005bae <_strtod_l+0x37e>
 8005b14:	9907      	ldr	r1, [sp, #28]
 8005b16:	4301      	orrs	r1, r0
 8005b18:	f47f aecb 	bne.w	80058b2 <_strtod_l+0x82>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f47f aee4 	bne.w	80058ea <_strtod_l+0xba>
 8005b22:	2a69      	cmp	r2, #105	; 0x69
 8005b24:	d026      	beq.n	8005b74 <_strtod_l+0x344>
 8005b26:	dc23      	bgt.n	8005b70 <_strtod_l+0x340>
 8005b28:	2a49      	cmp	r2, #73	; 0x49
 8005b2a:	d023      	beq.n	8005b74 <_strtod_l+0x344>
 8005b2c:	2a4e      	cmp	r2, #78	; 0x4e
 8005b2e:	f47f aedc 	bne.w	80058ea <_strtod_l+0xba>
 8005b32:	499d      	ldr	r1, [pc, #628]	; (8005da8 <_strtod_l+0x578>)
 8005b34:	a819      	add	r0, sp, #100	; 0x64
 8005b36:	f001 fe17 	bl	8007768 <__match>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	f43f aed5 	beq.w	80058ea <_strtod_l+0xba>
 8005b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b28      	cmp	r3, #40	; 0x28
 8005b46:	d12c      	bne.n	8005ba2 <_strtod_l+0x372>
 8005b48:	4998      	ldr	r1, [pc, #608]	; (8005dac <_strtod_l+0x57c>)
 8005b4a:	aa1c      	add	r2, sp, #112	; 0x70
 8005b4c:	a819      	add	r0, sp, #100	; 0x64
 8005b4e:	f001 fe1f 	bl	8007790 <__hexnan>
 8005b52:	2805      	cmp	r0, #5
 8005b54:	d125      	bne.n	8005ba2 <_strtod_l+0x372>
 8005b56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b58:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005b5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005b60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005b64:	e6a5      	b.n	80058b2 <_strtod_l+0x82>
 8005b66:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005b6a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005b6e:	e7bc      	b.n	8005aea <_strtod_l+0x2ba>
 8005b70:	2a6e      	cmp	r2, #110	; 0x6e
 8005b72:	e7dc      	b.n	8005b2e <_strtod_l+0x2fe>
 8005b74:	498e      	ldr	r1, [pc, #568]	; (8005db0 <_strtod_l+0x580>)
 8005b76:	a819      	add	r0, sp, #100	; 0x64
 8005b78:	f001 fdf6 	bl	8007768 <__match>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	f43f aeb4 	beq.w	80058ea <_strtod_l+0xba>
 8005b82:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b84:	498b      	ldr	r1, [pc, #556]	; (8005db4 <_strtod_l+0x584>)
 8005b86:	3b01      	subs	r3, #1
 8005b88:	a819      	add	r0, sp, #100	; 0x64
 8005b8a:	9319      	str	r3, [sp, #100]	; 0x64
 8005b8c:	f001 fdec 	bl	8007768 <__match>
 8005b90:	b910      	cbnz	r0, 8005b98 <_strtod_l+0x368>
 8005b92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b94:	3301      	adds	r3, #1
 8005b96:	9319      	str	r3, [sp, #100]	; 0x64
 8005b98:	f04f 0800 	mov.w	r8, #0
 8005b9c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005db8 <_strtod_l+0x588>
 8005ba0:	e687      	b.n	80058b2 <_strtod_l+0x82>
 8005ba2:	4886      	ldr	r0, [pc, #536]	; (8005dbc <_strtod_l+0x58c>)
 8005ba4:	f002 fdce 	bl	8008744 <nan>
 8005ba8:	4680      	mov	r8, r0
 8005baa:	4689      	mov	r9, r1
 8005bac:	e681      	b.n	80058b2 <_strtod_l+0x82>
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	f1bb 0f00 	cmp.w	fp, #0
 8005bb4:	bf08      	it	eq
 8005bb6:	46a3      	moveq	fp, r4
 8005bb8:	1aeb      	subs	r3, r5, r3
 8005bba:	2c10      	cmp	r4, #16
 8005bbc:	9806      	ldr	r0, [sp, #24]
 8005bbe:	4626      	mov	r6, r4
 8005bc0:	9307      	str	r3, [sp, #28]
 8005bc2:	bfa8      	it	ge
 8005bc4:	2610      	movge	r6, #16
 8005bc6:	f7fa fc0d 	bl	80003e4 <__aeabi_ui2d>
 8005bca:	2c09      	cmp	r4, #9
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4689      	mov	r9, r1
 8005bd0:	dd13      	ble.n	8005bfa <_strtod_l+0x3ca>
 8005bd2:	4b7b      	ldr	r3, [pc, #492]	; (8005dc0 <_strtod_l+0x590>)
 8005bd4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bd8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005bdc:	f7fa fc7c 	bl	80004d8 <__aeabi_dmul>
 8005be0:	4680      	mov	r8, r0
 8005be2:	9805      	ldr	r0, [sp, #20]
 8005be4:	4689      	mov	r9, r1
 8005be6:	f7fa fbfd 	bl	80003e4 <__aeabi_ui2d>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fabb 	bl	800016c <__adddf3>
 8005bf6:	4680      	mov	r8, r0
 8005bf8:	4689      	mov	r9, r1
 8005bfa:	2c0f      	cmp	r4, #15
 8005bfc:	dc36      	bgt.n	8005c6c <_strtod_l+0x43c>
 8005bfe:	9b07      	ldr	r3, [sp, #28]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f43f ae56 	beq.w	80058b2 <_strtod_l+0x82>
 8005c06:	dd22      	ble.n	8005c4e <_strtod_l+0x41e>
 8005c08:	2b16      	cmp	r3, #22
 8005c0a:	dc09      	bgt.n	8005c20 <_strtod_l+0x3f0>
 8005c0c:	496c      	ldr	r1, [pc, #432]	; (8005dc0 <_strtod_l+0x590>)
 8005c0e:	4642      	mov	r2, r8
 8005c10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c14:	464b      	mov	r3, r9
 8005c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c1a:	f7fa fc5d 	bl	80004d8 <__aeabi_dmul>
 8005c1e:	e7c3      	b.n	8005ba8 <_strtod_l+0x378>
 8005c20:	9a07      	ldr	r2, [sp, #28]
 8005c22:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005c26:	4293      	cmp	r3, r2
 8005c28:	db20      	blt.n	8005c6c <_strtod_l+0x43c>
 8005c2a:	4d65      	ldr	r5, [pc, #404]	; (8005dc0 <_strtod_l+0x590>)
 8005c2c:	f1c4 040f 	rsb	r4, r4, #15
 8005c30:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005c34:	4642      	mov	r2, r8
 8005c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	f7fa fc4c 	bl	80004d8 <__aeabi_dmul>
 8005c40:	9b07      	ldr	r3, [sp, #28]
 8005c42:	1b1c      	subs	r4, r3, r4
 8005c44:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005c48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c4c:	e7e5      	b.n	8005c1a <_strtod_l+0x3ea>
 8005c4e:	9b07      	ldr	r3, [sp, #28]
 8005c50:	3316      	adds	r3, #22
 8005c52:	db0b      	blt.n	8005c6c <_strtod_l+0x43c>
 8005c54:	9b04      	ldr	r3, [sp, #16]
 8005c56:	4640      	mov	r0, r8
 8005c58:	1b5d      	subs	r5, r3, r5
 8005c5a:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <_strtod_l+0x590>)
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005c62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c66:	f7fa fd61 	bl	800072c <__aeabi_ddiv>
 8005c6a:	e79d      	b.n	8005ba8 <_strtod_l+0x378>
 8005c6c:	9b07      	ldr	r3, [sp, #28]
 8005c6e:	1ba6      	subs	r6, r4, r6
 8005c70:	441e      	add	r6, r3
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	dd74      	ble.n	8005d60 <_strtod_l+0x530>
 8005c76:	f016 030f 	ands.w	r3, r6, #15
 8005c7a:	d00a      	beq.n	8005c92 <_strtod_l+0x462>
 8005c7c:	4950      	ldr	r1, [pc, #320]	; (8005dc0 <_strtod_l+0x590>)
 8005c7e:	4642      	mov	r2, r8
 8005c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c88:	464b      	mov	r3, r9
 8005c8a:	f7fa fc25 	bl	80004d8 <__aeabi_dmul>
 8005c8e:	4680      	mov	r8, r0
 8005c90:	4689      	mov	r9, r1
 8005c92:	f036 060f 	bics.w	r6, r6, #15
 8005c96:	d052      	beq.n	8005d3e <_strtod_l+0x50e>
 8005c98:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005c9c:	dd27      	ble.n	8005cee <_strtod_l+0x4be>
 8005c9e:	f04f 0b00 	mov.w	fp, #0
 8005ca2:	f8cd b010 	str.w	fp, [sp, #16]
 8005ca6:	f8cd b020 	str.w	fp, [sp, #32]
 8005caa:	f8cd b018 	str.w	fp, [sp, #24]
 8005cae:	2322      	movs	r3, #34	; 0x22
 8005cb0:	f04f 0800 	mov.w	r8, #0
 8005cb4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005db8 <_strtod_l+0x588>
 8005cb8:	f8ca 3000 	str.w	r3, [sl]
 8005cbc:	9b08      	ldr	r3, [sp, #32]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f43f adf7 	beq.w	80058b2 <_strtod_l+0x82>
 8005cc4:	4650      	mov	r0, sl
 8005cc6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005cc8:	f001 fe78 	bl	80079bc <_Bfree>
 8005ccc:	4650      	mov	r0, sl
 8005cce:	9906      	ldr	r1, [sp, #24]
 8005cd0:	f001 fe74 	bl	80079bc <_Bfree>
 8005cd4:	4650      	mov	r0, sl
 8005cd6:	9904      	ldr	r1, [sp, #16]
 8005cd8:	f001 fe70 	bl	80079bc <_Bfree>
 8005cdc:	4650      	mov	r0, sl
 8005cde:	9908      	ldr	r1, [sp, #32]
 8005ce0:	f001 fe6c 	bl	80079bc <_Bfree>
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	4650      	mov	r0, sl
 8005ce8:	f001 fe68 	bl	80079bc <_Bfree>
 8005cec:	e5e1      	b.n	80058b2 <_strtod_l+0x82>
 8005cee:	4b35      	ldr	r3, [pc, #212]	; (8005dc4 <_strtod_l+0x594>)
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	9305      	str	r3, [sp, #20]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	461f      	mov	r7, r3
 8005cfa:	1136      	asrs	r6, r6, #4
 8005cfc:	2e01      	cmp	r6, #1
 8005cfe:	dc21      	bgt.n	8005d44 <_strtod_l+0x514>
 8005d00:	b10b      	cbz	r3, 8005d06 <_strtod_l+0x4d6>
 8005d02:	4680      	mov	r8, r0
 8005d04:	4689      	mov	r9, r1
 8005d06:	4b2f      	ldr	r3, [pc, #188]	; (8005dc4 <_strtod_l+0x594>)
 8005d08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005d0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005d10:	4642      	mov	r2, r8
 8005d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d16:	464b      	mov	r3, r9
 8005d18:	f7fa fbde 	bl	80004d8 <__aeabi_dmul>
 8005d1c:	4b26      	ldr	r3, [pc, #152]	; (8005db8 <_strtod_l+0x588>)
 8005d1e:	460a      	mov	r2, r1
 8005d20:	400b      	ands	r3, r1
 8005d22:	4929      	ldr	r1, [pc, #164]	; (8005dc8 <_strtod_l+0x598>)
 8005d24:	4680      	mov	r8, r0
 8005d26:	428b      	cmp	r3, r1
 8005d28:	d8b9      	bhi.n	8005c9e <_strtod_l+0x46e>
 8005d2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005d2e:	428b      	cmp	r3, r1
 8005d30:	bf86      	itte	hi
 8005d32:	f04f 38ff 	movhi.w	r8, #4294967295
 8005d36:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005dcc <_strtod_l+0x59c>
 8005d3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9305      	str	r3, [sp, #20]
 8005d42:	e07f      	b.n	8005e44 <_strtod_l+0x614>
 8005d44:	07f2      	lsls	r2, r6, #31
 8005d46:	d505      	bpl.n	8005d54 <_strtod_l+0x524>
 8005d48:	9b05      	ldr	r3, [sp, #20]
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fbc3 	bl	80004d8 <__aeabi_dmul>
 8005d52:	2301      	movs	r3, #1
 8005d54:	9a05      	ldr	r2, [sp, #20]
 8005d56:	3701      	adds	r7, #1
 8005d58:	3208      	adds	r2, #8
 8005d5a:	1076      	asrs	r6, r6, #1
 8005d5c:	9205      	str	r2, [sp, #20]
 8005d5e:	e7cd      	b.n	8005cfc <_strtod_l+0x4cc>
 8005d60:	d0ed      	beq.n	8005d3e <_strtod_l+0x50e>
 8005d62:	4276      	negs	r6, r6
 8005d64:	f016 020f 	ands.w	r2, r6, #15
 8005d68:	d00a      	beq.n	8005d80 <_strtod_l+0x550>
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <_strtod_l+0x590>)
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d72:	4649      	mov	r1, r9
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fcd8 	bl	800072c <__aeabi_ddiv>
 8005d7c:	4680      	mov	r8, r0
 8005d7e:	4689      	mov	r9, r1
 8005d80:	1136      	asrs	r6, r6, #4
 8005d82:	d0dc      	beq.n	8005d3e <_strtod_l+0x50e>
 8005d84:	2e1f      	cmp	r6, #31
 8005d86:	dd23      	ble.n	8005dd0 <_strtod_l+0x5a0>
 8005d88:	f04f 0b00 	mov.w	fp, #0
 8005d8c:	f8cd b010 	str.w	fp, [sp, #16]
 8005d90:	f8cd b020 	str.w	fp, [sp, #32]
 8005d94:	f8cd b018 	str.w	fp, [sp, #24]
 8005d98:	2322      	movs	r3, #34	; 0x22
 8005d9a:	f04f 0800 	mov.w	r8, #0
 8005d9e:	f04f 0900 	mov.w	r9, #0
 8005da2:	f8ca 3000 	str.w	r3, [sl]
 8005da6:	e789      	b.n	8005cbc <_strtod_l+0x48c>
 8005da8:	080095a5 	.word	0x080095a5
 8005dac:	080095e8 	.word	0x080095e8
 8005db0:	0800959d 	.word	0x0800959d
 8005db4:	0800972c 	.word	0x0800972c
 8005db8:	7ff00000 	.word	0x7ff00000
 8005dbc:	080099d8 	.word	0x080099d8
 8005dc0:	080098b8 	.word	0x080098b8
 8005dc4:	08009890 	.word	0x08009890
 8005dc8:	7ca00000 	.word	0x7ca00000
 8005dcc:	7fefffff 	.word	0x7fefffff
 8005dd0:	f016 0310 	ands.w	r3, r6, #16
 8005dd4:	bf18      	it	ne
 8005dd6:	236a      	movne	r3, #106	; 0x6a
 8005dd8:	4640      	mov	r0, r8
 8005dda:	9305      	str	r3, [sp, #20]
 8005ddc:	4649      	mov	r1, r9
 8005dde:	2300      	movs	r3, #0
 8005de0:	4fb0      	ldr	r7, [pc, #704]	; (80060a4 <_strtod_l+0x874>)
 8005de2:	07f2      	lsls	r2, r6, #31
 8005de4:	d504      	bpl.n	8005df0 <_strtod_l+0x5c0>
 8005de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dea:	f7fa fb75 	bl	80004d8 <__aeabi_dmul>
 8005dee:	2301      	movs	r3, #1
 8005df0:	1076      	asrs	r6, r6, #1
 8005df2:	f107 0708 	add.w	r7, r7, #8
 8005df6:	d1f4      	bne.n	8005de2 <_strtod_l+0x5b2>
 8005df8:	b10b      	cbz	r3, 8005dfe <_strtod_l+0x5ce>
 8005dfa:	4680      	mov	r8, r0
 8005dfc:	4689      	mov	r9, r1
 8005dfe:	9b05      	ldr	r3, [sp, #20]
 8005e00:	b1c3      	cbz	r3, 8005e34 <_strtod_l+0x604>
 8005e02:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005e06:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	dd11      	ble.n	8005e34 <_strtod_l+0x604>
 8005e10:	2b1f      	cmp	r3, #31
 8005e12:	f340 8127 	ble.w	8006064 <_strtod_l+0x834>
 8005e16:	2b34      	cmp	r3, #52	; 0x34
 8005e18:	bfd8      	it	le
 8005e1a:	f04f 33ff 	movle.w	r3, #4294967295
 8005e1e:	f04f 0800 	mov.w	r8, #0
 8005e22:	bfcf      	iteee	gt
 8005e24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005e28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005e2c:	fa03 f202 	lslle.w	r2, r3, r2
 8005e30:	ea02 0901 	andle.w	r9, r2, r1
 8005e34:	2200      	movs	r2, #0
 8005e36:	2300      	movs	r3, #0
 8005e38:	4640      	mov	r0, r8
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	f7fa fdb4 	bl	80009a8 <__aeabi_dcmpeq>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d1a1      	bne.n	8005d88 <_strtod_l+0x558>
 8005e44:	9b06      	ldr	r3, [sp, #24]
 8005e46:	465a      	mov	r2, fp
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	4650      	mov	r0, sl
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	9908      	ldr	r1, [sp, #32]
 8005e50:	f001 fe1c 	bl	8007a8c <__s2b>
 8005e54:	9008      	str	r0, [sp, #32]
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f43f af21 	beq.w	8005c9e <_strtod_l+0x46e>
 8005e5c:	9b04      	ldr	r3, [sp, #16]
 8005e5e:	f04f 0b00 	mov.w	fp, #0
 8005e62:	1b5d      	subs	r5, r3, r5
 8005e64:	9b07      	ldr	r3, [sp, #28]
 8005e66:	f8cd b010 	str.w	fp, [sp, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bfb4      	ite	lt
 8005e6e:	462b      	movlt	r3, r5
 8005e70:	2300      	movge	r3, #0
 8005e72:	930e      	str	r3, [sp, #56]	; 0x38
 8005e74:	9b07      	ldr	r3, [sp, #28]
 8005e76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e7a:	9314      	str	r3, [sp, #80]	; 0x50
 8005e7c:	9b08      	ldr	r3, [sp, #32]
 8005e7e:	4650      	mov	r0, sl
 8005e80:	6859      	ldr	r1, [r3, #4]
 8005e82:	f001 fd5b 	bl	800793c <_Balloc>
 8005e86:	9006      	str	r0, [sp, #24]
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	f43f af10 	beq.w	8005cae <_strtod_l+0x47e>
 8005e8e:	9b08      	ldr	r3, [sp, #32]
 8005e90:	300c      	adds	r0, #12
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	f103 010c 	add.w	r1, r3, #12
 8005e98:	3202      	adds	r2, #2
 8005e9a:	0092      	lsls	r2, r2, #2
 8005e9c:	f001 fd40 	bl	8007920 <memcpy>
 8005ea0:	ab1c      	add	r3, sp, #112	; 0x70
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	ab1b      	add	r3, sp, #108	; 0x6c
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	4650      	mov	r0, sl
 8005eae:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005eb2:	f002 f92d 	bl	8008110 <__d2b>
 8005eb6:	901a      	str	r0, [sp, #104]	; 0x68
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	f43f aef8 	beq.w	8005cae <_strtod_l+0x47e>
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	4650      	mov	r0, sl
 8005ec2:	f001 fe7b 	bl	8007bbc <__i2b>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	9004      	str	r0, [sp, #16]
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	f43f aeef 	beq.w	8005cae <_strtod_l+0x47e>
 8005ed0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005ed2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005ed4:	2d00      	cmp	r5, #0
 8005ed6:	bfab      	itete	ge
 8005ed8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005eda:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005edc:	18ee      	addge	r6, r5, r3
 8005ede:	1b5c      	sublt	r4, r3, r5
 8005ee0:	9b05      	ldr	r3, [sp, #20]
 8005ee2:	bfa8      	it	ge
 8005ee4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005ee6:	eba5 0503 	sub.w	r5, r5, r3
 8005eea:	4415      	add	r5, r2
 8005eec:	4b6e      	ldr	r3, [pc, #440]	; (80060a8 <_strtod_l+0x878>)
 8005eee:	f105 35ff 	add.w	r5, r5, #4294967295
 8005ef2:	bfb8      	it	lt
 8005ef4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005ef6:	429d      	cmp	r5, r3
 8005ef8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005efc:	f280 80c4 	bge.w	8006088 <_strtod_l+0x858>
 8005f00:	1b5b      	subs	r3, r3, r5
 8005f02:	2b1f      	cmp	r3, #31
 8005f04:	f04f 0701 	mov.w	r7, #1
 8005f08:	eba2 0203 	sub.w	r2, r2, r3
 8005f0c:	f300 80b1 	bgt.w	8006072 <_strtod_l+0x842>
 8005f10:	2500      	movs	r5, #0
 8005f12:	fa07 f303 	lsl.w	r3, r7, r3
 8005f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f18:	18b7      	adds	r7, r6, r2
 8005f1a:	9b05      	ldr	r3, [sp, #20]
 8005f1c:	42be      	cmp	r6, r7
 8005f1e:	4414      	add	r4, r2
 8005f20:	441c      	add	r4, r3
 8005f22:	4633      	mov	r3, r6
 8005f24:	bfa8      	it	ge
 8005f26:	463b      	movge	r3, r7
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	bfa8      	it	ge
 8005f2c:	4623      	movge	r3, r4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bfc2      	ittt	gt
 8005f32:	1aff      	subgt	r7, r7, r3
 8005f34:	1ae4      	subgt	r4, r4, r3
 8005f36:	1af6      	subgt	r6, r6, r3
 8005f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dd17      	ble.n	8005f6e <_strtod_l+0x73e>
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4650      	mov	r0, sl
 8005f42:	9904      	ldr	r1, [sp, #16]
 8005f44:	f001 fef8 	bl	8007d38 <__pow5mult>
 8005f48:	9004      	str	r0, [sp, #16]
 8005f4a:	2800      	cmp	r0, #0
 8005f4c:	f43f aeaf 	beq.w	8005cae <_strtod_l+0x47e>
 8005f50:	4601      	mov	r1, r0
 8005f52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005f54:	4650      	mov	r0, sl
 8005f56:	f001 fe47 	bl	8007be8 <__multiply>
 8005f5a:	9009      	str	r0, [sp, #36]	; 0x24
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	f43f aea6 	beq.w	8005cae <_strtod_l+0x47e>
 8005f62:	4650      	mov	r0, sl
 8005f64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f66:	f001 fd29 	bl	80079bc <_Bfree>
 8005f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f6e:	2f00      	cmp	r7, #0
 8005f70:	f300 808e 	bgt.w	8006090 <_strtod_l+0x860>
 8005f74:	9b07      	ldr	r3, [sp, #28]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dd08      	ble.n	8005f8c <_strtod_l+0x75c>
 8005f7a:	4650      	mov	r0, sl
 8005f7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f7e:	9906      	ldr	r1, [sp, #24]
 8005f80:	f001 feda 	bl	8007d38 <__pow5mult>
 8005f84:	9006      	str	r0, [sp, #24]
 8005f86:	2800      	cmp	r0, #0
 8005f88:	f43f ae91 	beq.w	8005cae <_strtod_l+0x47e>
 8005f8c:	2c00      	cmp	r4, #0
 8005f8e:	dd08      	ble.n	8005fa2 <_strtod_l+0x772>
 8005f90:	4622      	mov	r2, r4
 8005f92:	4650      	mov	r0, sl
 8005f94:	9906      	ldr	r1, [sp, #24]
 8005f96:	f001 ff29 	bl	8007dec <__lshift>
 8005f9a:	9006      	str	r0, [sp, #24]
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f43f ae86 	beq.w	8005cae <_strtod_l+0x47e>
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	dd08      	ble.n	8005fb8 <_strtod_l+0x788>
 8005fa6:	4632      	mov	r2, r6
 8005fa8:	4650      	mov	r0, sl
 8005faa:	9904      	ldr	r1, [sp, #16]
 8005fac:	f001 ff1e 	bl	8007dec <__lshift>
 8005fb0:	9004      	str	r0, [sp, #16]
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	f43f ae7b 	beq.w	8005cae <_strtod_l+0x47e>
 8005fb8:	4650      	mov	r0, sl
 8005fba:	9a06      	ldr	r2, [sp, #24]
 8005fbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005fbe:	f001 ffa1 	bl	8007f04 <__mdiff>
 8005fc2:	4683      	mov	fp, r0
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	f43f ae72 	beq.w	8005cae <_strtod_l+0x47e>
 8005fca:	2400      	movs	r4, #0
 8005fcc:	68c3      	ldr	r3, [r0, #12]
 8005fce:	9904      	ldr	r1, [sp, #16]
 8005fd0:	60c4      	str	r4, [r0, #12]
 8005fd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fd4:	f001 ff7a 	bl	8007ecc <__mcmp>
 8005fd8:	42a0      	cmp	r0, r4
 8005fda:	da6b      	bge.n	80060b4 <_strtod_l+0x884>
 8005fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fde:	ea53 0308 	orrs.w	r3, r3, r8
 8005fe2:	f040 8091 	bne.w	8006108 <_strtod_l+0x8d8>
 8005fe6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f040 808c 	bne.w	8006108 <_strtod_l+0x8d8>
 8005ff0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ff4:	0d1b      	lsrs	r3, r3, #20
 8005ff6:	051b      	lsls	r3, r3, #20
 8005ff8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005ffc:	f240 8084 	bls.w	8006108 <_strtod_l+0x8d8>
 8006000:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006004:	b91b      	cbnz	r3, 800600e <_strtod_l+0x7de>
 8006006:	f8db 3010 	ldr.w	r3, [fp, #16]
 800600a:	2b01      	cmp	r3, #1
 800600c:	dd7c      	ble.n	8006108 <_strtod_l+0x8d8>
 800600e:	4659      	mov	r1, fp
 8006010:	2201      	movs	r2, #1
 8006012:	4650      	mov	r0, sl
 8006014:	f001 feea 	bl	8007dec <__lshift>
 8006018:	9904      	ldr	r1, [sp, #16]
 800601a:	4683      	mov	fp, r0
 800601c:	f001 ff56 	bl	8007ecc <__mcmp>
 8006020:	2800      	cmp	r0, #0
 8006022:	dd71      	ble.n	8006108 <_strtod_l+0x8d8>
 8006024:	9905      	ldr	r1, [sp, #20]
 8006026:	464b      	mov	r3, r9
 8006028:	4a20      	ldr	r2, [pc, #128]	; (80060ac <_strtod_l+0x87c>)
 800602a:	2900      	cmp	r1, #0
 800602c:	f000 808c 	beq.w	8006148 <_strtod_l+0x918>
 8006030:	ea02 0109 	and.w	r1, r2, r9
 8006034:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006038:	f300 8086 	bgt.w	8006148 <_strtod_l+0x918>
 800603c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006040:	f77f aeaa 	ble.w	8005d98 <_strtod_l+0x568>
 8006044:	4640      	mov	r0, r8
 8006046:	4649      	mov	r1, r9
 8006048:	4b19      	ldr	r3, [pc, #100]	; (80060b0 <_strtod_l+0x880>)
 800604a:	2200      	movs	r2, #0
 800604c:	f7fa fa44 	bl	80004d8 <__aeabi_dmul>
 8006050:	460b      	mov	r3, r1
 8006052:	4303      	orrs	r3, r0
 8006054:	bf08      	it	eq
 8006056:	2322      	moveq	r3, #34	; 0x22
 8006058:	4680      	mov	r8, r0
 800605a:	4689      	mov	r9, r1
 800605c:	bf08      	it	eq
 800605e:	f8ca 3000 	streq.w	r3, [sl]
 8006062:	e62f      	b.n	8005cc4 <_strtod_l+0x494>
 8006064:	f04f 32ff 	mov.w	r2, #4294967295
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	ea03 0808 	and.w	r8, r3, r8
 8006070:	e6e0      	b.n	8005e34 <_strtod_l+0x604>
 8006072:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006076:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800607a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800607e:	35e2      	adds	r5, #226	; 0xe2
 8006080:	fa07 f505 	lsl.w	r5, r7, r5
 8006084:	970f      	str	r7, [sp, #60]	; 0x3c
 8006086:	e747      	b.n	8005f18 <_strtod_l+0x6e8>
 8006088:	2301      	movs	r3, #1
 800608a:	2500      	movs	r5, #0
 800608c:	930f      	str	r3, [sp, #60]	; 0x3c
 800608e:	e743      	b.n	8005f18 <_strtod_l+0x6e8>
 8006090:	463a      	mov	r2, r7
 8006092:	4650      	mov	r0, sl
 8006094:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006096:	f001 fea9 	bl	8007dec <__lshift>
 800609a:	901a      	str	r0, [sp, #104]	; 0x68
 800609c:	2800      	cmp	r0, #0
 800609e:	f47f af69 	bne.w	8005f74 <_strtod_l+0x744>
 80060a2:	e604      	b.n	8005cae <_strtod_l+0x47e>
 80060a4:	08009600 	.word	0x08009600
 80060a8:	fffffc02 	.word	0xfffffc02
 80060ac:	7ff00000 	.word	0x7ff00000
 80060b0:	39500000 	.word	0x39500000
 80060b4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80060b8:	d165      	bne.n	8006186 <_strtod_l+0x956>
 80060ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060c0:	b35a      	cbz	r2, 800611a <_strtod_l+0x8ea>
 80060c2:	4a99      	ldr	r2, [pc, #612]	; (8006328 <_strtod_l+0xaf8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d12b      	bne.n	8006120 <_strtod_l+0x8f0>
 80060c8:	9b05      	ldr	r3, [sp, #20]
 80060ca:	4641      	mov	r1, r8
 80060cc:	b303      	cbz	r3, 8006110 <_strtod_l+0x8e0>
 80060ce:	464a      	mov	r2, r9
 80060d0:	4b96      	ldr	r3, [pc, #600]	; (800632c <_strtod_l+0xafc>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80060d8:	f04f 32ff 	mov.w	r2, #4294967295
 80060dc:	d81b      	bhi.n	8006116 <_strtod_l+0x8e6>
 80060de:	0d1b      	lsrs	r3, r3, #20
 80060e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	4299      	cmp	r1, r3
 80060ea:	d119      	bne.n	8006120 <_strtod_l+0x8f0>
 80060ec:	4b90      	ldr	r3, [pc, #576]	; (8006330 <_strtod_l+0xb00>)
 80060ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d102      	bne.n	80060fa <_strtod_l+0x8ca>
 80060f4:	3101      	adds	r1, #1
 80060f6:	f43f adda 	beq.w	8005cae <_strtod_l+0x47e>
 80060fa:	f04f 0800 	mov.w	r8, #0
 80060fe:	4b8b      	ldr	r3, [pc, #556]	; (800632c <_strtod_l+0xafc>)
 8006100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006102:	401a      	ands	r2, r3
 8006104:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006108:	9b05      	ldr	r3, [sp, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d19a      	bne.n	8006044 <_strtod_l+0x814>
 800610e:	e5d9      	b.n	8005cc4 <_strtod_l+0x494>
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	e7e8      	b.n	80060e8 <_strtod_l+0x8b8>
 8006116:	4613      	mov	r3, r2
 8006118:	e7e6      	b.n	80060e8 <_strtod_l+0x8b8>
 800611a:	ea53 0308 	orrs.w	r3, r3, r8
 800611e:	d081      	beq.n	8006024 <_strtod_l+0x7f4>
 8006120:	b1e5      	cbz	r5, 800615c <_strtod_l+0x92c>
 8006122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006124:	421d      	tst	r5, r3
 8006126:	d0ef      	beq.n	8006108 <_strtod_l+0x8d8>
 8006128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800612a:	4640      	mov	r0, r8
 800612c:	4649      	mov	r1, r9
 800612e:	9a05      	ldr	r2, [sp, #20]
 8006130:	b1c3      	cbz	r3, 8006164 <_strtod_l+0x934>
 8006132:	f7ff fb59 	bl	80057e8 <sulp>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800613e:	f7fa f815 	bl	800016c <__adddf3>
 8006142:	4680      	mov	r8, r0
 8006144:	4689      	mov	r9, r1
 8006146:	e7df      	b.n	8006108 <_strtod_l+0x8d8>
 8006148:	4013      	ands	r3, r2
 800614a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800614e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006152:	f04f 38ff 	mov.w	r8, #4294967295
 8006156:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800615a:	e7d5      	b.n	8006108 <_strtod_l+0x8d8>
 800615c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800615e:	ea13 0f08 	tst.w	r3, r8
 8006162:	e7e0      	b.n	8006126 <_strtod_l+0x8f6>
 8006164:	f7ff fb40 	bl	80057e8 <sulp>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006170:	f7f9 fffa 	bl	8000168 <__aeabi_dsub>
 8006174:	2200      	movs	r2, #0
 8006176:	2300      	movs	r3, #0
 8006178:	4680      	mov	r8, r0
 800617a:	4689      	mov	r9, r1
 800617c:	f7fa fc14 	bl	80009a8 <__aeabi_dcmpeq>
 8006180:	2800      	cmp	r0, #0
 8006182:	d0c1      	beq.n	8006108 <_strtod_l+0x8d8>
 8006184:	e608      	b.n	8005d98 <_strtod_l+0x568>
 8006186:	4658      	mov	r0, fp
 8006188:	9904      	ldr	r1, [sp, #16]
 800618a:	f002 f81d 	bl	80081c8 <__ratio>
 800618e:	2200      	movs	r2, #0
 8006190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006194:	4606      	mov	r6, r0
 8006196:	460f      	mov	r7, r1
 8006198:	f7fa fc1a 	bl	80009d0 <__aeabi_dcmple>
 800619c:	2800      	cmp	r0, #0
 800619e:	d070      	beq.n	8006282 <_strtod_l+0xa52>
 80061a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d042      	beq.n	800622c <_strtod_l+0x9fc>
 80061a6:	2600      	movs	r6, #0
 80061a8:	4f62      	ldr	r7, [pc, #392]	; (8006334 <_strtod_l+0xb04>)
 80061aa:	4d62      	ldr	r5, [pc, #392]	; (8006334 <_strtod_l+0xb04>)
 80061ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b2:	0d1b      	lsrs	r3, r3, #20
 80061b4:	051b      	lsls	r3, r3, #20
 80061b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061ba:	4b5f      	ldr	r3, [pc, #380]	; (8006338 <_strtod_l+0xb08>)
 80061bc:	429a      	cmp	r2, r3
 80061be:	f040 80c3 	bne.w	8006348 <_strtod_l+0xb18>
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	4640      	mov	r0, r8
 80061c6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80061ca:	4649      	mov	r1, r9
 80061cc:	f001 ff26 	bl	800801c <__ulp>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4630      	mov	r0, r6
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa f97e 	bl	80004d8 <__aeabi_dmul>
 80061dc:	4642      	mov	r2, r8
 80061de:	464b      	mov	r3, r9
 80061e0:	f7f9 ffc4 	bl	800016c <__adddf3>
 80061e4:	460b      	mov	r3, r1
 80061e6:	4951      	ldr	r1, [pc, #324]	; (800632c <_strtod_l+0xafc>)
 80061e8:	4a54      	ldr	r2, [pc, #336]	; (800633c <_strtod_l+0xb0c>)
 80061ea:	4019      	ands	r1, r3
 80061ec:	4291      	cmp	r1, r2
 80061ee:	4680      	mov	r8, r0
 80061f0:	d95d      	bls.n	80062ae <_strtod_l+0xa7e>
 80061f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061f4:	4b4e      	ldr	r3, [pc, #312]	; (8006330 <_strtod_l+0xb00>)
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d103      	bne.n	8006202 <_strtod_l+0x9d2>
 80061fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061fc:	3301      	adds	r3, #1
 80061fe:	f43f ad56 	beq.w	8005cae <_strtod_l+0x47e>
 8006202:	f04f 38ff 	mov.w	r8, #4294967295
 8006206:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006330 <_strtod_l+0xb00>
 800620a:	4650      	mov	r0, sl
 800620c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800620e:	f001 fbd5 	bl	80079bc <_Bfree>
 8006212:	4650      	mov	r0, sl
 8006214:	9906      	ldr	r1, [sp, #24]
 8006216:	f001 fbd1 	bl	80079bc <_Bfree>
 800621a:	4650      	mov	r0, sl
 800621c:	9904      	ldr	r1, [sp, #16]
 800621e:	f001 fbcd 	bl	80079bc <_Bfree>
 8006222:	4659      	mov	r1, fp
 8006224:	4650      	mov	r0, sl
 8006226:	f001 fbc9 	bl	80079bc <_Bfree>
 800622a:	e627      	b.n	8005e7c <_strtod_l+0x64c>
 800622c:	f1b8 0f00 	cmp.w	r8, #0
 8006230:	d119      	bne.n	8006266 <_strtod_l+0xa36>
 8006232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006238:	b9e3      	cbnz	r3, 8006274 <_strtod_l+0xa44>
 800623a:	2200      	movs	r2, #0
 800623c:	4630      	mov	r0, r6
 800623e:	4639      	mov	r1, r7
 8006240:	4b3c      	ldr	r3, [pc, #240]	; (8006334 <_strtod_l+0xb04>)
 8006242:	f7fa fbbb 	bl	80009bc <__aeabi_dcmplt>
 8006246:	b9c8      	cbnz	r0, 800627c <_strtod_l+0xa4c>
 8006248:	2200      	movs	r2, #0
 800624a:	4630      	mov	r0, r6
 800624c:	4639      	mov	r1, r7
 800624e:	4b3c      	ldr	r3, [pc, #240]	; (8006340 <_strtod_l+0xb10>)
 8006250:	f7fa f942 	bl	80004d8 <__aeabi_dmul>
 8006254:	4604      	mov	r4, r0
 8006256:	460d      	mov	r5, r1
 8006258:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800625c:	9416      	str	r4, [sp, #88]	; 0x58
 800625e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006260:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006264:	e7a2      	b.n	80061ac <_strtod_l+0x97c>
 8006266:	f1b8 0f01 	cmp.w	r8, #1
 800626a:	d103      	bne.n	8006274 <_strtod_l+0xa44>
 800626c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	f43f ad92 	beq.w	8005d98 <_strtod_l+0x568>
 8006274:	2600      	movs	r6, #0
 8006276:	2400      	movs	r4, #0
 8006278:	4f32      	ldr	r7, [pc, #200]	; (8006344 <_strtod_l+0xb14>)
 800627a:	e796      	b.n	80061aa <_strtod_l+0x97a>
 800627c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800627e:	4d30      	ldr	r5, [pc, #192]	; (8006340 <_strtod_l+0xb10>)
 8006280:	e7ea      	b.n	8006258 <_strtod_l+0xa28>
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <_strtod_l+0xb10>)
 8006284:	2200      	movs	r2, #0
 8006286:	4630      	mov	r0, r6
 8006288:	4639      	mov	r1, r7
 800628a:	f7fa f925 	bl	80004d8 <__aeabi_dmul>
 800628e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006290:	4604      	mov	r4, r0
 8006292:	460d      	mov	r5, r1
 8006294:	b933      	cbnz	r3, 80062a4 <_strtod_l+0xa74>
 8006296:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800629a:	9010      	str	r0, [sp, #64]	; 0x40
 800629c:	9311      	str	r3, [sp, #68]	; 0x44
 800629e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80062a2:	e783      	b.n	80061ac <_strtod_l+0x97c>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80062ac:	e7f7      	b.n	800629e <_strtod_l+0xa6e>
 80062ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80062b2:	9b05      	ldr	r3, [sp, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1a8      	bne.n	800620a <_strtod_l+0x9da>
 80062b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062be:	0d1b      	lsrs	r3, r3, #20
 80062c0:	051b      	lsls	r3, r3, #20
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d1a1      	bne.n	800620a <_strtod_l+0x9da>
 80062c6:	4620      	mov	r0, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	f7fa fd5b 	bl	8000d84 <__aeabi_d2lz>
 80062ce:	f7fa f8d5 	bl	800047c <__aeabi_l2d>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7f9 ff45 	bl	8000168 <__aeabi_dsub>
 80062de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062e4:	ea43 0308 	orr.w	r3, r3, r8
 80062e8:	4313      	orrs	r3, r2
 80062ea:	4604      	mov	r4, r0
 80062ec:	460d      	mov	r5, r1
 80062ee:	d066      	beq.n	80063be <_strtod_l+0xb8e>
 80062f0:	a309      	add	r3, pc, #36	; (adr r3, 8006318 <_strtod_l+0xae8>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7fa fb61 	bl	80009bc <__aeabi_dcmplt>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f47f ace2 	bne.w	8005cc4 <_strtod_l+0x494>
 8006300:	a307      	add	r3, pc, #28	; (adr r3, 8006320 <_strtod_l+0xaf0>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	4620      	mov	r0, r4
 8006308:	4629      	mov	r1, r5
 800630a:	f7fa fb75 	bl	80009f8 <__aeabi_dcmpgt>
 800630e:	2800      	cmp	r0, #0
 8006310:	f43f af7b 	beq.w	800620a <_strtod_l+0x9da>
 8006314:	e4d6      	b.n	8005cc4 <_strtod_l+0x494>
 8006316:	bf00      	nop
 8006318:	94a03595 	.word	0x94a03595
 800631c:	3fdfffff 	.word	0x3fdfffff
 8006320:	35afe535 	.word	0x35afe535
 8006324:	3fe00000 	.word	0x3fe00000
 8006328:	000fffff 	.word	0x000fffff
 800632c:	7ff00000 	.word	0x7ff00000
 8006330:	7fefffff 	.word	0x7fefffff
 8006334:	3ff00000 	.word	0x3ff00000
 8006338:	7fe00000 	.word	0x7fe00000
 800633c:	7c9fffff 	.word	0x7c9fffff
 8006340:	3fe00000 	.word	0x3fe00000
 8006344:	bff00000 	.word	0xbff00000
 8006348:	9b05      	ldr	r3, [sp, #20]
 800634a:	b313      	cbz	r3, 8006392 <_strtod_l+0xb62>
 800634c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800634e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006352:	d81e      	bhi.n	8006392 <_strtod_l+0xb62>
 8006354:	a326      	add	r3, pc, #152	; (adr r3, 80063f0 <_strtod_l+0xbc0>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7fa fb37 	bl	80009d0 <__aeabi_dcmple>
 8006362:	b190      	cbz	r0, 800638a <_strtod_l+0xb5a>
 8006364:	4629      	mov	r1, r5
 8006366:	4620      	mov	r0, r4
 8006368:	f7fa fb8e 	bl	8000a88 <__aeabi_d2uiz>
 800636c:	2801      	cmp	r0, #1
 800636e:	bf38      	it	cc
 8006370:	2001      	movcc	r0, #1
 8006372:	f7fa f837 	bl	80003e4 <__aeabi_ui2d>
 8006376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006378:	4604      	mov	r4, r0
 800637a:	460d      	mov	r5, r1
 800637c:	b9d3      	cbnz	r3, 80063b4 <_strtod_l+0xb84>
 800637e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006382:	9012      	str	r0, [sp, #72]	; 0x48
 8006384:	9313      	str	r3, [sp, #76]	; 0x4c
 8006386:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800638a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800638c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006390:	1a9f      	subs	r7, r3, r2
 8006392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006396:	f001 fe41 	bl	800801c <__ulp>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4630      	mov	r0, r6
 80063a0:	4639      	mov	r1, r7
 80063a2:	f7fa f899 	bl	80004d8 <__aeabi_dmul>
 80063a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063aa:	f7f9 fedf 	bl	800016c <__adddf3>
 80063ae:	4680      	mov	r8, r0
 80063b0:	4689      	mov	r9, r1
 80063b2:	e77e      	b.n	80062b2 <_strtod_l+0xa82>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80063bc:	e7e3      	b.n	8006386 <_strtod_l+0xb56>
 80063be:	a30e      	add	r3, pc, #56	; (adr r3, 80063f8 <_strtod_l+0xbc8>)
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7fa fafa 	bl	80009bc <__aeabi_dcmplt>
 80063c8:	e7a1      	b.n	800630e <_strtod_l+0xade>
 80063ca:	2300      	movs	r3, #0
 80063cc:	930a      	str	r3, [sp, #40]	; 0x28
 80063ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80063d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	f7ff ba71 	b.w	80058ba <_strtod_l+0x8a>
 80063d8:	2a65      	cmp	r2, #101	; 0x65
 80063da:	f43f ab63 	beq.w	8005aa4 <_strtod_l+0x274>
 80063de:	2a45      	cmp	r2, #69	; 0x45
 80063e0:	f43f ab60 	beq.w	8005aa4 <_strtod_l+0x274>
 80063e4:	2301      	movs	r3, #1
 80063e6:	f7ff bb95 	b.w	8005b14 <_strtod_l+0x2e4>
 80063ea:	bf00      	nop
 80063ec:	f3af 8000 	nop.w
 80063f0:	ffc00000 	.word	0xffc00000
 80063f4:	41dfffff 	.word	0x41dfffff
 80063f8:	94a03595 	.word	0x94a03595
 80063fc:	3fcfffff 	.word	0x3fcfffff

08006400 <_strtod_r>:
 8006400:	4b01      	ldr	r3, [pc, #4]	; (8006408 <_strtod_r+0x8>)
 8006402:	f7ff ba15 	b.w	8005830 <_strtod_l>
 8006406:	bf00      	nop
 8006408:	20000074 	.word	0x20000074

0800640c <_strtol_l.constprop.0>:
 800640c:	2b01      	cmp	r3, #1
 800640e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006412:	4680      	mov	r8, r0
 8006414:	d001      	beq.n	800641a <_strtol_l.constprop.0+0xe>
 8006416:	2b24      	cmp	r3, #36	; 0x24
 8006418:	d906      	bls.n	8006428 <_strtol_l.constprop.0+0x1c>
 800641a:	f7fe fb21 	bl	8004a60 <__errno>
 800641e:	2316      	movs	r3, #22
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	2000      	movs	r0, #0
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	460d      	mov	r5, r1
 800642a:	4f35      	ldr	r7, [pc, #212]	; (8006500 <_strtol_l.constprop.0+0xf4>)
 800642c:	4628      	mov	r0, r5
 800642e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006432:	5de6      	ldrb	r6, [r4, r7]
 8006434:	f016 0608 	ands.w	r6, r6, #8
 8006438:	d1f8      	bne.n	800642c <_strtol_l.constprop.0+0x20>
 800643a:	2c2d      	cmp	r4, #45	; 0x2d
 800643c:	d12f      	bne.n	800649e <_strtol_l.constprop.0+0x92>
 800643e:	2601      	movs	r6, #1
 8006440:	782c      	ldrb	r4, [r5, #0]
 8006442:	1c85      	adds	r5, r0, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d057      	beq.n	80064f8 <_strtol_l.constprop.0+0xec>
 8006448:	2b10      	cmp	r3, #16
 800644a:	d109      	bne.n	8006460 <_strtol_l.constprop.0+0x54>
 800644c:	2c30      	cmp	r4, #48	; 0x30
 800644e:	d107      	bne.n	8006460 <_strtol_l.constprop.0+0x54>
 8006450:	7828      	ldrb	r0, [r5, #0]
 8006452:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006456:	2858      	cmp	r0, #88	; 0x58
 8006458:	d149      	bne.n	80064ee <_strtol_l.constprop.0+0xe2>
 800645a:	2310      	movs	r3, #16
 800645c:	786c      	ldrb	r4, [r5, #1]
 800645e:	3502      	adds	r5, #2
 8006460:	2700      	movs	r7, #0
 8006462:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006466:	f10e 3eff 	add.w	lr, lr, #4294967295
 800646a:	fbbe f9f3 	udiv	r9, lr, r3
 800646e:	4638      	mov	r0, r7
 8006470:	fb03 ea19 	mls	sl, r3, r9, lr
 8006474:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006478:	f1bc 0f09 	cmp.w	ip, #9
 800647c:	d814      	bhi.n	80064a8 <_strtol_l.constprop.0+0x9c>
 800647e:	4664      	mov	r4, ip
 8006480:	42a3      	cmp	r3, r4
 8006482:	dd22      	ble.n	80064ca <_strtol_l.constprop.0+0xbe>
 8006484:	2f00      	cmp	r7, #0
 8006486:	db1d      	blt.n	80064c4 <_strtol_l.constprop.0+0xb8>
 8006488:	4581      	cmp	r9, r0
 800648a:	d31b      	bcc.n	80064c4 <_strtol_l.constprop.0+0xb8>
 800648c:	d101      	bne.n	8006492 <_strtol_l.constprop.0+0x86>
 800648e:	45a2      	cmp	sl, r4
 8006490:	db18      	blt.n	80064c4 <_strtol_l.constprop.0+0xb8>
 8006492:	2701      	movs	r7, #1
 8006494:	fb00 4003 	mla	r0, r0, r3, r4
 8006498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800649c:	e7ea      	b.n	8006474 <_strtol_l.constprop.0+0x68>
 800649e:	2c2b      	cmp	r4, #43	; 0x2b
 80064a0:	bf04      	itt	eq
 80064a2:	782c      	ldrbeq	r4, [r5, #0]
 80064a4:	1c85      	addeq	r5, r0, #2
 80064a6:	e7cd      	b.n	8006444 <_strtol_l.constprop.0+0x38>
 80064a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80064ac:	f1bc 0f19 	cmp.w	ip, #25
 80064b0:	d801      	bhi.n	80064b6 <_strtol_l.constprop.0+0xaa>
 80064b2:	3c37      	subs	r4, #55	; 0x37
 80064b4:	e7e4      	b.n	8006480 <_strtol_l.constprop.0+0x74>
 80064b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80064ba:	f1bc 0f19 	cmp.w	ip, #25
 80064be:	d804      	bhi.n	80064ca <_strtol_l.constprop.0+0xbe>
 80064c0:	3c57      	subs	r4, #87	; 0x57
 80064c2:	e7dd      	b.n	8006480 <_strtol_l.constprop.0+0x74>
 80064c4:	f04f 37ff 	mov.w	r7, #4294967295
 80064c8:	e7e6      	b.n	8006498 <_strtol_l.constprop.0+0x8c>
 80064ca:	2f00      	cmp	r7, #0
 80064cc:	da07      	bge.n	80064de <_strtol_l.constprop.0+0xd2>
 80064ce:	2322      	movs	r3, #34	; 0x22
 80064d0:	4670      	mov	r0, lr
 80064d2:	f8c8 3000 	str.w	r3, [r8]
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	d0a4      	beq.n	8006424 <_strtol_l.constprop.0+0x18>
 80064da:	1e69      	subs	r1, r5, #1
 80064dc:	e005      	b.n	80064ea <_strtol_l.constprop.0+0xde>
 80064de:	b106      	cbz	r6, 80064e2 <_strtol_l.constprop.0+0xd6>
 80064e0:	4240      	negs	r0, r0
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	d09e      	beq.n	8006424 <_strtol_l.constprop.0+0x18>
 80064e6:	2f00      	cmp	r7, #0
 80064e8:	d1f7      	bne.n	80064da <_strtol_l.constprop.0+0xce>
 80064ea:	6011      	str	r1, [r2, #0]
 80064ec:	e79a      	b.n	8006424 <_strtol_l.constprop.0+0x18>
 80064ee:	2430      	movs	r4, #48	; 0x30
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1b5      	bne.n	8006460 <_strtol_l.constprop.0+0x54>
 80064f4:	2308      	movs	r3, #8
 80064f6:	e7b3      	b.n	8006460 <_strtol_l.constprop.0+0x54>
 80064f8:	2c30      	cmp	r4, #48	; 0x30
 80064fa:	d0a9      	beq.n	8006450 <_strtol_l.constprop.0+0x44>
 80064fc:	230a      	movs	r3, #10
 80064fe:	e7af      	b.n	8006460 <_strtol_l.constprop.0+0x54>
 8006500:	08009629 	.word	0x08009629

08006504 <_strtol_r>:
 8006504:	f7ff bf82 	b.w	800640c <_strtol_l.constprop.0>

08006508 <quorem>:
 8006508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	6903      	ldr	r3, [r0, #16]
 800650e:	690c      	ldr	r4, [r1, #16]
 8006510:	4607      	mov	r7, r0
 8006512:	42a3      	cmp	r3, r4
 8006514:	f2c0 8082 	blt.w	800661c <quorem+0x114>
 8006518:	3c01      	subs	r4, #1
 800651a:	f100 0514 	add.w	r5, r0, #20
 800651e:	f101 0814 	add.w	r8, r1, #20
 8006522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800652c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006530:	3301      	adds	r3, #1
 8006532:	429a      	cmp	r2, r3
 8006534:	fbb2 f6f3 	udiv	r6, r2, r3
 8006538:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800653c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006540:	d331      	bcc.n	80065a6 <quorem+0x9e>
 8006542:	f04f 0e00 	mov.w	lr, #0
 8006546:	4640      	mov	r0, r8
 8006548:	46ac      	mov	ip, r5
 800654a:	46f2      	mov	sl, lr
 800654c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006550:	b293      	uxth	r3, r2
 8006552:	fb06 e303 	mla	r3, r6, r3, lr
 8006556:	0c12      	lsrs	r2, r2, #16
 8006558:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800655c:	b29b      	uxth	r3, r3
 800655e:	fb06 e202 	mla	r2, r6, r2, lr
 8006562:	ebaa 0303 	sub.w	r3, sl, r3
 8006566:	f8dc a000 	ldr.w	sl, [ip]
 800656a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800656e:	fa1f fa8a 	uxth.w	sl, sl
 8006572:	4453      	add	r3, sl
 8006574:	f8dc a000 	ldr.w	sl, [ip]
 8006578:	b292      	uxth	r2, r2
 800657a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800657e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006582:	b29b      	uxth	r3, r3
 8006584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006588:	4581      	cmp	r9, r0
 800658a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800658e:	f84c 3b04 	str.w	r3, [ip], #4
 8006592:	d2db      	bcs.n	800654c <quorem+0x44>
 8006594:	f855 300b 	ldr.w	r3, [r5, fp]
 8006598:	b92b      	cbnz	r3, 80065a6 <quorem+0x9e>
 800659a:	9b01      	ldr	r3, [sp, #4]
 800659c:	3b04      	subs	r3, #4
 800659e:	429d      	cmp	r5, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	d32f      	bcc.n	8006604 <quorem+0xfc>
 80065a4:	613c      	str	r4, [r7, #16]
 80065a6:	4638      	mov	r0, r7
 80065a8:	f001 fc90 	bl	8007ecc <__mcmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	db25      	blt.n	80065fc <quorem+0xf4>
 80065b0:	4628      	mov	r0, r5
 80065b2:	f04f 0c00 	mov.w	ip, #0
 80065b6:	3601      	adds	r6, #1
 80065b8:	f858 1b04 	ldr.w	r1, [r8], #4
 80065bc:	f8d0 e000 	ldr.w	lr, [r0]
 80065c0:	b28b      	uxth	r3, r1
 80065c2:	ebac 0303 	sub.w	r3, ip, r3
 80065c6:	fa1f f28e 	uxth.w	r2, lr
 80065ca:	4413      	add	r3, r2
 80065cc:	0c0a      	lsrs	r2, r1, #16
 80065ce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065dc:	45c1      	cmp	r9, r8
 80065de:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065e2:	f840 3b04 	str.w	r3, [r0], #4
 80065e6:	d2e7      	bcs.n	80065b8 <quorem+0xb0>
 80065e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065f0:	b922      	cbnz	r2, 80065fc <quorem+0xf4>
 80065f2:	3b04      	subs	r3, #4
 80065f4:	429d      	cmp	r5, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	d30a      	bcc.n	8006610 <quorem+0x108>
 80065fa:	613c      	str	r4, [r7, #16]
 80065fc:	4630      	mov	r0, r6
 80065fe:	b003      	add	sp, #12
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	3b04      	subs	r3, #4
 8006608:	2a00      	cmp	r2, #0
 800660a:	d1cb      	bne.n	80065a4 <quorem+0x9c>
 800660c:	3c01      	subs	r4, #1
 800660e:	e7c6      	b.n	800659e <quorem+0x96>
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	3b04      	subs	r3, #4
 8006614:	2a00      	cmp	r2, #0
 8006616:	d1f0      	bne.n	80065fa <quorem+0xf2>
 8006618:	3c01      	subs	r4, #1
 800661a:	e7eb      	b.n	80065f4 <quorem+0xec>
 800661c:	2000      	movs	r0, #0
 800661e:	e7ee      	b.n	80065fe <quorem+0xf6>

08006620 <_dtoa_r>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	4616      	mov	r6, r2
 8006626:	461f      	mov	r7, r3
 8006628:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800662a:	b099      	sub	sp, #100	; 0x64
 800662c:	4605      	mov	r5, r0
 800662e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006632:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006636:	b974      	cbnz	r4, 8006656 <_dtoa_r+0x36>
 8006638:	2010      	movs	r0, #16
 800663a:	f001 f949 	bl	80078d0 <malloc>
 800663e:	4602      	mov	r2, r0
 8006640:	6268      	str	r0, [r5, #36]	; 0x24
 8006642:	b920      	cbnz	r0, 800664e <_dtoa_r+0x2e>
 8006644:	21ea      	movs	r1, #234	; 0xea
 8006646:	4ba8      	ldr	r3, [pc, #672]	; (80068e8 <_dtoa_r+0x2c8>)
 8006648:	48a8      	ldr	r0, [pc, #672]	; (80068ec <_dtoa_r+0x2cc>)
 800664a:	f002 f8b3 	bl	80087b4 <__assert_func>
 800664e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006652:	6004      	str	r4, [r0, #0]
 8006654:	60c4      	str	r4, [r0, #12]
 8006656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	b151      	cbz	r1, 8006672 <_dtoa_r+0x52>
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	2301      	movs	r3, #1
 8006660:	4093      	lsls	r3, r2
 8006662:	604a      	str	r2, [r1, #4]
 8006664:	608b      	str	r3, [r1, #8]
 8006666:	4628      	mov	r0, r5
 8006668:	f001 f9a8 	bl	80079bc <_Bfree>
 800666c:	2200      	movs	r2, #0
 800666e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	1e3b      	subs	r3, r7, #0
 8006674:	bfaf      	iteee	ge
 8006676:	2300      	movge	r3, #0
 8006678:	2201      	movlt	r2, #1
 800667a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800667e:	9305      	strlt	r3, [sp, #20]
 8006680:	bfa8      	it	ge
 8006682:	f8c8 3000 	strge.w	r3, [r8]
 8006686:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800668a:	4b99      	ldr	r3, [pc, #612]	; (80068f0 <_dtoa_r+0x2d0>)
 800668c:	bfb8      	it	lt
 800668e:	f8c8 2000 	strlt.w	r2, [r8]
 8006692:	ea33 0309 	bics.w	r3, r3, r9
 8006696:	d119      	bne.n	80066cc <_dtoa_r+0xac>
 8006698:	f242 730f 	movw	r3, #9999	; 0x270f
 800669c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066a4:	4333      	orrs	r3, r6
 80066a6:	f000 857f 	beq.w	80071a8 <_dtoa_r+0xb88>
 80066aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066ac:	b953      	cbnz	r3, 80066c4 <_dtoa_r+0xa4>
 80066ae:	4b91      	ldr	r3, [pc, #580]	; (80068f4 <_dtoa_r+0x2d4>)
 80066b0:	e022      	b.n	80066f8 <_dtoa_r+0xd8>
 80066b2:	4b91      	ldr	r3, [pc, #580]	; (80068f8 <_dtoa_r+0x2d8>)
 80066b4:	9303      	str	r3, [sp, #12]
 80066b6:	3308      	adds	r3, #8
 80066b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	9803      	ldr	r0, [sp, #12]
 80066be:	b019      	add	sp, #100	; 0x64
 80066c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c4:	4b8b      	ldr	r3, [pc, #556]	; (80068f4 <_dtoa_r+0x2d4>)
 80066c6:	9303      	str	r3, [sp, #12]
 80066c8:	3303      	adds	r3, #3
 80066ca:	e7f5      	b.n	80066b8 <_dtoa_r+0x98>
 80066cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80066d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	f7fa f964 	bl	80009a8 <__aeabi_dcmpeq>
 80066e0:	4680      	mov	r8, r0
 80066e2:	b158      	cbz	r0, 80066fc <_dtoa_r+0xdc>
 80066e4:	2301      	movs	r3, #1
 80066e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8558 	beq.w	80071a2 <_dtoa_r+0xb82>
 80066f2:	4882      	ldr	r0, [pc, #520]	; (80068fc <_dtoa_r+0x2dc>)
 80066f4:	6018      	str	r0, [r3, #0]
 80066f6:	1e43      	subs	r3, r0, #1
 80066f8:	9303      	str	r3, [sp, #12]
 80066fa:	e7df      	b.n	80066bc <_dtoa_r+0x9c>
 80066fc:	ab16      	add	r3, sp, #88	; 0x58
 80066fe:	9301      	str	r3, [sp, #4]
 8006700:	ab17      	add	r3, sp, #92	; 0x5c
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	4628      	mov	r0, r5
 8006706:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800670a:	f001 fd01 	bl	8008110 <__d2b>
 800670e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006712:	4683      	mov	fp, r0
 8006714:	2c00      	cmp	r4, #0
 8006716:	d07f      	beq.n	8006818 <_dtoa_r+0x1f8>
 8006718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800671c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800671e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006726:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800672a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800672e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006732:	2200      	movs	r2, #0
 8006734:	4b72      	ldr	r3, [pc, #456]	; (8006900 <_dtoa_r+0x2e0>)
 8006736:	f7f9 fd17 	bl	8000168 <__aeabi_dsub>
 800673a:	a365      	add	r3, pc, #404	; (adr r3, 80068d0 <_dtoa_r+0x2b0>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f7f9 feca 	bl	80004d8 <__aeabi_dmul>
 8006744:	a364      	add	r3, pc, #400	; (adr r3, 80068d8 <_dtoa_r+0x2b8>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f7f9 fd0f 	bl	800016c <__adddf3>
 800674e:	4606      	mov	r6, r0
 8006750:	4620      	mov	r0, r4
 8006752:	460f      	mov	r7, r1
 8006754:	f7f9 fe56 	bl	8000404 <__aeabi_i2d>
 8006758:	a361      	add	r3, pc, #388	; (adr r3, 80068e0 <_dtoa_r+0x2c0>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 febb 	bl	80004d8 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4630      	mov	r0, r6
 8006768:	4639      	mov	r1, r7
 800676a:	f7f9 fcff 	bl	800016c <__adddf3>
 800676e:	4606      	mov	r6, r0
 8006770:	460f      	mov	r7, r1
 8006772:	f7fa f961 	bl	8000a38 <__aeabi_d2iz>
 8006776:	2200      	movs	r2, #0
 8006778:	4682      	mov	sl, r0
 800677a:	2300      	movs	r3, #0
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7fa f91c 	bl	80009bc <__aeabi_dcmplt>
 8006784:	b148      	cbz	r0, 800679a <_dtoa_r+0x17a>
 8006786:	4650      	mov	r0, sl
 8006788:	f7f9 fe3c 	bl	8000404 <__aeabi_i2d>
 800678c:	4632      	mov	r2, r6
 800678e:	463b      	mov	r3, r7
 8006790:	f7fa f90a 	bl	80009a8 <__aeabi_dcmpeq>
 8006794:	b908      	cbnz	r0, 800679a <_dtoa_r+0x17a>
 8006796:	f10a 3aff 	add.w	sl, sl, #4294967295
 800679a:	f1ba 0f16 	cmp.w	sl, #22
 800679e:	d858      	bhi.n	8006852 <_dtoa_r+0x232>
 80067a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067a4:	4b57      	ldr	r3, [pc, #348]	; (8006904 <_dtoa_r+0x2e4>)
 80067a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ae:	f7fa f905 	bl	80009bc <__aeabi_dcmplt>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d04f      	beq.n	8006856 <_dtoa_r+0x236>
 80067b6:	2300      	movs	r3, #0
 80067b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80067be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067c0:	1b1c      	subs	r4, r3, r4
 80067c2:	1e63      	subs	r3, r4, #1
 80067c4:	9309      	str	r3, [sp, #36]	; 0x24
 80067c6:	bf49      	itett	mi
 80067c8:	f1c4 0301 	rsbmi	r3, r4, #1
 80067cc:	2300      	movpl	r3, #0
 80067ce:	9306      	strmi	r3, [sp, #24]
 80067d0:	2300      	movmi	r3, #0
 80067d2:	bf54      	ite	pl
 80067d4:	9306      	strpl	r3, [sp, #24]
 80067d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80067d8:	f1ba 0f00 	cmp.w	sl, #0
 80067dc:	db3d      	blt.n	800685a <_dtoa_r+0x23a>
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80067e4:	4453      	add	r3, sl
 80067e6:	9309      	str	r3, [sp, #36]	; 0x24
 80067e8:	2300      	movs	r3, #0
 80067ea:	930a      	str	r3, [sp, #40]	; 0x28
 80067ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067ee:	2b09      	cmp	r3, #9
 80067f0:	f200 808c 	bhi.w	800690c <_dtoa_r+0x2ec>
 80067f4:	2b05      	cmp	r3, #5
 80067f6:	bfc4      	itt	gt
 80067f8:	3b04      	subgt	r3, #4
 80067fa:	9322      	strgt	r3, [sp, #136]	; 0x88
 80067fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067fe:	bfc8      	it	gt
 8006800:	2400      	movgt	r4, #0
 8006802:	f1a3 0302 	sub.w	r3, r3, #2
 8006806:	bfd8      	it	le
 8006808:	2401      	movle	r4, #1
 800680a:	2b03      	cmp	r3, #3
 800680c:	f200 808a 	bhi.w	8006924 <_dtoa_r+0x304>
 8006810:	e8df f003 	tbb	[pc, r3]
 8006814:	5b4d4f2d 	.word	0x5b4d4f2d
 8006818:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800681c:	441c      	add	r4, r3
 800681e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006822:	2b20      	cmp	r3, #32
 8006824:	bfc3      	ittte	gt
 8006826:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800682a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800682e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006832:	f1c3 0320 	rsble	r3, r3, #32
 8006836:	bfc6      	itte	gt
 8006838:	fa26 f000 	lsrgt.w	r0, r6, r0
 800683c:	4318      	orrgt	r0, r3
 800683e:	fa06 f003 	lslle.w	r0, r6, r3
 8006842:	f7f9 fdcf 	bl	80003e4 <__aeabi_ui2d>
 8006846:	2301      	movs	r3, #1
 8006848:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800684c:	3c01      	subs	r4, #1
 800684e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006850:	e76f      	b.n	8006732 <_dtoa_r+0x112>
 8006852:	2301      	movs	r3, #1
 8006854:	e7b2      	b.n	80067bc <_dtoa_r+0x19c>
 8006856:	900f      	str	r0, [sp, #60]	; 0x3c
 8006858:	e7b1      	b.n	80067be <_dtoa_r+0x19e>
 800685a:	9b06      	ldr	r3, [sp, #24]
 800685c:	eba3 030a 	sub.w	r3, r3, sl
 8006860:	9306      	str	r3, [sp, #24]
 8006862:	f1ca 0300 	rsb	r3, sl, #0
 8006866:	930a      	str	r3, [sp, #40]	; 0x28
 8006868:	2300      	movs	r3, #0
 800686a:	930e      	str	r3, [sp, #56]	; 0x38
 800686c:	e7be      	b.n	80067ec <_dtoa_r+0x1cc>
 800686e:	2300      	movs	r3, #0
 8006870:	930b      	str	r3, [sp, #44]	; 0x2c
 8006872:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006874:	2b00      	cmp	r3, #0
 8006876:	dc58      	bgt.n	800692a <_dtoa_r+0x30a>
 8006878:	f04f 0901 	mov.w	r9, #1
 800687c:	464b      	mov	r3, r9
 800687e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006882:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006886:	2200      	movs	r2, #0
 8006888:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800688a:	6042      	str	r2, [r0, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	f102 0614 	add.w	r6, r2, #20
 8006892:	429e      	cmp	r6, r3
 8006894:	6841      	ldr	r1, [r0, #4]
 8006896:	d94e      	bls.n	8006936 <_dtoa_r+0x316>
 8006898:	4628      	mov	r0, r5
 800689a:	f001 f84f 	bl	800793c <_Balloc>
 800689e:	9003      	str	r0, [sp, #12]
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d14c      	bne.n	800693e <_dtoa_r+0x31e>
 80068a4:	4602      	mov	r2, r0
 80068a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068aa:	4b17      	ldr	r3, [pc, #92]	; (8006908 <_dtoa_r+0x2e8>)
 80068ac:	e6cc      	b.n	8006648 <_dtoa_r+0x28>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e7de      	b.n	8006870 <_dtoa_r+0x250>
 80068b2:	2300      	movs	r3, #0
 80068b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80068b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068b8:	eb0a 0903 	add.w	r9, sl, r3
 80068bc:	f109 0301 	add.w	r3, r9, #1
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	9308      	str	r3, [sp, #32]
 80068c4:	bfb8      	it	lt
 80068c6:	2301      	movlt	r3, #1
 80068c8:	e7dd      	b.n	8006886 <_dtoa_r+0x266>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e7f2      	b.n	80068b4 <_dtoa_r+0x294>
 80068ce:	bf00      	nop
 80068d0:	636f4361 	.word	0x636f4361
 80068d4:	3fd287a7 	.word	0x3fd287a7
 80068d8:	8b60c8b3 	.word	0x8b60c8b3
 80068dc:	3fc68a28 	.word	0x3fc68a28
 80068e0:	509f79fb 	.word	0x509f79fb
 80068e4:	3fd34413 	.word	0x3fd34413
 80068e8:	08009736 	.word	0x08009736
 80068ec:	0800974d 	.word	0x0800974d
 80068f0:	7ff00000 	.word	0x7ff00000
 80068f4:	08009732 	.word	0x08009732
 80068f8:	08009729 	.word	0x08009729
 80068fc:	080095a9 	.word	0x080095a9
 8006900:	3ff80000 	.word	0x3ff80000
 8006904:	080098b8 	.word	0x080098b8
 8006908:	080097a8 	.word	0x080097a8
 800690c:	2401      	movs	r4, #1
 800690e:	2300      	movs	r3, #0
 8006910:	940b      	str	r4, [sp, #44]	; 0x2c
 8006912:	9322      	str	r3, [sp, #136]	; 0x88
 8006914:	f04f 39ff 	mov.w	r9, #4294967295
 8006918:	2200      	movs	r2, #0
 800691a:	2312      	movs	r3, #18
 800691c:	f8cd 9020 	str.w	r9, [sp, #32]
 8006920:	9223      	str	r2, [sp, #140]	; 0x8c
 8006922:	e7b0      	b.n	8006886 <_dtoa_r+0x266>
 8006924:	2301      	movs	r3, #1
 8006926:	930b      	str	r3, [sp, #44]	; 0x2c
 8006928:	e7f4      	b.n	8006914 <_dtoa_r+0x2f4>
 800692a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800692e:	464b      	mov	r3, r9
 8006930:	f8cd 9020 	str.w	r9, [sp, #32]
 8006934:	e7a7      	b.n	8006886 <_dtoa_r+0x266>
 8006936:	3101      	adds	r1, #1
 8006938:	6041      	str	r1, [r0, #4]
 800693a:	0052      	lsls	r2, r2, #1
 800693c:	e7a7      	b.n	800688e <_dtoa_r+0x26e>
 800693e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006940:	9a03      	ldr	r2, [sp, #12]
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	9b08      	ldr	r3, [sp, #32]
 8006946:	2b0e      	cmp	r3, #14
 8006948:	f200 80a8 	bhi.w	8006a9c <_dtoa_r+0x47c>
 800694c:	2c00      	cmp	r4, #0
 800694e:	f000 80a5 	beq.w	8006a9c <_dtoa_r+0x47c>
 8006952:	f1ba 0f00 	cmp.w	sl, #0
 8006956:	dd34      	ble.n	80069c2 <_dtoa_r+0x3a2>
 8006958:	4a9a      	ldr	r2, [pc, #616]	; (8006bc4 <_dtoa_r+0x5a4>)
 800695a:	f00a 030f 	and.w	r3, sl, #15
 800695e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006962:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006966:	e9d3 3400 	ldrd	r3, r4, [r3]
 800696a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800696e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006972:	d016      	beq.n	80069a2 <_dtoa_r+0x382>
 8006974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006978:	4b93      	ldr	r3, [pc, #588]	; (8006bc8 <_dtoa_r+0x5a8>)
 800697a:	2703      	movs	r7, #3
 800697c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006980:	f7f9 fed4 	bl	800072c <__aeabi_ddiv>
 8006984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006988:	f004 040f 	and.w	r4, r4, #15
 800698c:	4e8e      	ldr	r6, [pc, #568]	; (8006bc8 <_dtoa_r+0x5a8>)
 800698e:	b954      	cbnz	r4, 80069a6 <_dtoa_r+0x386>
 8006990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006998:	f7f9 fec8 	bl	800072c <__aeabi_ddiv>
 800699c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a0:	e029      	b.n	80069f6 <_dtoa_r+0x3d6>
 80069a2:	2702      	movs	r7, #2
 80069a4:	e7f2      	b.n	800698c <_dtoa_r+0x36c>
 80069a6:	07e1      	lsls	r1, r4, #31
 80069a8:	d508      	bpl.n	80069bc <_dtoa_r+0x39c>
 80069aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069b2:	f7f9 fd91 	bl	80004d8 <__aeabi_dmul>
 80069b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069ba:	3701      	adds	r7, #1
 80069bc:	1064      	asrs	r4, r4, #1
 80069be:	3608      	adds	r6, #8
 80069c0:	e7e5      	b.n	800698e <_dtoa_r+0x36e>
 80069c2:	f000 80a5 	beq.w	8006b10 <_dtoa_r+0x4f0>
 80069c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069ca:	f1ca 0400 	rsb	r4, sl, #0
 80069ce:	4b7d      	ldr	r3, [pc, #500]	; (8006bc4 <_dtoa_r+0x5a4>)
 80069d0:	f004 020f 	and.w	r2, r4, #15
 80069d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f7f9 fd7c 	bl	80004d8 <__aeabi_dmul>
 80069e0:	2702      	movs	r7, #2
 80069e2:	2300      	movs	r3, #0
 80069e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069e8:	4e77      	ldr	r6, [pc, #476]	; (8006bc8 <_dtoa_r+0x5a8>)
 80069ea:	1124      	asrs	r4, r4, #4
 80069ec:	2c00      	cmp	r4, #0
 80069ee:	f040 8084 	bne.w	8006afa <_dtoa_r+0x4da>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1d2      	bne.n	800699c <_dtoa_r+0x37c>
 80069f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 808b 	beq.w	8006b14 <_dtoa_r+0x4f4>
 80069fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a02:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4b6f      	ldr	r3, [pc, #444]	; (8006bcc <_dtoa_r+0x5ac>)
 8006a0e:	f7f9 ffd5 	bl	80009bc <__aeabi_dcmplt>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d07e      	beq.n	8006b14 <_dtoa_r+0x4f4>
 8006a16:	9b08      	ldr	r3, [sp, #32]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d07b      	beq.n	8006b14 <_dtoa_r+0x4f4>
 8006a1c:	f1b9 0f00 	cmp.w	r9, #0
 8006a20:	dd38      	ble.n	8006a94 <_dtoa_r+0x474>
 8006a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a26:	2200      	movs	r2, #0
 8006a28:	4b69      	ldr	r3, [pc, #420]	; (8006bd0 <_dtoa_r+0x5b0>)
 8006a2a:	f7f9 fd55 	bl	80004d8 <__aeabi_dmul>
 8006a2e:	464c      	mov	r4, r9
 8006a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a34:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006a38:	3701      	adds	r7, #1
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	f7f9 fce2 	bl	8000404 <__aeabi_i2d>
 8006a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a44:	f7f9 fd48 	bl	80004d8 <__aeabi_dmul>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4b62      	ldr	r3, [pc, #392]	; (8006bd4 <_dtoa_r+0x5b4>)
 8006a4c:	f7f9 fb8e 	bl	800016c <__adddf3>
 8006a50:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006a54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a58:	9611      	str	r6, [sp, #68]	; 0x44
 8006a5a:	2c00      	cmp	r4, #0
 8006a5c:	d15d      	bne.n	8006b1a <_dtoa_r+0x4fa>
 8006a5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a62:	2200      	movs	r2, #0
 8006a64:	4b5c      	ldr	r3, [pc, #368]	; (8006bd8 <_dtoa_r+0x5b8>)
 8006a66:	f7f9 fb7f 	bl	8000168 <__aeabi_dsub>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a72:	4633      	mov	r3, r6
 8006a74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a76:	f7f9 ffbf 	bl	80009f8 <__aeabi_dcmpgt>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f040 829c 	bne.w	8006fb8 <_dtoa_r+0x998>
 8006a80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a86:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a8a:	f7f9 ff97 	bl	80009bc <__aeabi_dcmplt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f040 8290 	bne.w	8006fb4 <_dtoa_r+0x994>
 8006a94:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f2c0 8152 	blt.w	8006d48 <_dtoa_r+0x728>
 8006aa4:	f1ba 0f0e 	cmp.w	sl, #14
 8006aa8:	f300 814e 	bgt.w	8006d48 <_dtoa_r+0x728>
 8006aac:	4b45      	ldr	r3, [pc, #276]	; (8006bc4 <_dtoa_r+0x5a4>)
 8006aae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ab2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ab6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006aba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f280 80db 	bge.w	8006c78 <_dtoa_r+0x658>
 8006ac2:	9b08      	ldr	r3, [sp, #32]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f300 80d7 	bgt.w	8006c78 <_dtoa_r+0x658>
 8006aca:	f040 8272 	bne.w	8006fb2 <_dtoa_r+0x992>
 8006ace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4b40      	ldr	r3, [pc, #256]	; (8006bd8 <_dtoa_r+0x5b8>)
 8006ad6:	f7f9 fcff 	bl	80004d8 <__aeabi_dmul>
 8006ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ade:	f7f9 ff81 	bl	80009e4 <__aeabi_dcmpge>
 8006ae2:	9c08      	ldr	r4, [sp, #32]
 8006ae4:	4626      	mov	r6, r4
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f040 8248 	bne.w	8006f7c <_dtoa_r+0x95c>
 8006aec:	2331      	movs	r3, #49	; 0x31
 8006aee:	9f03      	ldr	r7, [sp, #12]
 8006af0:	f10a 0a01 	add.w	sl, sl, #1
 8006af4:	f807 3b01 	strb.w	r3, [r7], #1
 8006af8:	e244      	b.n	8006f84 <_dtoa_r+0x964>
 8006afa:	07e2      	lsls	r2, r4, #31
 8006afc:	d505      	bpl.n	8006b0a <_dtoa_r+0x4ea>
 8006afe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	2301      	movs	r3, #1
 8006b08:	3701      	adds	r7, #1
 8006b0a:	1064      	asrs	r4, r4, #1
 8006b0c:	3608      	adds	r6, #8
 8006b0e:	e76d      	b.n	80069ec <_dtoa_r+0x3cc>
 8006b10:	2702      	movs	r7, #2
 8006b12:	e770      	b.n	80069f6 <_dtoa_r+0x3d6>
 8006b14:	46d0      	mov	r8, sl
 8006b16:	9c08      	ldr	r4, [sp, #32]
 8006b18:	e78f      	b.n	8006a3a <_dtoa_r+0x41a>
 8006b1a:	9903      	ldr	r1, [sp, #12]
 8006b1c:	4b29      	ldr	r3, [pc, #164]	; (8006bc4 <_dtoa_r+0x5a4>)
 8006b1e:	4421      	add	r1, r4
 8006b20:	9112      	str	r1, [sp, #72]	; 0x48
 8006b22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b28:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b30:	2900      	cmp	r1, #0
 8006b32:	d055      	beq.n	8006be0 <_dtoa_r+0x5c0>
 8006b34:	2000      	movs	r0, #0
 8006b36:	4929      	ldr	r1, [pc, #164]	; (8006bdc <_dtoa_r+0x5bc>)
 8006b38:	f7f9 fdf8 	bl	800072c <__aeabi_ddiv>
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	4632      	mov	r2, r6
 8006b40:	f7f9 fb12 	bl	8000168 <__aeabi_dsub>
 8006b44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b48:	9f03      	ldr	r7, [sp, #12]
 8006b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b4e:	f7f9 ff73 	bl	8000a38 <__aeabi_d2iz>
 8006b52:	4604      	mov	r4, r0
 8006b54:	f7f9 fc56 	bl	8000404 <__aeabi_i2d>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b60:	f7f9 fb02 	bl	8000168 <__aeabi_dsub>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	3430      	adds	r4, #48	; 0x30
 8006b6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b72:	f807 4b01 	strb.w	r4, [r7], #1
 8006b76:	f7f9 ff21 	bl	80009bc <__aeabi_dcmplt>
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d174      	bne.n	8006c68 <_dtoa_r+0x648>
 8006b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b82:	2000      	movs	r0, #0
 8006b84:	4911      	ldr	r1, [pc, #68]	; (8006bcc <_dtoa_r+0x5ac>)
 8006b86:	f7f9 faef 	bl	8000168 <__aeabi_dsub>
 8006b8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b8e:	f7f9 ff15 	bl	80009bc <__aeabi_dcmplt>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	f040 80b7 	bne.w	8006d06 <_dtoa_r+0x6e6>
 8006b98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b9a:	429f      	cmp	r7, r3
 8006b9c:	f43f af7a 	beq.w	8006a94 <_dtoa_r+0x474>
 8006ba0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <_dtoa_r+0x5b0>)
 8006ba8:	f7f9 fc96 	bl	80004d8 <__aeabi_dmul>
 8006bac:	2200      	movs	r2, #0
 8006bae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb6:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <_dtoa_r+0x5b0>)
 8006bb8:	f7f9 fc8e 	bl	80004d8 <__aeabi_dmul>
 8006bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc0:	e7c3      	b.n	8006b4a <_dtoa_r+0x52a>
 8006bc2:	bf00      	nop
 8006bc4:	080098b8 	.word	0x080098b8
 8006bc8:	08009890 	.word	0x08009890
 8006bcc:	3ff00000 	.word	0x3ff00000
 8006bd0:	40240000 	.word	0x40240000
 8006bd4:	401c0000 	.word	0x401c0000
 8006bd8:	40140000 	.word	0x40140000
 8006bdc:	3fe00000 	.word	0x3fe00000
 8006be0:	4630      	mov	r0, r6
 8006be2:	4639      	mov	r1, r7
 8006be4:	f7f9 fc78 	bl	80004d8 <__aeabi_dmul>
 8006be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bee:	9c03      	ldr	r4, [sp, #12]
 8006bf0:	9314      	str	r3, [sp, #80]	; 0x50
 8006bf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bf6:	f7f9 ff1f 	bl	8000a38 <__aeabi_d2iz>
 8006bfa:	9015      	str	r0, [sp, #84]	; 0x54
 8006bfc:	f7f9 fc02 	bl	8000404 <__aeabi_i2d>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c08:	f7f9 faae 	bl	8000168 <__aeabi_dsub>
 8006c0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c0e:	4606      	mov	r6, r0
 8006c10:	3330      	adds	r3, #48	; 0x30
 8006c12:	f804 3b01 	strb.w	r3, [r4], #1
 8006c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c18:	460f      	mov	r7, r1
 8006c1a:	429c      	cmp	r4, r3
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	d124      	bne.n	8006c6c <_dtoa_r+0x64c>
 8006c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c26:	4bb0      	ldr	r3, [pc, #704]	; (8006ee8 <_dtoa_r+0x8c8>)
 8006c28:	f7f9 faa0 	bl	800016c <__adddf3>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4630      	mov	r0, r6
 8006c32:	4639      	mov	r1, r7
 8006c34:	f7f9 fee0 	bl	80009f8 <__aeabi_dcmpgt>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d163      	bne.n	8006d04 <_dtoa_r+0x6e4>
 8006c3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c40:	2000      	movs	r0, #0
 8006c42:	49a9      	ldr	r1, [pc, #676]	; (8006ee8 <_dtoa_r+0x8c8>)
 8006c44:	f7f9 fa90 	bl	8000168 <__aeabi_dsub>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	4639      	mov	r1, r7
 8006c50:	f7f9 feb4 	bl	80009bc <__aeabi_dcmplt>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	f43f af1d 	beq.w	8006a94 <_dtoa_r+0x474>
 8006c5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006c5c:	1e7b      	subs	r3, r7, #1
 8006c5e:	9314      	str	r3, [sp, #80]	; 0x50
 8006c60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	d0f8      	beq.n	8006c5a <_dtoa_r+0x63a>
 8006c68:	46c2      	mov	sl, r8
 8006c6a:	e03b      	b.n	8006ce4 <_dtoa_r+0x6c4>
 8006c6c:	4b9f      	ldr	r3, [pc, #636]	; (8006eec <_dtoa_r+0x8cc>)
 8006c6e:	f7f9 fc33 	bl	80004d8 <__aeabi_dmul>
 8006c72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c76:	e7bc      	b.n	8006bf2 <_dtoa_r+0x5d2>
 8006c78:	9f03      	ldr	r7, [sp, #12]
 8006c7a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 fd51 	bl	800072c <__aeabi_ddiv>
 8006c8a:	f7f9 fed5 	bl	8000a38 <__aeabi_d2iz>
 8006c8e:	4604      	mov	r4, r0
 8006c90:	f7f9 fbb8 	bl	8000404 <__aeabi_i2d>
 8006c94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c98:	f7f9 fc1e 	bl	80004d8 <__aeabi_dmul>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f7f9 fa60 	bl	8000168 <__aeabi_dsub>
 8006ca8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006cac:	f807 6b01 	strb.w	r6, [r7], #1
 8006cb0:	9e03      	ldr	r6, [sp, #12]
 8006cb2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006cb6:	1bbe      	subs	r6, r7, r6
 8006cb8:	45b4      	cmp	ip, r6
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	d136      	bne.n	8006d2e <_dtoa_r+0x70e>
 8006cc0:	f7f9 fa54 	bl	800016c <__adddf3>
 8006cc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cc8:	4680      	mov	r8, r0
 8006cca:	4689      	mov	r9, r1
 8006ccc:	f7f9 fe94 	bl	80009f8 <__aeabi_dcmpgt>
 8006cd0:	bb58      	cbnz	r0, 8006d2a <_dtoa_r+0x70a>
 8006cd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	4649      	mov	r1, r9
 8006cda:	f7f9 fe65 	bl	80009a8 <__aeabi_dcmpeq>
 8006cde:	b108      	cbz	r0, 8006ce4 <_dtoa_r+0x6c4>
 8006ce0:	07e1      	lsls	r1, r4, #31
 8006ce2:	d422      	bmi.n	8006d2a <_dtoa_r+0x70a>
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	4659      	mov	r1, fp
 8006ce8:	f000 fe68 	bl	80079bc <_Bfree>
 8006cec:	2300      	movs	r3, #0
 8006cee:	703b      	strb	r3, [r7, #0]
 8006cf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006cf2:	f10a 0001 	add.w	r0, sl, #1
 8006cf6:	6018      	str	r0, [r3, #0]
 8006cf8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f43f acde 	beq.w	80066bc <_dtoa_r+0x9c>
 8006d00:	601f      	str	r7, [r3, #0]
 8006d02:	e4db      	b.n	80066bc <_dtoa_r+0x9c>
 8006d04:	4627      	mov	r7, r4
 8006d06:	463b      	mov	r3, r7
 8006d08:	461f      	mov	r7, r3
 8006d0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d0e:	2a39      	cmp	r2, #57	; 0x39
 8006d10:	d107      	bne.n	8006d22 <_dtoa_r+0x702>
 8006d12:	9a03      	ldr	r2, [sp, #12]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d1f7      	bne.n	8006d08 <_dtoa_r+0x6e8>
 8006d18:	2230      	movs	r2, #48	; 0x30
 8006d1a:	9903      	ldr	r1, [sp, #12]
 8006d1c:	f108 0801 	add.w	r8, r8, #1
 8006d20:	700a      	strb	r2, [r1, #0]
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	3201      	adds	r2, #1
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e79e      	b.n	8006c68 <_dtoa_r+0x648>
 8006d2a:	46d0      	mov	r8, sl
 8006d2c:	e7eb      	b.n	8006d06 <_dtoa_r+0x6e6>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	4b6e      	ldr	r3, [pc, #440]	; (8006eec <_dtoa_r+0x8cc>)
 8006d32:	f7f9 fbd1 	bl	80004d8 <__aeabi_dmul>
 8006d36:	2200      	movs	r2, #0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	4689      	mov	r9, r1
 8006d3e:	f7f9 fe33 	bl	80009a8 <__aeabi_dcmpeq>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d09b      	beq.n	8006c7e <_dtoa_r+0x65e>
 8006d46:	e7cd      	b.n	8006ce4 <_dtoa_r+0x6c4>
 8006d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	f000 80d0 	beq.w	8006ef0 <_dtoa_r+0x8d0>
 8006d50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d52:	2a01      	cmp	r2, #1
 8006d54:	f300 80ae 	bgt.w	8006eb4 <_dtoa_r+0x894>
 8006d58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d5a:	2a00      	cmp	r2, #0
 8006d5c:	f000 80a6 	beq.w	8006eac <_dtoa_r+0x88c>
 8006d60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d66:	9f06      	ldr	r7, [sp, #24]
 8006d68:	9a06      	ldr	r2, [sp, #24]
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	441a      	add	r2, r3
 8006d6e:	9206      	str	r2, [sp, #24]
 8006d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d72:	4628      	mov	r0, r5
 8006d74:	441a      	add	r2, r3
 8006d76:	9209      	str	r2, [sp, #36]	; 0x24
 8006d78:	f000 ff20 	bl	8007bbc <__i2b>
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	2f00      	cmp	r7, #0
 8006d80:	dd0c      	ble.n	8006d9c <_dtoa_r+0x77c>
 8006d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dd09      	ble.n	8006d9c <_dtoa_r+0x77c>
 8006d88:	42bb      	cmp	r3, r7
 8006d8a:	bfa8      	it	ge
 8006d8c:	463b      	movge	r3, r7
 8006d8e:	9a06      	ldr	r2, [sp, #24]
 8006d90:	1aff      	subs	r7, r7, r3
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	9206      	str	r2, [sp, #24]
 8006d96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d9e:	b1f3      	cbz	r3, 8006dde <_dtoa_r+0x7be>
 8006da0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80a8 	beq.w	8006ef8 <_dtoa_r+0x8d8>
 8006da8:	2c00      	cmp	r4, #0
 8006daa:	dd10      	ble.n	8006dce <_dtoa_r+0x7ae>
 8006dac:	4631      	mov	r1, r6
 8006dae:	4622      	mov	r2, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 ffc1 	bl	8007d38 <__pow5mult>
 8006db6:	465a      	mov	r2, fp
 8006db8:	4601      	mov	r1, r0
 8006dba:	4606      	mov	r6, r0
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 ff13 	bl	8007be8 <__multiply>
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 fdf8 	bl	80079bc <_Bfree>
 8006dcc:	46c3      	mov	fp, r8
 8006dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd0:	1b1a      	subs	r2, r3, r4
 8006dd2:	d004      	beq.n	8006dde <_dtoa_r+0x7be>
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f000 ffae 	bl	8007d38 <__pow5mult>
 8006ddc:	4683      	mov	fp, r0
 8006dde:	2101      	movs	r1, #1
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 feeb 	bl	8007bbc <__i2b>
 8006de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006de8:	4604      	mov	r4, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f340 8086 	ble.w	8006efc <_dtoa_r+0x8dc>
 8006df0:	461a      	mov	r2, r3
 8006df2:	4601      	mov	r1, r0
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 ff9f 	bl	8007d38 <__pow5mult>
 8006dfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	dd7f      	ble.n	8006f02 <_dtoa_r+0x8e2>
 8006e02:	f04f 0800 	mov.w	r8, #0
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e0c:	6918      	ldr	r0, [r3, #16]
 8006e0e:	f000 fe87 	bl	8007b20 <__hi0bits>
 8006e12:	f1c0 0020 	rsb	r0, r0, #32
 8006e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e18:	4418      	add	r0, r3
 8006e1a:	f010 001f 	ands.w	r0, r0, #31
 8006e1e:	f000 8092 	beq.w	8006f46 <_dtoa_r+0x926>
 8006e22:	f1c0 0320 	rsb	r3, r0, #32
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	f340 808a 	ble.w	8006f40 <_dtoa_r+0x920>
 8006e2c:	f1c0 001c 	rsb	r0, r0, #28
 8006e30:	9b06      	ldr	r3, [sp, #24]
 8006e32:	4407      	add	r7, r0
 8006e34:	4403      	add	r3, r0
 8006e36:	9306      	str	r3, [sp, #24]
 8006e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3a:	4403      	add	r3, r0
 8006e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3e:	9b06      	ldr	r3, [sp, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dd05      	ble.n	8006e50 <_dtoa_r+0x830>
 8006e44:	4659      	mov	r1, fp
 8006e46:	461a      	mov	r2, r3
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f000 ffcf 	bl	8007dec <__lshift>
 8006e4e:	4683      	mov	fp, r0
 8006e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dd05      	ble.n	8006e62 <_dtoa_r+0x842>
 8006e56:	4621      	mov	r1, r4
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f000 ffc6 	bl	8007dec <__lshift>
 8006e60:	4604      	mov	r4, r0
 8006e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d070      	beq.n	8006f4a <_dtoa_r+0x92a>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4658      	mov	r0, fp
 8006e6c:	f001 f82e 	bl	8007ecc <__mcmp>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	da6a      	bge.n	8006f4a <_dtoa_r+0x92a>
 8006e74:	2300      	movs	r3, #0
 8006e76:	4659      	mov	r1, fp
 8006e78:	220a      	movs	r2, #10
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	f000 fdc0 	bl	8007a00 <__multadd>
 8006e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e82:	4683      	mov	fp, r0
 8006e84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8194 	beq.w	80071b6 <_dtoa_r+0xb96>
 8006e8e:	4631      	mov	r1, r6
 8006e90:	2300      	movs	r3, #0
 8006e92:	220a      	movs	r2, #10
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 fdb3 	bl	8007a00 <__multadd>
 8006e9a:	f1b9 0f00 	cmp.w	r9, #0
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	f300 8093 	bgt.w	8006fca <_dtoa_r+0x9aa>
 8006ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	dc57      	bgt.n	8006f5a <_dtoa_r+0x93a>
 8006eaa:	e08e      	b.n	8006fca <_dtoa_r+0x9aa>
 8006eac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006eae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006eb2:	e757      	b.n	8006d64 <_dtoa_r+0x744>
 8006eb4:	9b08      	ldr	r3, [sp, #32]
 8006eb6:	1e5c      	subs	r4, r3, #1
 8006eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	bfb7      	itett	lt
 8006ebe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ec0:	1b1c      	subge	r4, r3, r4
 8006ec2:	1ae2      	sublt	r2, r4, r3
 8006ec4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006ec6:	bfbe      	ittt	lt
 8006ec8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006eca:	189b      	addlt	r3, r3, r2
 8006ecc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006ece:	9b08      	ldr	r3, [sp, #32]
 8006ed0:	bfb8      	it	lt
 8006ed2:	2400      	movlt	r4, #0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfbb      	ittet	lt
 8006ed8:	9b06      	ldrlt	r3, [sp, #24]
 8006eda:	9a08      	ldrlt	r2, [sp, #32]
 8006edc:	9f06      	ldrge	r7, [sp, #24]
 8006ede:	1a9f      	sublt	r7, r3, r2
 8006ee0:	bfac      	ite	ge
 8006ee2:	9b08      	ldrge	r3, [sp, #32]
 8006ee4:	2300      	movlt	r3, #0
 8006ee6:	e73f      	b.n	8006d68 <_dtoa_r+0x748>
 8006ee8:	3fe00000 	.word	0x3fe00000
 8006eec:	40240000 	.word	0x40240000
 8006ef0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ef2:	9f06      	ldr	r7, [sp, #24]
 8006ef4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ef6:	e742      	b.n	8006d7e <_dtoa_r+0x75e>
 8006ef8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006efa:	e76b      	b.n	8006dd4 <_dtoa_r+0x7b4>
 8006efc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	dc19      	bgt.n	8006f36 <_dtoa_r+0x916>
 8006f02:	9b04      	ldr	r3, [sp, #16]
 8006f04:	b9bb      	cbnz	r3, 8006f36 <_dtoa_r+0x916>
 8006f06:	9b05      	ldr	r3, [sp, #20]
 8006f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f0c:	b99b      	cbnz	r3, 8006f36 <_dtoa_r+0x916>
 8006f0e:	9b05      	ldr	r3, [sp, #20]
 8006f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f14:	0d1b      	lsrs	r3, r3, #20
 8006f16:	051b      	lsls	r3, r3, #20
 8006f18:	b183      	cbz	r3, 8006f3c <_dtoa_r+0x91c>
 8006f1a:	f04f 0801 	mov.w	r8, #1
 8006f1e:	9b06      	ldr	r3, [sp, #24]
 8006f20:	3301      	adds	r3, #1
 8006f22:	9306      	str	r3, [sp, #24]
 8006f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f26:	3301      	adds	r3, #1
 8006f28:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f47f af6a 	bne.w	8006e06 <_dtoa_r+0x7e6>
 8006f32:	2001      	movs	r0, #1
 8006f34:	e76f      	b.n	8006e16 <_dtoa_r+0x7f6>
 8006f36:	f04f 0800 	mov.w	r8, #0
 8006f3a:	e7f6      	b.n	8006f2a <_dtoa_r+0x90a>
 8006f3c:	4698      	mov	r8, r3
 8006f3e:	e7f4      	b.n	8006f2a <_dtoa_r+0x90a>
 8006f40:	f43f af7d 	beq.w	8006e3e <_dtoa_r+0x81e>
 8006f44:	4618      	mov	r0, r3
 8006f46:	301c      	adds	r0, #28
 8006f48:	e772      	b.n	8006e30 <_dtoa_r+0x810>
 8006f4a:	9b08      	ldr	r3, [sp, #32]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dc36      	bgt.n	8006fbe <_dtoa_r+0x99e>
 8006f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	dd33      	ble.n	8006fbe <_dtoa_r+0x99e>
 8006f56:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f5a:	f1b9 0f00 	cmp.w	r9, #0
 8006f5e:	d10d      	bne.n	8006f7c <_dtoa_r+0x95c>
 8006f60:	4621      	mov	r1, r4
 8006f62:	464b      	mov	r3, r9
 8006f64:	2205      	movs	r2, #5
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 fd4a 	bl	8007a00 <__multadd>
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4658      	mov	r0, fp
 8006f72:	f000 ffab 	bl	8007ecc <__mcmp>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f73f adb8 	bgt.w	8006aec <_dtoa_r+0x4cc>
 8006f7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f7e:	9f03      	ldr	r7, [sp, #12]
 8006f80:	ea6f 0a03 	mvn.w	sl, r3
 8006f84:	f04f 0800 	mov.w	r8, #0
 8006f88:	4621      	mov	r1, r4
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f000 fd16 	bl	80079bc <_Bfree>
 8006f90:	2e00      	cmp	r6, #0
 8006f92:	f43f aea7 	beq.w	8006ce4 <_dtoa_r+0x6c4>
 8006f96:	f1b8 0f00 	cmp.w	r8, #0
 8006f9a:	d005      	beq.n	8006fa8 <_dtoa_r+0x988>
 8006f9c:	45b0      	cmp	r8, r6
 8006f9e:	d003      	beq.n	8006fa8 <_dtoa_r+0x988>
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f000 fd0a 	bl	80079bc <_Bfree>
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 fd06 	bl	80079bc <_Bfree>
 8006fb0:	e698      	b.n	8006ce4 <_dtoa_r+0x6c4>
 8006fb2:	2400      	movs	r4, #0
 8006fb4:	4626      	mov	r6, r4
 8006fb6:	e7e1      	b.n	8006f7c <_dtoa_r+0x95c>
 8006fb8:	46c2      	mov	sl, r8
 8006fba:	4626      	mov	r6, r4
 8006fbc:	e596      	b.n	8006aec <_dtoa_r+0x4cc>
 8006fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80fd 	beq.w	80071c4 <_dtoa_r+0xba4>
 8006fca:	2f00      	cmp	r7, #0
 8006fcc:	dd05      	ble.n	8006fda <_dtoa_r+0x9ba>
 8006fce:	4631      	mov	r1, r6
 8006fd0:	463a      	mov	r2, r7
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 ff0a 	bl	8007dec <__lshift>
 8006fd8:	4606      	mov	r6, r0
 8006fda:	f1b8 0f00 	cmp.w	r8, #0
 8006fde:	d05c      	beq.n	800709a <_dtoa_r+0xa7a>
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	6871      	ldr	r1, [r6, #4]
 8006fe4:	f000 fcaa 	bl	800793c <_Balloc>
 8006fe8:	4607      	mov	r7, r0
 8006fea:	b928      	cbnz	r0, 8006ff8 <_dtoa_r+0x9d8>
 8006fec:	4602      	mov	r2, r0
 8006fee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ff2:	4b7f      	ldr	r3, [pc, #508]	; (80071f0 <_dtoa_r+0xbd0>)
 8006ff4:	f7ff bb28 	b.w	8006648 <_dtoa_r+0x28>
 8006ff8:	6932      	ldr	r2, [r6, #16]
 8006ffa:	f106 010c 	add.w	r1, r6, #12
 8006ffe:	3202      	adds	r2, #2
 8007000:	0092      	lsls	r2, r2, #2
 8007002:	300c      	adds	r0, #12
 8007004:	f000 fc8c 	bl	8007920 <memcpy>
 8007008:	2201      	movs	r2, #1
 800700a:	4639      	mov	r1, r7
 800700c:	4628      	mov	r0, r5
 800700e:	f000 feed 	bl	8007dec <__lshift>
 8007012:	46b0      	mov	r8, r6
 8007014:	4606      	mov	r6, r0
 8007016:	9b03      	ldr	r3, [sp, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	9308      	str	r3, [sp, #32]
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	444b      	add	r3, r9
 8007020:	930a      	str	r3, [sp, #40]	; 0x28
 8007022:	9b04      	ldr	r3, [sp, #16]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	9309      	str	r3, [sp, #36]	; 0x24
 800702a:	9b08      	ldr	r3, [sp, #32]
 800702c:	4621      	mov	r1, r4
 800702e:	3b01      	subs	r3, #1
 8007030:	4658      	mov	r0, fp
 8007032:	9304      	str	r3, [sp, #16]
 8007034:	f7ff fa68 	bl	8006508 <quorem>
 8007038:	4603      	mov	r3, r0
 800703a:	4641      	mov	r1, r8
 800703c:	3330      	adds	r3, #48	; 0x30
 800703e:	9006      	str	r0, [sp, #24]
 8007040:	4658      	mov	r0, fp
 8007042:	930b      	str	r3, [sp, #44]	; 0x2c
 8007044:	f000 ff42 	bl	8007ecc <__mcmp>
 8007048:	4632      	mov	r2, r6
 800704a:	4681      	mov	r9, r0
 800704c:	4621      	mov	r1, r4
 800704e:	4628      	mov	r0, r5
 8007050:	f000 ff58 	bl	8007f04 <__mdiff>
 8007054:	68c2      	ldr	r2, [r0, #12]
 8007056:	4607      	mov	r7, r0
 8007058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800705a:	bb02      	cbnz	r2, 800709e <_dtoa_r+0xa7e>
 800705c:	4601      	mov	r1, r0
 800705e:	4658      	mov	r0, fp
 8007060:	f000 ff34 	bl	8007ecc <__mcmp>
 8007064:	4602      	mov	r2, r0
 8007066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007068:	4639      	mov	r1, r7
 800706a:	4628      	mov	r0, r5
 800706c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007070:	f000 fca4 	bl	80079bc <_Bfree>
 8007074:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007078:	9f08      	ldr	r7, [sp, #32]
 800707a:	ea43 0102 	orr.w	r1, r3, r2
 800707e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007080:	430b      	orrs	r3, r1
 8007082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007084:	d10d      	bne.n	80070a2 <_dtoa_r+0xa82>
 8007086:	2b39      	cmp	r3, #57	; 0x39
 8007088:	d029      	beq.n	80070de <_dtoa_r+0xabe>
 800708a:	f1b9 0f00 	cmp.w	r9, #0
 800708e:	dd01      	ble.n	8007094 <_dtoa_r+0xa74>
 8007090:	9b06      	ldr	r3, [sp, #24]
 8007092:	3331      	adds	r3, #49	; 0x31
 8007094:	9a04      	ldr	r2, [sp, #16]
 8007096:	7013      	strb	r3, [r2, #0]
 8007098:	e776      	b.n	8006f88 <_dtoa_r+0x968>
 800709a:	4630      	mov	r0, r6
 800709c:	e7b9      	b.n	8007012 <_dtoa_r+0x9f2>
 800709e:	2201      	movs	r2, #1
 80070a0:	e7e2      	b.n	8007068 <_dtoa_r+0xa48>
 80070a2:	f1b9 0f00 	cmp.w	r9, #0
 80070a6:	db06      	blt.n	80070b6 <_dtoa_r+0xa96>
 80070a8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80070aa:	ea41 0909 	orr.w	r9, r1, r9
 80070ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070b0:	ea59 0101 	orrs.w	r1, r9, r1
 80070b4:	d120      	bne.n	80070f8 <_dtoa_r+0xad8>
 80070b6:	2a00      	cmp	r2, #0
 80070b8:	ddec      	ble.n	8007094 <_dtoa_r+0xa74>
 80070ba:	4659      	mov	r1, fp
 80070bc:	2201      	movs	r2, #1
 80070be:	4628      	mov	r0, r5
 80070c0:	9308      	str	r3, [sp, #32]
 80070c2:	f000 fe93 	bl	8007dec <__lshift>
 80070c6:	4621      	mov	r1, r4
 80070c8:	4683      	mov	fp, r0
 80070ca:	f000 feff 	bl	8007ecc <__mcmp>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	9b08      	ldr	r3, [sp, #32]
 80070d2:	dc02      	bgt.n	80070da <_dtoa_r+0xaba>
 80070d4:	d1de      	bne.n	8007094 <_dtoa_r+0xa74>
 80070d6:	07da      	lsls	r2, r3, #31
 80070d8:	d5dc      	bpl.n	8007094 <_dtoa_r+0xa74>
 80070da:	2b39      	cmp	r3, #57	; 0x39
 80070dc:	d1d8      	bne.n	8007090 <_dtoa_r+0xa70>
 80070de:	2339      	movs	r3, #57	; 0x39
 80070e0:	9a04      	ldr	r2, [sp, #16]
 80070e2:	7013      	strb	r3, [r2, #0]
 80070e4:	463b      	mov	r3, r7
 80070e6:	461f      	mov	r7, r3
 80070e8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	2a39      	cmp	r2, #57	; 0x39
 80070f0:	d050      	beq.n	8007194 <_dtoa_r+0xb74>
 80070f2:	3201      	adds	r2, #1
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	e747      	b.n	8006f88 <_dtoa_r+0x968>
 80070f8:	2a00      	cmp	r2, #0
 80070fa:	dd03      	ble.n	8007104 <_dtoa_r+0xae4>
 80070fc:	2b39      	cmp	r3, #57	; 0x39
 80070fe:	d0ee      	beq.n	80070de <_dtoa_r+0xabe>
 8007100:	3301      	adds	r3, #1
 8007102:	e7c7      	b.n	8007094 <_dtoa_r+0xa74>
 8007104:	9a08      	ldr	r2, [sp, #32]
 8007106:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007108:	f802 3c01 	strb.w	r3, [r2, #-1]
 800710c:	428a      	cmp	r2, r1
 800710e:	d02a      	beq.n	8007166 <_dtoa_r+0xb46>
 8007110:	4659      	mov	r1, fp
 8007112:	2300      	movs	r3, #0
 8007114:	220a      	movs	r2, #10
 8007116:	4628      	mov	r0, r5
 8007118:	f000 fc72 	bl	8007a00 <__multadd>
 800711c:	45b0      	cmp	r8, r6
 800711e:	4683      	mov	fp, r0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	f04f 020a 	mov.w	r2, #10
 8007128:	4641      	mov	r1, r8
 800712a:	4628      	mov	r0, r5
 800712c:	d107      	bne.n	800713e <_dtoa_r+0xb1e>
 800712e:	f000 fc67 	bl	8007a00 <__multadd>
 8007132:	4680      	mov	r8, r0
 8007134:	4606      	mov	r6, r0
 8007136:	9b08      	ldr	r3, [sp, #32]
 8007138:	3301      	adds	r3, #1
 800713a:	9308      	str	r3, [sp, #32]
 800713c:	e775      	b.n	800702a <_dtoa_r+0xa0a>
 800713e:	f000 fc5f 	bl	8007a00 <__multadd>
 8007142:	4631      	mov	r1, r6
 8007144:	4680      	mov	r8, r0
 8007146:	2300      	movs	r3, #0
 8007148:	220a      	movs	r2, #10
 800714a:	4628      	mov	r0, r5
 800714c:	f000 fc58 	bl	8007a00 <__multadd>
 8007150:	4606      	mov	r6, r0
 8007152:	e7f0      	b.n	8007136 <_dtoa_r+0xb16>
 8007154:	f1b9 0f00 	cmp.w	r9, #0
 8007158:	bfcc      	ite	gt
 800715a:	464f      	movgt	r7, r9
 800715c:	2701      	movle	r7, #1
 800715e:	f04f 0800 	mov.w	r8, #0
 8007162:	9a03      	ldr	r2, [sp, #12]
 8007164:	4417      	add	r7, r2
 8007166:	4659      	mov	r1, fp
 8007168:	2201      	movs	r2, #1
 800716a:	4628      	mov	r0, r5
 800716c:	9308      	str	r3, [sp, #32]
 800716e:	f000 fe3d 	bl	8007dec <__lshift>
 8007172:	4621      	mov	r1, r4
 8007174:	4683      	mov	fp, r0
 8007176:	f000 fea9 	bl	8007ecc <__mcmp>
 800717a:	2800      	cmp	r0, #0
 800717c:	dcb2      	bgt.n	80070e4 <_dtoa_r+0xac4>
 800717e:	d102      	bne.n	8007186 <_dtoa_r+0xb66>
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	07db      	lsls	r3, r3, #31
 8007184:	d4ae      	bmi.n	80070e4 <_dtoa_r+0xac4>
 8007186:	463b      	mov	r3, r7
 8007188:	461f      	mov	r7, r3
 800718a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800718e:	2a30      	cmp	r2, #48	; 0x30
 8007190:	d0fa      	beq.n	8007188 <_dtoa_r+0xb68>
 8007192:	e6f9      	b.n	8006f88 <_dtoa_r+0x968>
 8007194:	9a03      	ldr	r2, [sp, #12]
 8007196:	429a      	cmp	r2, r3
 8007198:	d1a5      	bne.n	80070e6 <_dtoa_r+0xac6>
 800719a:	2331      	movs	r3, #49	; 0x31
 800719c:	f10a 0a01 	add.w	sl, sl, #1
 80071a0:	e779      	b.n	8007096 <_dtoa_r+0xa76>
 80071a2:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <_dtoa_r+0xbd4>)
 80071a4:	f7ff baa8 	b.w	80066f8 <_dtoa_r+0xd8>
 80071a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f47f aa81 	bne.w	80066b2 <_dtoa_r+0x92>
 80071b0:	4b11      	ldr	r3, [pc, #68]	; (80071f8 <_dtoa_r+0xbd8>)
 80071b2:	f7ff baa1 	b.w	80066f8 <_dtoa_r+0xd8>
 80071b6:	f1b9 0f00 	cmp.w	r9, #0
 80071ba:	dc03      	bgt.n	80071c4 <_dtoa_r+0xba4>
 80071bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071be:	2b02      	cmp	r3, #2
 80071c0:	f73f aecb 	bgt.w	8006f5a <_dtoa_r+0x93a>
 80071c4:	9f03      	ldr	r7, [sp, #12]
 80071c6:	4621      	mov	r1, r4
 80071c8:	4658      	mov	r0, fp
 80071ca:	f7ff f99d 	bl	8006508 <quorem>
 80071ce:	9a03      	ldr	r2, [sp, #12]
 80071d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80071d4:	f807 3b01 	strb.w	r3, [r7], #1
 80071d8:	1aba      	subs	r2, r7, r2
 80071da:	4591      	cmp	r9, r2
 80071dc:	ddba      	ble.n	8007154 <_dtoa_r+0xb34>
 80071de:	4659      	mov	r1, fp
 80071e0:	2300      	movs	r3, #0
 80071e2:	220a      	movs	r2, #10
 80071e4:	4628      	mov	r0, r5
 80071e6:	f000 fc0b 	bl	8007a00 <__multadd>
 80071ea:	4683      	mov	fp, r0
 80071ec:	e7eb      	b.n	80071c6 <_dtoa_r+0xba6>
 80071ee:	bf00      	nop
 80071f0:	080097a8 	.word	0x080097a8
 80071f4:	080095a8 	.word	0x080095a8
 80071f8:	08009729 	.word	0x08009729

080071fc <rshift>:
 80071fc:	6903      	ldr	r3, [r0, #16]
 80071fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007202:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007206:	f100 0414 	add.w	r4, r0, #20
 800720a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800720e:	dd46      	ble.n	800729e <rshift+0xa2>
 8007210:	f011 011f 	ands.w	r1, r1, #31
 8007214:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007218:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800721c:	d10c      	bne.n	8007238 <rshift+0x3c>
 800721e:	4629      	mov	r1, r5
 8007220:	f100 0710 	add.w	r7, r0, #16
 8007224:	42b1      	cmp	r1, r6
 8007226:	d335      	bcc.n	8007294 <rshift+0x98>
 8007228:	1a9b      	subs	r3, r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	1eea      	subs	r2, r5, #3
 800722e:	4296      	cmp	r6, r2
 8007230:	bf38      	it	cc
 8007232:	2300      	movcc	r3, #0
 8007234:	4423      	add	r3, r4
 8007236:	e015      	b.n	8007264 <rshift+0x68>
 8007238:	46a1      	mov	r9, r4
 800723a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800723e:	f1c1 0820 	rsb	r8, r1, #32
 8007242:	40cf      	lsrs	r7, r1
 8007244:	f105 0e04 	add.w	lr, r5, #4
 8007248:	4576      	cmp	r6, lr
 800724a:	46f4      	mov	ip, lr
 800724c:	d816      	bhi.n	800727c <rshift+0x80>
 800724e:	1a9a      	subs	r2, r3, r2
 8007250:	0092      	lsls	r2, r2, #2
 8007252:	3a04      	subs	r2, #4
 8007254:	3501      	adds	r5, #1
 8007256:	42ae      	cmp	r6, r5
 8007258:	bf38      	it	cc
 800725a:	2200      	movcc	r2, #0
 800725c:	18a3      	adds	r3, r4, r2
 800725e:	50a7      	str	r7, [r4, r2]
 8007260:	b107      	cbz	r7, 8007264 <rshift+0x68>
 8007262:	3304      	adds	r3, #4
 8007264:	42a3      	cmp	r3, r4
 8007266:	eba3 0204 	sub.w	r2, r3, r4
 800726a:	bf08      	it	eq
 800726c:	2300      	moveq	r3, #0
 800726e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007272:	6102      	str	r2, [r0, #16]
 8007274:	bf08      	it	eq
 8007276:	6143      	streq	r3, [r0, #20]
 8007278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800727c:	f8dc c000 	ldr.w	ip, [ip]
 8007280:	fa0c fc08 	lsl.w	ip, ip, r8
 8007284:	ea4c 0707 	orr.w	r7, ip, r7
 8007288:	f849 7b04 	str.w	r7, [r9], #4
 800728c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007290:	40cf      	lsrs	r7, r1
 8007292:	e7d9      	b.n	8007248 <rshift+0x4c>
 8007294:	f851 cb04 	ldr.w	ip, [r1], #4
 8007298:	f847 cf04 	str.w	ip, [r7, #4]!
 800729c:	e7c2      	b.n	8007224 <rshift+0x28>
 800729e:	4623      	mov	r3, r4
 80072a0:	e7e0      	b.n	8007264 <rshift+0x68>

080072a2 <__hexdig_fun>:
 80072a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	d802      	bhi.n	80072b0 <__hexdig_fun+0xe>
 80072aa:	3820      	subs	r0, #32
 80072ac:	b2c0      	uxtb	r0, r0
 80072ae:	4770      	bx	lr
 80072b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80072b4:	2b05      	cmp	r3, #5
 80072b6:	d801      	bhi.n	80072bc <__hexdig_fun+0x1a>
 80072b8:	3847      	subs	r0, #71	; 0x47
 80072ba:	e7f7      	b.n	80072ac <__hexdig_fun+0xa>
 80072bc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	d801      	bhi.n	80072c8 <__hexdig_fun+0x26>
 80072c4:	3827      	subs	r0, #39	; 0x27
 80072c6:	e7f1      	b.n	80072ac <__hexdig_fun+0xa>
 80072c8:	2000      	movs	r0, #0
 80072ca:	4770      	bx	lr

080072cc <__gethex>:
 80072cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	b08b      	sub	sp, #44	; 0x2c
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	4bb2      	ldr	r3, [pc, #712]	; (80075a0 <__gethex+0x2d4>)
 80072d6:	9002      	str	r0, [sp, #8]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	468b      	mov	fp, r1
 80072dc:	4618      	mov	r0, r3
 80072de:	4690      	mov	r8, r2
 80072e0:	9303      	str	r3, [sp, #12]
 80072e2:	f7f8 ff35 	bl	8000150 <strlen>
 80072e6:	4682      	mov	sl, r0
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	f8db 2000 	ldr.w	r2, [fp]
 80072ee:	4403      	add	r3, r0
 80072f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80072f4:	9306      	str	r3, [sp, #24]
 80072f6:	1c93      	adds	r3, r2, #2
 80072f8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80072fc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007300:	32fe      	adds	r2, #254	; 0xfe
 8007302:	18d1      	adds	r1, r2, r3
 8007304:	461f      	mov	r7, r3
 8007306:	f813 0b01 	ldrb.w	r0, [r3], #1
 800730a:	9101      	str	r1, [sp, #4]
 800730c:	2830      	cmp	r0, #48	; 0x30
 800730e:	d0f8      	beq.n	8007302 <__gethex+0x36>
 8007310:	f7ff ffc7 	bl	80072a2 <__hexdig_fun>
 8007314:	4604      	mov	r4, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d13a      	bne.n	8007390 <__gethex+0xc4>
 800731a:	4652      	mov	r2, sl
 800731c:	4638      	mov	r0, r7
 800731e:	9903      	ldr	r1, [sp, #12]
 8007320:	f001 fa26 	bl	8008770 <strncmp>
 8007324:	4605      	mov	r5, r0
 8007326:	2800      	cmp	r0, #0
 8007328:	d166      	bne.n	80073f8 <__gethex+0x12c>
 800732a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800732e:	eb07 060a 	add.w	r6, r7, sl
 8007332:	f7ff ffb6 	bl	80072a2 <__hexdig_fun>
 8007336:	2800      	cmp	r0, #0
 8007338:	d060      	beq.n	80073fc <__gethex+0x130>
 800733a:	4633      	mov	r3, r6
 800733c:	7818      	ldrb	r0, [r3, #0]
 800733e:	461f      	mov	r7, r3
 8007340:	2830      	cmp	r0, #48	; 0x30
 8007342:	f103 0301 	add.w	r3, r3, #1
 8007346:	d0f9      	beq.n	800733c <__gethex+0x70>
 8007348:	f7ff ffab 	bl	80072a2 <__hexdig_fun>
 800734c:	2301      	movs	r3, #1
 800734e:	fab0 f480 	clz	r4, r0
 8007352:	4635      	mov	r5, r6
 8007354:	0964      	lsrs	r4, r4, #5
 8007356:	9301      	str	r3, [sp, #4]
 8007358:	463a      	mov	r2, r7
 800735a:	4616      	mov	r6, r2
 800735c:	7830      	ldrb	r0, [r6, #0]
 800735e:	3201      	adds	r2, #1
 8007360:	f7ff ff9f 	bl	80072a2 <__hexdig_fun>
 8007364:	2800      	cmp	r0, #0
 8007366:	d1f8      	bne.n	800735a <__gethex+0x8e>
 8007368:	4652      	mov	r2, sl
 800736a:	4630      	mov	r0, r6
 800736c:	9903      	ldr	r1, [sp, #12]
 800736e:	f001 f9ff 	bl	8008770 <strncmp>
 8007372:	b980      	cbnz	r0, 8007396 <__gethex+0xca>
 8007374:	b94d      	cbnz	r5, 800738a <__gethex+0xbe>
 8007376:	eb06 050a 	add.w	r5, r6, sl
 800737a:	462a      	mov	r2, r5
 800737c:	4616      	mov	r6, r2
 800737e:	7830      	ldrb	r0, [r6, #0]
 8007380:	3201      	adds	r2, #1
 8007382:	f7ff ff8e 	bl	80072a2 <__hexdig_fun>
 8007386:	2800      	cmp	r0, #0
 8007388:	d1f8      	bne.n	800737c <__gethex+0xb0>
 800738a:	1bad      	subs	r5, r5, r6
 800738c:	00ad      	lsls	r5, r5, #2
 800738e:	e004      	b.n	800739a <__gethex+0xce>
 8007390:	2400      	movs	r4, #0
 8007392:	4625      	mov	r5, r4
 8007394:	e7e0      	b.n	8007358 <__gethex+0x8c>
 8007396:	2d00      	cmp	r5, #0
 8007398:	d1f7      	bne.n	800738a <__gethex+0xbe>
 800739a:	7833      	ldrb	r3, [r6, #0]
 800739c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073a0:	2b50      	cmp	r3, #80	; 0x50
 80073a2:	d139      	bne.n	8007418 <__gethex+0x14c>
 80073a4:	7873      	ldrb	r3, [r6, #1]
 80073a6:	2b2b      	cmp	r3, #43	; 0x2b
 80073a8:	d02a      	beq.n	8007400 <__gethex+0x134>
 80073aa:	2b2d      	cmp	r3, #45	; 0x2d
 80073ac:	d02c      	beq.n	8007408 <__gethex+0x13c>
 80073ae:	f04f 0900 	mov.w	r9, #0
 80073b2:	1c71      	adds	r1, r6, #1
 80073b4:	7808      	ldrb	r0, [r1, #0]
 80073b6:	f7ff ff74 	bl	80072a2 <__hexdig_fun>
 80073ba:	1e43      	subs	r3, r0, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b18      	cmp	r3, #24
 80073c0:	d82a      	bhi.n	8007418 <__gethex+0x14c>
 80073c2:	f1a0 0210 	sub.w	r2, r0, #16
 80073c6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80073ca:	f7ff ff6a 	bl	80072a2 <__hexdig_fun>
 80073ce:	1e43      	subs	r3, r0, #1
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b18      	cmp	r3, #24
 80073d4:	d91b      	bls.n	800740e <__gethex+0x142>
 80073d6:	f1b9 0f00 	cmp.w	r9, #0
 80073da:	d000      	beq.n	80073de <__gethex+0x112>
 80073dc:	4252      	negs	r2, r2
 80073de:	4415      	add	r5, r2
 80073e0:	f8cb 1000 	str.w	r1, [fp]
 80073e4:	b1d4      	cbz	r4, 800741c <__gethex+0x150>
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bf14      	ite	ne
 80073ec:	2700      	movne	r7, #0
 80073ee:	2706      	moveq	r7, #6
 80073f0:	4638      	mov	r0, r7
 80073f2:	b00b      	add	sp, #44	; 0x2c
 80073f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f8:	463e      	mov	r6, r7
 80073fa:	4625      	mov	r5, r4
 80073fc:	2401      	movs	r4, #1
 80073fe:	e7cc      	b.n	800739a <__gethex+0xce>
 8007400:	f04f 0900 	mov.w	r9, #0
 8007404:	1cb1      	adds	r1, r6, #2
 8007406:	e7d5      	b.n	80073b4 <__gethex+0xe8>
 8007408:	f04f 0901 	mov.w	r9, #1
 800740c:	e7fa      	b.n	8007404 <__gethex+0x138>
 800740e:	230a      	movs	r3, #10
 8007410:	fb03 0202 	mla	r2, r3, r2, r0
 8007414:	3a10      	subs	r2, #16
 8007416:	e7d6      	b.n	80073c6 <__gethex+0xfa>
 8007418:	4631      	mov	r1, r6
 800741a:	e7e1      	b.n	80073e0 <__gethex+0x114>
 800741c:	4621      	mov	r1, r4
 800741e:	1bf3      	subs	r3, r6, r7
 8007420:	3b01      	subs	r3, #1
 8007422:	2b07      	cmp	r3, #7
 8007424:	dc0a      	bgt.n	800743c <__gethex+0x170>
 8007426:	9802      	ldr	r0, [sp, #8]
 8007428:	f000 fa88 	bl	800793c <_Balloc>
 800742c:	4604      	mov	r4, r0
 800742e:	b940      	cbnz	r0, 8007442 <__gethex+0x176>
 8007430:	4602      	mov	r2, r0
 8007432:	21de      	movs	r1, #222	; 0xde
 8007434:	4b5b      	ldr	r3, [pc, #364]	; (80075a4 <__gethex+0x2d8>)
 8007436:	485c      	ldr	r0, [pc, #368]	; (80075a8 <__gethex+0x2dc>)
 8007438:	f001 f9bc 	bl	80087b4 <__assert_func>
 800743c:	3101      	adds	r1, #1
 800743e:	105b      	asrs	r3, r3, #1
 8007440:	e7ef      	b.n	8007422 <__gethex+0x156>
 8007442:	f04f 0b00 	mov.w	fp, #0
 8007446:	f100 0914 	add.w	r9, r0, #20
 800744a:	f1ca 0301 	rsb	r3, sl, #1
 800744e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007452:	f8cd b004 	str.w	fp, [sp, #4]
 8007456:	9308      	str	r3, [sp, #32]
 8007458:	42b7      	cmp	r7, r6
 800745a:	d33f      	bcc.n	80074dc <__gethex+0x210>
 800745c:	9f04      	ldr	r7, [sp, #16]
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	f847 3b04 	str.w	r3, [r7], #4
 8007464:	eba7 0709 	sub.w	r7, r7, r9
 8007468:	10bf      	asrs	r7, r7, #2
 800746a:	6127      	str	r7, [r4, #16]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fb57 	bl	8007b20 <__hi0bits>
 8007472:	017f      	lsls	r7, r7, #5
 8007474:	f8d8 6000 	ldr.w	r6, [r8]
 8007478:	1a3f      	subs	r7, r7, r0
 800747a:	42b7      	cmp	r7, r6
 800747c:	dd62      	ble.n	8007544 <__gethex+0x278>
 800747e:	1bbf      	subs	r7, r7, r6
 8007480:	4639      	mov	r1, r7
 8007482:	4620      	mov	r0, r4
 8007484:	f000 fef1 	bl	800826a <__any_on>
 8007488:	4682      	mov	sl, r0
 800748a:	b1a8      	cbz	r0, 80074b8 <__gethex+0x1ec>
 800748c:	f04f 0a01 	mov.w	sl, #1
 8007490:	1e7b      	subs	r3, r7, #1
 8007492:	1159      	asrs	r1, r3, #5
 8007494:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007498:	f003 021f 	and.w	r2, r3, #31
 800749c:	fa0a f202 	lsl.w	r2, sl, r2
 80074a0:	420a      	tst	r2, r1
 80074a2:	d009      	beq.n	80074b8 <__gethex+0x1ec>
 80074a4:	4553      	cmp	r3, sl
 80074a6:	dd05      	ble.n	80074b4 <__gethex+0x1e8>
 80074a8:	4620      	mov	r0, r4
 80074aa:	1eb9      	subs	r1, r7, #2
 80074ac:	f000 fedd 	bl	800826a <__any_on>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	d144      	bne.n	800753e <__gethex+0x272>
 80074b4:	f04f 0a02 	mov.w	sl, #2
 80074b8:	4639      	mov	r1, r7
 80074ba:	4620      	mov	r0, r4
 80074bc:	f7ff fe9e 	bl	80071fc <rshift>
 80074c0:	443d      	add	r5, r7
 80074c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074c6:	42ab      	cmp	r3, r5
 80074c8:	da4a      	bge.n	8007560 <__gethex+0x294>
 80074ca:	4621      	mov	r1, r4
 80074cc:	9802      	ldr	r0, [sp, #8]
 80074ce:	f000 fa75 	bl	80079bc <_Bfree>
 80074d2:	2300      	movs	r3, #0
 80074d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074d6:	27a3      	movs	r7, #163	; 0xa3
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e789      	b.n	80073f0 <__gethex+0x124>
 80074dc:	1e73      	subs	r3, r6, #1
 80074de:	9a06      	ldr	r2, [sp, #24]
 80074e0:	9307      	str	r3, [sp, #28]
 80074e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d019      	beq.n	800751e <__gethex+0x252>
 80074ea:	f1bb 0f20 	cmp.w	fp, #32
 80074ee:	d107      	bne.n	8007500 <__gethex+0x234>
 80074f0:	9b04      	ldr	r3, [sp, #16]
 80074f2:	9a01      	ldr	r2, [sp, #4]
 80074f4:	f843 2b04 	str.w	r2, [r3], #4
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	2300      	movs	r3, #0
 80074fc:	469b      	mov	fp, r3
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007504:	f7ff fecd 	bl	80072a2 <__hexdig_fun>
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	f000 000f 	and.w	r0, r0, #15
 800750e:	fa00 f00b 	lsl.w	r0, r0, fp
 8007512:	4303      	orrs	r3, r0
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	f10b 0b04 	add.w	fp, fp, #4
 800751a:	9b07      	ldr	r3, [sp, #28]
 800751c:	e00d      	b.n	800753a <__gethex+0x26e>
 800751e:	9a08      	ldr	r2, [sp, #32]
 8007520:	1e73      	subs	r3, r6, #1
 8007522:	4413      	add	r3, r2
 8007524:	42bb      	cmp	r3, r7
 8007526:	d3e0      	bcc.n	80074ea <__gethex+0x21e>
 8007528:	4618      	mov	r0, r3
 800752a:	4652      	mov	r2, sl
 800752c:	9903      	ldr	r1, [sp, #12]
 800752e:	9309      	str	r3, [sp, #36]	; 0x24
 8007530:	f001 f91e 	bl	8008770 <strncmp>
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	2800      	cmp	r0, #0
 8007538:	d1d7      	bne.n	80074ea <__gethex+0x21e>
 800753a:	461e      	mov	r6, r3
 800753c:	e78c      	b.n	8007458 <__gethex+0x18c>
 800753e:	f04f 0a03 	mov.w	sl, #3
 8007542:	e7b9      	b.n	80074b8 <__gethex+0x1ec>
 8007544:	da09      	bge.n	800755a <__gethex+0x28e>
 8007546:	1bf7      	subs	r7, r6, r7
 8007548:	4621      	mov	r1, r4
 800754a:	463a      	mov	r2, r7
 800754c:	9802      	ldr	r0, [sp, #8]
 800754e:	f000 fc4d 	bl	8007dec <__lshift>
 8007552:	4604      	mov	r4, r0
 8007554:	1bed      	subs	r5, r5, r7
 8007556:	f100 0914 	add.w	r9, r0, #20
 800755a:	f04f 0a00 	mov.w	sl, #0
 800755e:	e7b0      	b.n	80074c2 <__gethex+0x1f6>
 8007560:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007564:	42a8      	cmp	r0, r5
 8007566:	dd72      	ble.n	800764e <__gethex+0x382>
 8007568:	1b45      	subs	r5, r0, r5
 800756a:	42ae      	cmp	r6, r5
 800756c:	dc35      	bgt.n	80075da <__gethex+0x30e>
 800756e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d029      	beq.n	80075ca <__gethex+0x2fe>
 8007576:	2b03      	cmp	r3, #3
 8007578:	d02b      	beq.n	80075d2 <__gethex+0x306>
 800757a:	2b01      	cmp	r3, #1
 800757c:	d11c      	bne.n	80075b8 <__gethex+0x2ec>
 800757e:	42ae      	cmp	r6, r5
 8007580:	d11a      	bne.n	80075b8 <__gethex+0x2ec>
 8007582:	2e01      	cmp	r6, #1
 8007584:	d112      	bne.n	80075ac <__gethex+0x2e0>
 8007586:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800758a:	9a05      	ldr	r2, [sp, #20]
 800758c:	2762      	movs	r7, #98	; 0x62
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	2301      	movs	r3, #1
 8007592:	6123      	str	r3, [r4, #16]
 8007594:	f8c9 3000 	str.w	r3, [r9]
 8007598:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800759a:	601c      	str	r4, [r3, #0]
 800759c:	e728      	b.n	80073f0 <__gethex+0x124>
 800759e:	bf00      	nop
 80075a0:	08009820 	.word	0x08009820
 80075a4:	080097a8 	.word	0x080097a8
 80075a8:	080097b9 	.word	0x080097b9
 80075ac:	4620      	mov	r0, r4
 80075ae:	1e71      	subs	r1, r6, #1
 80075b0:	f000 fe5b 	bl	800826a <__any_on>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d1e6      	bne.n	8007586 <__gethex+0x2ba>
 80075b8:	4621      	mov	r1, r4
 80075ba:	9802      	ldr	r0, [sp, #8]
 80075bc:	f000 f9fe 	bl	80079bc <_Bfree>
 80075c0:	2300      	movs	r3, #0
 80075c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80075c4:	2750      	movs	r7, #80	; 0x50
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	e712      	b.n	80073f0 <__gethex+0x124>
 80075ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1f3      	bne.n	80075b8 <__gethex+0x2ec>
 80075d0:	e7d9      	b.n	8007586 <__gethex+0x2ba>
 80075d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1d6      	bne.n	8007586 <__gethex+0x2ba>
 80075d8:	e7ee      	b.n	80075b8 <__gethex+0x2ec>
 80075da:	1e6f      	subs	r7, r5, #1
 80075dc:	f1ba 0f00 	cmp.w	sl, #0
 80075e0:	d132      	bne.n	8007648 <__gethex+0x37c>
 80075e2:	b127      	cbz	r7, 80075ee <__gethex+0x322>
 80075e4:	4639      	mov	r1, r7
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 fe3f 	bl	800826a <__any_on>
 80075ec:	4682      	mov	sl, r0
 80075ee:	2101      	movs	r1, #1
 80075f0:	117b      	asrs	r3, r7, #5
 80075f2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80075f6:	f007 071f 	and.w	r7, r7, #31
 80075fa:	fa01 f707 	lsl.w	r7, r1, r7
 80075fe:	421f      	tst	r7, r3
 8007600:	f04f 0702 	mov.w	r7, #2
 8007604:	4629      	mov	r1, r5
 8007606:	4620      	mov	r0, r4
 8007608:	bf18      	it	ne
 800760a:	f04a 0a02 	orrne.w	sl, sl, #2
 800760e:	1b76      	subs	r6, r6, r5
 8007610:	f7ff fdf4 	bl	80071fc <rshift>
 8007614:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007618:	f1ba 0f00 	cmp.w	sl, #0
 800761c:	d048      	beq.n	80076b0 <__gethex+0x3e4>
 800761e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d015      	beq.n	8007652 <__gethex+0x386>
 8007626:	2b03      	cmp	r3, #3
 8007628:	d017      	beq.n	800765a <__gethex+0x38e>
 800762a:	2b01      	cmp	r3, #1
 800762c:	d109      	bne.n	8007642 <__gethex+0x376>
 800762e:	f01a 0f02 	tst.w	sl, #2
 8007632:	d006      	beq.n	8007642 <__gethex+0x376>
 8007634:	f8d9 0000 	ldr.w	r0, [r9]
 8007638:	ea4a 0a00 	orr.w	sl, sl, r0
 800763c:	f01a 0f01 	tst.w	sl, #1
 8007640:	d10e      	bne.n	8007660 <__gethex+0x394>
 8007642:	f047 0710 	orr.w	r7, r7, #16
 8007646:	e033      	b.n	80076b0 <__gethex+0x3e4>
 8007648:	f04f 0a01 	mov.w	sl, #1
 800764c:	e7cf      	b.n	80075ee <__gethex+0x322>
 800764e:	2701      	movs	r7, #1
 8007650:	e7e2      	b.n	8007618 <__gethex+0x34c>
 8007652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007654:	f1c3 0301 	rsb	r3, r3, #1
 8007658:	9315      	str	r3, [sp, #84]	; 0x54
 800765a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0f0      	beq.n	8007642 <__gethex+0x376>
 8007660:	f04f 0c00 	mov.w	ip, #0
 8007664:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007668:	f104 0314 	add.w	r3, r4, #20
 800766c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007670:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007674:	4618      	mov	r0, r3
 8007676:	f853 2b04 	ldr.w	r2, [r3], #4
 800767a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800767e:	d01c      	beq.n	80076ba <__gethex+0x3ee>
 8007680:	3201      	adds	r2, #1
 8007682:	6002      	str	r2, [r0, #0]
 8007684:	2f02      	cmp	r7, #2
 8007686:	f104 0314 	add.w	r3, r4, #20
 800768a:	d13d      	bne.n	8007708 <__gethex+0x43c>
 800768c:	f8d8 2000 	ldr.w	r2, [r8]
 8007690:	3a01      	subs	r2, #1
 8007692:	42b2      	cmp	r2, r6
 8007694:	d10a      	bne.n	80076ac <__gethex+0x3e0>
 8007696:	2201      	movs	r2, #1
 8007698:	1171      	asrs	r1, r6, #5
 800769a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800769e:	f006 061f 	and.w	r6, r6, #31
 80076a2:	fa02 f606 	lsl.w	r6, r2, r6
 80076a6:	421e      	tst	r6, r3
 80076a8:	bf18      	it	ne
 80076aa:	4617      	movne	r7, r2
 80076ac:	f047 0720 	orr.w	r7, r7, #32
 80076b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076b2:	601c      	str	r4, [r3, #0]
 80076b4:	9b05      	ldr	r3, [sp, #20]
 80076b6:	601d      	str	r5, [r3, #0]
 80076b8:	e69a      	b.n	80073f0 <__gethex+0x124>
 80076ba:	4299      	cmp	r1, r3
 80076bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80076c0:	d8d8      	bhi.n	8007674 <__gethex+0x3a8>
 80076c2:	68a3      	ldr	r3, [r4, #8]
 80076c4:	459b      	cmp	fp, r3
 80076c6:	db17      	blt.n	80076f8 <__gethex+0x42c>
 80076c8:	6861      	ldr	r1, [r4, #4]
 80076ca:	9802      	ldr	r0, [sp, #8]
 80076cc:	3101      	adds	r1, #1
 80076ce:	f000 f935 	bl	800793c <_Balloc>
 80076d2:	4681      	mov	r9, r0
 80076d4:	b918      	cbnz	r0, 80076de <__gethex+0x412>
 80076d6:	4602      	mov	r2, r0
 80076d8:	2184      	movs	r1, #132	; 0x84
 80076da:	4b19      	ldr	r3, [pc, #100]	; (8007740 <__gethex+0x474>)
 80076dc:	e6ab      	b.n	8007436 <__gethex+0x16a>
 80076de:	6922      	ldr	r2, [r4, #16]
 80076e0:	f104 010c 	add.w	r1, r4, #12
 80076e4:	3202      	adds	r2, #2
 80076e6:	0092      	lsls	r2, r2, #2
 80076e8:	300c      	adds	r0, #12
 80076ea:	f000 f919 	bl	8007920 <memcpy>
 80076ee:	4621      	mov	r1, r4
 80076f0:	9802      	ldr	r0, [sp, #8]
 80076f2:	f000 f963 	bl	80079bc <_Bfree>
 80076f6:	464c      	mov	r4, r9
 80076f8:	6923      	ldr	r3, [r4, #16]
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	6122      	str	r2, [r4, #16]
 80076fe:	2201      	movs	r2, #1
 8007700:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007704:	615a      	str	r2, [r3, #20]
 8007706:	e7bd      	b.n	8007684 <__gethex+0x3b8>
 8007708:	6922      	ldr	r2, [r4, #16]
 800770a:	455a      	cmp	r2, fp
 800770c:	dd0b      	ble.n	8007726 <__gethex+0x45a>
 800770e:	2101      	movs	r1, #1
 8007710:	4620      	mov	r0, r4
 8007712:	f7ff fd73 	bl	80071fc <rshift>
 8007716:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800771a:	3501      	adds	r5, #1
 800771c:	42ab      	cmp	r3, r5
 800771e:	f6ff aed4 	blt.w	80074ca <__gethex+0x1fe>
 8007722:	2701      	movs	r7, #1
 8007724:	e7c2      	b.n	80076ac <__gethex+0x3e0>
 8007726:	f016 061f 	ands.w	r6, r6, #31
 800772a:	d0fa      	beq.n	8007722 <__gethex+0x456>
 800772c:	4453      	add	r3, sl
 800772e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007732:	f000 f9f5 	bl	8007b20 <__hi0bits>
 8007736:	f1c6 0620 	rsb	r6, r6, #32
 800773a:	42b0      	cmp	r0, r6
 800773c:	dbe7      	blt.n	800770e <__gethex+0x442>
 800773e:	e7f0      	b.n	8007722 <__gethex+0x456>
 8007740:	080097a8 	.word	0x080097a8

08007744 <L_shift>:
 8007744:	f1c2 0208 	rsb	r2, r2, #8
 8007748:	0092      	lsls	r2, r2, #2
 800774a:	b570      	push	{r4, r5, r6, lr}
 800774c:	f1c2 0620 	rsb	r6, r2, #32
 8007750:	6843      	ldr	r3, [r0, #4]
 8007752:	6804      	ldr	r4, [r0, #0]
 8007754:	fa03 f506 	lsl.w	r5, r3, r6
 8007758:	432c      	orrs	r4, r5
 800775a:	40d3      	lsrs	r3, r2
 800775c:	6004      	str	r4, [r0, #0]
 800775e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007762:	4288      	cmp	r0, r1
 8007764:	d3f4      	bcc.n	8007750 <L_shift+0xc>
 8007766:	bd70      	pop	{r4, r5, r6, pc}

08007768 <__match>:
 8007768:	b530      	push	{r4, r5, lr}
 800776a:	6803      	ldr	r3, [r0, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007772:	b914      	cbnz	r4, 800777a <__match+0x12>
 8007774:	6003      	str	r3, [r0, #0]
 8007776:	2001      	movs	r0, #1
 8007778:	bd30      	pop	{r4, r5, pc}
 800777a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800777e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007782:	2d19      	cmp	r5, #25
 8007784:	bf98      	it	ls
 8007786:	3220      	addls	r2, #32
 8007788:	42a2      	cmp	r2, r4
 800778a:	d0f0      	beq.n	800776e <__match+0x6>
 800778c:	2000      	movs	r0, #0
 800778e:	e7f3      	b.n	8007778 <__match+0x10>

08007790 <__hexnan>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	2500      	movs	r5, #0
 8007796:	680b      	ldr	r3, [r1, #0]
 8007798:	4682      	mov	sl, r0
 800779a:	115e      	asrs	r6, r3, #5
 800779c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80077a0:	f013 031f 	ands.w	r3, r3, #31
 80077a4:	bf18      	it	ne
 80077a6:	3604      	addne	r6, #4
 80077a8:	1f37      	subs	r7, r6, #4
 80077aa:	46b9      	mov	r9, r7
 80077ac:	463c      	mov	r4, r7
 80077ae:	46ab      	mov	fp, r5
 80077b0:	b087      	sub	sp, #28
 80077b2:	4690      	mov	r8, r2
 80077b4:	6802      	ldr	r2, [r0, #0]
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80077bc:	9502      	str	r5, [sp, #8]
 80077be:	7851      	ldrb	r1, [r2, #1]
 80077c0:	1c53      	adds	r3, r2, #1
 80077c2:	9303      	str	r3, [sp, #12]
 80077c4:	b341      	cbz	r1, 8007818 <__hexnan+0x88>
 80077c6:	4608      	mov	r0, r1
 80077c8:	9205      	str	r2, [sp, #20]
 80077ca:	9104      	str	r1, [sp, #16]
 80077cc:	f7ff fd69 	bl	80072a2 <__hexdig_fun>
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d14f      	bne.n	8007874 <__hexnan+0xe4>
 80077d4:	9904      	ldr	r1, [sp, #16]
 80077d6:	9a05      	ldr	r2, [sp, #20]
 80077d8:	2920      	cmp	r1, #32
 80077da:	d818      	bhi.n	800780e <__hexnan+0x7e>
 80077dc:	9b02      	ldr	r3, [sp, #8]
 80077de:	459b      	cmp	fp, r3
 80077e0:	dd13      	ble.n	800780a <__hexnan+0x7a>
 80077e2:	454c      	cmp	r4, r9
 80077e4:	d206      	bcs.n	80077f4 <__hexnan+0x64>
 80077e6:	2d07      	cmp	r5, #7
 80077e8:	dc04      	bgt.n	80077f4 <__hexnan+0x64>
 80077ea:	462a      	mov	r2, r5
 80077ec:	4649      	mov	r1, r9
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7ff ffa8 	bl	8007744 <L_shift>
 80077f4:	4544      	cmp	r4, r8
 80077f6:	d950      	bls.n	800789a <__hexnan+0x10a>
 80077f8:	2300      	movs	r3, #0
 80077fa:	f1a4 0904 	sub.w	r9, r4, #4
 80077fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007802:	461d      	mov	r5, r3
 8007804:	464c      	mov	r4, r9
 8007806:	f8cd b008 	str.w	fp, [sp, #8]
 800780a:	9a03      	ldr	r2, [sp, #12]
 800780c:	e7d7      	b.n	80077be <__hexnan+0x2e>
 800780e:	2929      	cmp	r1, #41	; 0x29
 8007810:	d156      	bne.n	80078c0 <__hexnan+0x130>
 8007812:	3202      	adds	r2, #2
 8007814:	f8ca 2000 	str.w	r2, [sl]
 8007818:	f1bb 0f00 	cmp.w	fp, #0
 800781c:	d050      	beq.n	80078c0 <__hexnan+0x130>
 800781e:	454c      	cmp	r4, r9
 8007820:	d206      	bcs.n	8007830 <__hexnan+0xa0>
 8007822:	2d07      	cmp	r5, #7
 8007824:	dc04      	bgt.n	8007830 <__hexnan+0xa0>
 8007826:	462a      	mov	r2, r5
 8007828:	4649      	mov	r1, r9
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff ff8a 	bl	8007744 <L_shift>
 8007830:	4544      	cmp	r4, r8
 8007832:	d934      	bls.n	800789e <__hexnan+0x10e>
 8007834:	4623      	mov	r3, r4
 8007836:	f1a8 0204 	sub.w	r2, r8, #4
 800783a:	f853 1b04 	ldr.w	r1, [r3], #4
 800783e:	429f      	cmp	r7, r3
 8007840:	f842 1f04 	str.w	r1, [r2, #4]!
 8007844:	d2f9      	bcs.n	800783a <__hexnan+0xaa>
 8007846:	1b3b      	subs	r3, r7, r4
 8007848:	f023 0303 	bic.w	r3, r3, #3
 800784c:	3304      	adds	r3, #4
 800784e:	3401      	adds	r4, #1
 8007850:	3e03      	subs	r6, #3
 8007852:	42b4      	cmp	r4, r6
 8007854:	bf88      	it	hi
 8007856:	2304      	movhi	r3, #4
 8007858:	2200      	movs	r2, #0
 800785a:	4443      	add	r3, r8
 800785c:	f843 2b04 	str.w	r2, [r3], #4
 8007860:	429f      	cmp	r7, r3
 8007862:	d2fb      	bcs.n	800785c <__hexnan+0xcc>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	b91b      	cbnz	r3, 8007870 <__hexnan+0xe0>
 8007868:	4547      	cmp	r7, r8
 800786a:	d127      	bne.n	80078bc <__hexnan+0x12c>
 800786c:	2301      	movs	r3, #1
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	2005      	movs	r0, #5
 8007872:	e026      	b.n	80078c2 <__hexnan+0x132>
 8007874:	3501      	adds	r5, #1
 8007876:	2d08      	cmp	r5, #8
 8007878:	f10b 0b01 	add.w	fp, fp, #1
 800787c:	dd06      	ble.n	800788c <__hexnan+0xfc>
 800787e:	4544      	cmp	r4, r8
 8007880:	d9c3      	bls.n	800780a <__hexnan+0x7a>
 8007882:	2300      	movs	r3, #0
 8007884:	2501      	movs	r5, #1
 8007886:	f844 3c04 	str.w	r3, [r4, #-4]
 800788a:	3c04      	subs	r4, #4
 800788c:	6822      	ldr	r2, [r4, #0]
 800788e:	f000 000f 	and.w	r0, r0, #15
 8007892:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007896:	6022      	str	r2, [r4, #0]
 8007898:	e7b7      	b.n	800780a <__hexnan+0x7a>
 800789a:	2508      	movs	r5, #8
 800789c:	e7b5      	b.n	800780a <__hexnan+0x7a>
 800789e:	9b01      	ldr	r3, [sp, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0df      	beq.n	8007864 <__hexnan+0xd4>
 80078a4:	f04f 32ff 	mov.w	r2, #4294967295
 80078a8:	f1c3 0320 	rsb	r3, r3, #32
 80078ac:	fa22 f303 	lsr.w	r3, r2, r3
 80078b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80078b4:	401a      	ands	r2, r3
 80078b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80078ba:	e7d3      	b.n	8007864 <__hexnan+0xd4>
 80078bc:	3f04      	subs	r7, #4
 80078be:	e7d1      	b.n	8007864 <__hexnan+0xd4>
 80078c0:	2004      	movs	r0, #4
 80078c2:	b007      	add	sp, #28
 80078c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078c8 <_localeconv_r>:
 80078c8:	4800      	ldr	r0, [pc, #0]	; (80078cc <_localeconv_r+0x4>)
 80078ca:	4770      	bx	lr
 80078cc:	20000164 	.word	0x20000164

080078d0 <malloc>:
 80078d0:	4b02      	ldr	r3, [pc, #8]	; (80078dc <malloc+0xc>)
 80078d2:	4601      	mov	r1, r0
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	f000 bd65 	b.w	80083a4 <_malloc_r>
 80078da:	bf00      	nop
 80078dc:	2000000c 	.word	0x2000000c

080078e0 <__ascii_mbtowc>:
 80078e0:	b082      	sub	sp, #8
 80078e2:	b901      	cbnz	r1, 80078e6 <__ascii_mbtowc+0x6>
 80078e4:	a901      	add	r1, sp, #4
 80078e6:	b142      	cbz	r2, 80078fa <__ascii_mbtowc+0x1a>
 80078e8:	b14b      	cbz	r3, 80078fe <__ascii_mbtowc+0x1e>
 80078ea:	7813      	ldrb	r3, [r2, #0]
 80078ec:	600b      	str	r3, [r1, #0]
 80078ee:	7812      	ldrb	r2, [r2, #0]
 80078f0:	1e10      	subs	r0, r2, #0
 80078f2:	bf18      	it	ne
 80078f4:	2001      	movne	r0, #1
 80078f6:	b002      	add	sp, #8
 80078f8:	4770      	bx	lr
 80078fa:	4610      	mov	r0, r2
 80078fc:	e7fb      	b.n	80078f6 <__ascii_mbtowc+0x16>
 80078fe:	f06f 0001 	mvn.w	r0, #1
 8007902:	e7f8      	b.n	80078f6 <__ascii_mbtowc+0x16>

08007904 <memchr>:
 8007904:	4603      	mov	r3, r0
 8007906:	b510      	push	{r4, lr}
 8007908:	b2c9      	uxtb	r1, r1
 800790a:	4402      	add	r2, r0
 800790c:	4293      	cmp	r3, r2
 800790e:	4618      	mov	r0, r3
 8007910:	d101      	bne.n	8007916 <memchr+0x12>
 8007912:	2000      	movs	r0, #0
 8007914:	e003      	b.n	800791e <memchr+0x1a>
 8007916:	7804      	ldrb	r4, [r0, #0]
 8007918:	3301      	adds	r3, #1
 800791a:	428c      	cmp	r4, r1
 800791c:	d1f6      	bne.n	800790c <memchr+0x8>
 800791e:	bd10      	pop	{r4, pc}

08007920 <memcpy>:
 8007920:	440a      	add	r2, r1
 8007922:	4291      	cmp	r1, r2
 8007924:	f100 33ff 	add.w	r3, r0, #4294967295
 8007928:	d100      	bne.n	800792c <memcpy+0xc>
 800792a:	4770      	bx	lr
 800792c:	b510      	push	{r4, lr}
 800792e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007932:	4291      	cmp	r1, r2
 8007934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007938:	d1f9      	bne.n	800792e <memcpy+0xe>
 800793a:	bd10      	pop	{r4, pc}

0800793c <_Balloc>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007940:	4604      	mov	r4, r0
 8007942:	460d      	mov	r5, r1
 8007944:	b976      	cbnz	r6, 8007964 <_Balloc+0x28>
 8007946:	2010      	movs	r0, #16
 8007948:	f7ff ffc2 	bl	80078d0 <malloc>
 800794c:	4602      	mov	r2, r0
 800794e:	6260      	str	r0, [r4, #36]	; 0x24
 8007950:	b920      	cbnz	r0, 800795c <_Balloc+0x20>
 8007952:	2166      	movs	r1, #102	; 0x66
 8007954:	4b17      	ldr	r3, [pc, #92]	; (80079b4 <_Balloc+0x78>)
 8007956:	4818      	ldr	r0, [pc, #96]	; (80079b8 <_Balloc+0x7c>)
 8007958:	f000 ff2c 	bl	80087b4 <__assert_func>
 800795c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007960:	6006      	str	r6, [r0, #0]
 8007962:	60c6      	str	r6, [r0, #12]
 8007964:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007966:	68f3      	ldr	r3, [r6, #12]
 8007968:	b183      	cbz	r3, 800798c <_Balloc+0x50>
 800796a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007972:	b9b8      	cbnz	r0, 80079a4 <_Balloc+0x68>
 8007974:	2101      	movs	r1, #1
 8007976:	fa01 f605 	lsl.w	r6, r1, r5
 800797a:	1d72      	adds	r2, r6, #5
 800797c:	4620      	mov	r0, r4
 800797e:	0092      	lsls	r2, r2, #2
 8007980:	f000 fc94 	bl	80082ac <_calloc_r>
 8007984:	b160      	cbz	r0, 80079a0 <_Balloc+0x64>
 8007986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800798a:	e00e      	b.n	80079aa <_Balloc+0x6e>
 800798c:	2221      	movs	r2, #33	; 0x21
 800798e:	2104      	movs	r1, #4
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fc8b 	bl	80082ac <_calloc_r>
 8007996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007998:	60f0      	str	r0, [r6, #12]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1e4      	bne.n	800796a <_Balloc+0x2e>
 80079a0:	2000      	movs	r0, #0
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	6802      	ldr	r2, [r0, #0]
 80079a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079aa:	2300      	movs	r3, #0
 80079ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079b0:	e7f7      	b.n	80079a2 <_Balloc+0x66>
 80079b2:	bf00      	nop
 80079b4:	08009736 	.word	0x08009736
 80079b8:	08009834 	.word	0x08009834

080079bc <_Bfree>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079c0:	4605      	mov	r5, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	b976      	cbnz	r6, 80079e4 <_Bfree+0x28>
 80079c6:	2010      	movs	r0, #16
 80079c8:	f7ff ff82 	bl	80078d0 <malloc>
 80079cc:	4602      	mov	r2, r0
 80079ce:	6268      	str	r0, [r5, #36]	; 0x24
 80079d0:	b920      	cbnz	r0, 80079dc <_Bfree+0x20>
 80079d2:	218a      	movs	r1, #138	; 0x8a
 80079d4:	4b08      	ldr	r3, [pc, #32]	; (80079f8 <_Bfree+0x3c>)
 80079d6:	4809      	ldr	r0, [pc, #36]	; (80079fc <_Bfree+0x40>)
 80079d8:	f000 feec 	bl	80087b4 <__assert_func>
 80079dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079e0:	6006      	str	r6, [r0, #0]
 80079e2:	60c6      	str	r6, [r0, #12]
 80079e4:	b13c      	cbz	r4, 80079f6 <_Bfree+0x3a>
 80079e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079e8:	6862      	ldr	r2, [r4, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079f0:	6021      	str	r1, [r4, #0]
 80079f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	08009736 	.word	0x08009736
 80079fc:	08009834 	.word	0x08009834

08007a00 <__multadd>:
 8007a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a04:	4607      	mov	r7, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	461e      	mov	r6, r3
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	690d      	ldr	r5, [r1, #16]
 8007a0e:	f101 0c14 	add.w	ip, r1, #20
 8007a12:	f8dc 3000 	ldr.w	r3, [ip]
 8007a16:	3001      	adds	r0, #1
 8007a18:	b299      	uxth	r1, r3
 8007a1a:	fb02 6101 	mla	r1, r2, r1, r6
 8007a1e:	0c1e      	lsrs	r6, r3, #16
 8007a20:	0c0b      	lsrs	r3, r1, #16
 8007a22:	fb02 3306 	mla	r3, r2, r6, r3
 8007a26:	b289      	uxth	r1, r1
 8007a28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a2c:	4285      	cmp	r5, r0
 8007a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a32:	f84c 1b04 	str.w	r1, [ip], #4
 8007a36:	dcec      	bgt.n	8007a12 <__multadd+0x12>
 8007a38:	b30e      	cbz	r6, 8007a7e <__multadd+0x7e>
 8007a3a:	68a3      	ldr	r3, [r4, #8]
 8007a3c:	42ab      	cmp	r3, r5
 8007a3e:	dc19      	bgt.n	8007a74 <__multadd+0x74>
 8007a40:	6861      	ldr	r1, [r4, #4]
 8007a42:	4638      	mov	r0, r7
 8007a44:	3101      	adds	r1, #1
 8007a46:	f7ff ff79 	bl	800793c <_Balloc>
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	b928      	cbnz	r0, 8007a5a <__multadd+0x5a>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	21b5      	movs	r1, #181	; 0xb5
 8007a52:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <__multadd+0x84>)
 8007a54:	480c      	ldr	r0, [pc, #48]	; (8007a88 <__multadd+0x88>)
 8007a56:	f000 fead 	bl	80087b4 <__assert_func>
 8007a5a:	6922      	ldr	r2, [r4, #16]
 8007a5c:	f104 010c 	add.w	r1, r4, #12
 8007a60:	3202      	adds	r2, #2
 8007a62:	0092      	lsls	r2, r2, #2
 8007a64:	300c      	adds	r0, #12
 8007a66:	f7ff ff5b 	bl	8007920 <memcpy>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f7ff ffa5 	bl	80079bc <_Bfree>
 8007a72:	4644      	mov	r4, r8
 8007a74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a78:	3501      	adds	r5, #1
 8007a7a:	615e      	str	r6, [r3, #20]
 8007a7c:	6125      	str	r5, [r4, #16]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a84:	080097a8 	.word	0x080097a8
 8007a88:	08009834 	.word	0x08009834

08007a8c <__s2b>:
 8007a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a90:	4615      	mov	r5, r2
 8007a92:	2209      	movs	r2, #9
 8007a94:	461f      	mov	r7, r3
 8007a96:	3308      	adds	r3, #8
 8007a98:	460c      	mov	r4, r1
 8007a9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	db09      	blt.n	8007abc <__s2b+0x30>
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff ff47 	bl	800793c <_Balloc>
 8007aae:	b940      	cbnz	r0, 8007ac2 <__s2b+0x36>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	21ce      	movs	r1, #206	; 0xce
 8007ab4:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <__s2b+0x8c>)
 8007ab6:	4819      	ldr	r0, [pc, #100]	; (8007b1c <__s2b+0x90>)
 8007ab8:	f000 fe7c 	bl	80087b4 <__assert_func>
 8007abc:	0052      	lsls	r2, r2, #1
 8007abe:	3101      	adds	r1, #1
 8007ac0:	e7f0      	b.n	8007aa4 <__s2b+0x18>
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	2d09      	cmp	r5, #9
 8007ac6:	6143      	str	r3, [r0, #20]
 8007ac8:	f04f 0301 	mov.w	r3, #1
 8007acc:	6103      	str	r3, [r0, #16]
 8007ace:	dd16      	ble.n	8007afe <__s2b+0x72>
 8007ad0:	f104 0909 	add.w	r9, r4, #9
 8007ad4:	46c8      	mov	r8, r9
 8007ad6:	442c      	add	r4, r5
 8007ad8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007adc:	4601      	mov	r1, r0
 8007ade:	220a      	movs	r2, #10
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	3b30      	subs	r3, #48	; 0x30
 8007ae4:	f7ff ff8c 	bl	8007a00 <__multadd>
 8007ae8:	45a0      	cmp	r8, r4
 8007aea:	d1f5      	bne.n	8007ad8 <__s2b+0x4c>
 8007aec:	f1a5 0408 	sub.w	r4, r5, #8
 8007af0:	444c      	add	r4, r9
 8007af2:	1b2d      	subs	r5, r5, r4
 8007af4:	1963      	adds	r3, r4, r5
 8007af6:	42bb      	cmp	r3, r7
 8007af8:	db04      	blt.n	8007b04 <__s2b+0x78>
 8007afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afe:	2509      	movs	r5, #9
 8007b00:	340a      	adds	r4, #10
 8007b02:	e7f6      	b.n	8007af2 <__s2b+0x66>
 8007b04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b08:	4601      	mov	r1, r0
 8007b0a:	220a      	movs	r2, #10
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	3b30      	subs	r3, #48	; 0x30
 8007b10:	f7ff ff76 	bl	8007a00 <__multadd>
 8007b14:	e7ee      	b.n	8007af4 <__s2b+0x68>
 8007b16:	bf00      	nop
 8007b18:	080097a8 	.word	0x080097a8
 8007b1c:	08009834 	.word	0x08009834

08007b20 <__hi0bits>:
 8007b20:	0c02      	lsrs	r2, r0, #16
 8007b22:	0412      	lsls	r2, r2, #16
 8007b24:	4603      	mov	r3, r0
 8007b26:	b9ca      	cbnz	r2, 8007b5c <__hi0bits+0x3c>
 8007b28:	0403      	lsls	r3, r0, #16
 8007b2a:	2010      	movs	r0, #16
 8007b2c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b30:	bf04      	itt	eq
 8007b32:	021b      	lsleq	r3, r3, #8
 8007b34:	3008      	addeq	r0, #8
 8007b36:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b3a:	bf04      	itt	eq
 8007b3c:	011b      	lsleq	r3, r3, #4
 8007b3e:	3004      	addeq	r0, #4
 8007b40:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b44:	bf04      	itt	eq
 8007b46:	009b      	lsleq	r3, r3, #2
 8007b48:	3002      	addeq	r0, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	db05      	blt.n	8007b5a <__hi0bits+0x3a>
 8007b4e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007b52:	f100 0001 	add.w	r0, r0, #1
 8007b56:	bf08      	it	eq
 8007b58:	2020      	moveq	r0, #32
 8007b5a:	4770      	bx	lr
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	e7e5      	b.n	8007b2c <__hi0bits+0xc>

08007b60 <__lo0bits>:
 8007b60:	6803      	ldr	r3, [r0, #0]
 8007b62:	4602      	mov	r2, r0
 8007b64:	f013 0007 	ands.w	r0, r3, #7
 8007b68:	d00b      	beq.n	8007b82 <__lo0bits+0x22>
 8007b6a:	07d9      	lsls	r1, r3, #31
 8007b6c:	d421      	bmi.n	8007bb2 <__lo0bits+0x52>
 8007b6e:	0798      	lsls	r0, r3, #30
 8007b70:	bf49      	itett	mi
 8007b72:	085b      	lsrmi	r3, r3, #1
 8007b74:	089b      	lsrpl	r3, r3, #2
 8007b76:	2001      	movmi	r0, #1
 8007b78:	6013      	strmi	r3, [r2, #0]
 8007b7a:	bf5c      	itt	pl
 8007b7c:	2002      	movpl	r0, #2
 8007b7e:	6013      	strpl	r3, [r2, #0]
 8007b80:	4770      	bx	lr
 8007b82:	b299      	uxth	r1, r3
 8007b84:	b909      	cbnz	r1, 8007b8a <__lo0bits+0x2a>
 8007b86:	2010      	movs	r0, #16
 8007b88:	0c1b      	lsrs	r3, r3, #16
 8007b8a:	b2d9      	uxtb	r1, r3
 8007b8c:	b909      	cbnz	r1, 8007b92 <__lo0bits+0x32>
 8007b8e:	3008      	adds	r0, #8
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	0719      	lsls	r1, r3, #28
 8007b94:	bf04      	itt	eq
 8007b96:	091b      	lsreq	r3, r3, #4
 8007b98:	3004      	addeq	r0, #4
 8007b9a:	0799      	lsls	r1, r3, #30
 8007b9c:	bf04      	itt	eq
 8007b9e:	089b      	lsreq	r3, r3, #2
 8007ba0:	3002      	addeq	r0, #2
 8007ba2:	07d9      	lsls	r1, r3, #31
 8007ba4:	d403      	bmi.n	8007bae <__lo0bits+0x4e>
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	f100 0001 	add.w	r0, r0, #1
 8007bac:	d003      	beq.n	8007bb6 <__lo0bits+0x56>
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	4770      	bx	lr
 8007bb6:	2020      	movs	r0, #32
 8007bb8:	4770      	bx	lr
	...

08007bbc <__i2b>:
 8007bbc:	b510      	push	{r4, lr}
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	f7ff febb 	bl	800793c <_Balloc>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	b928      	cbnz	r0, 8007bd6 <__i2b+0x1a>
 8007bca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bce:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <__i2b+0x24>)
 8007bd0:	4804      	ldr	r0, [pc, #16]	; (8007be4 <__i2b+0x28>)
 8007bd2:	f000 fdef 	bl	80087b4 <__assert_func>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	6144      	str	r4, [r0, #20]
 8007bda:	6103      	str	r3, [r0, #16]
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	bf00      	nop
 8007be0:	080097a8 	.word	0x080097a8
 8007be4:	08009834 	.word	0x08009834

08007be8 <__multiply>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	4691      	mov	r9, r2
 8007bee:	690a      	ldr	r2, [r1, #16]
 8007bf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bfbe      	ittt	lt
 8007bfa:	460b      	movlt	r3, r1
 8007bfc:	464c      	movlt	r4, r9
 8007bfe:	4699      	movlt	r9, r3
 8007c00:	6927      	ldr	r7, [r4, #16]
 8007c02:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	6861      	ldr	r1, [r4, #4]
 8007c0a:	eb07 060a 	add.w	r6, r7, sl
 8007c0e:	42b3      	cmp	r3, r6
 8007c10:	b085      	sub	sp, #20
 8007c12:	bfb8      	it	lt
 8007c14:	3101      	addlt	r1, #1
 8007c16:	f7ff fe91 	bl	800793c <_Balloc>
 8007c1a:	b930      	cbnz	r0, 8007c2a <__multiply+0x42>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	f240 115d 	movw	r1, #349	; 0x15d
 8007c22:	4b43      	ldr	r3, [pc, #268]	; (8007d30 <__multiply+0x148>)
 8007c24:	4843      	ldr	r0, [pc, #268]	; (8007d34 <__multiply+0x14c>)
 8007c26:	f000 fdc5 	bl	80087b4 <__assert_func>
 8007c2a:	f100 0514 	add.w	r5, r0, #20
 8007c2e:	462b      	mov	r3, r5
 8007c30:	2200      	movs	r2, #0
 8007c32:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c36:	4543      	cmp	r3, r8
 8007c38:	d321      	bcc.n	8007c7e <__multiply+0x96>
 8007c3a:	f104 0314 	add.w	r3, r4, #20
 8007c3e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c42:	f109 0314 	add.w	r3, r9, #20
 8007c46:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c4a:	9202      	str	r2, [sp, #8]
 8007c4c:	1b3a      	subs	r2, r7, r4
 8007c4e:	3a15      	subs	r2, #21
 8007c50:	f022 0203 	bic.w	r2, r2, #3
 8007c54:	3204      	adds	r2, #4
 8007c56:	f104 0115 	add.w	r1, r4, #21
 8007c5a:	428f      	cmp	r7, r1
 8007c5c:	bf38      	it	cc
 8007c5e:	2204      	movcc	r2, #4
 8007c60:	9201      	str	r2, [sp, #4]
 8007c62:	9a02      	ldr	r2, [sp, #8]
 8007c64:	9303      	str	r3, [sp, #12]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d80c      	bhi.n	8007c84 <__multiply+0x9c>
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	dd03      	ble.n	8007c76 <__multiply+0x8e>
 8007c6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d059      	beq.n	8007d2a <__multiply+0x142>
 8007c76:	6106      	str	r6, [r0, #16]
 8007c78:	b005      	add	sp, #20
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	f843 2b04 	str.w	r2, [r3], #4
 8007c82:	e7d8      	b.n	8007c36 <__multiply+0x4e>
 8007c84:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c88:	f1ba 0f00 	cmp.w	sl, #0
 8007c8c:	d023      	beq.n	8007cd6 <__multiply+0xee>
 8007c8e:	46a9      	mov	r9, r5
 8007c90:	f04f 0c00 	mov.w	ip, #0
 8007c94:	f104 0e14 	add.w	lr, r4, #20
 8007c98:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c9c:	f8d9 1000 	ldr.w	r1, [r9]
 8007ca0:	fa1f fb82 	uxth.w	fp, r2
 8007ca4:	b289      	uxth	r1, r1
 8007ca6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007caa:	4461      	add	r1, ip
 8007cac:	f8d9 c000 	ldr.w	ip, [r9]
 8007cb0:	0c12      	lsrs	r2, r2, #16
 8007cb2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007cb6:	fb0a c202 	mla	r2, sl, r2, ip
 8007cba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007cbe:	b289      	uxth	r1, r1
 8007cc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cc4:	4577      	cmp	r7, lr
 8007cc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cca:	f849 1b04 	str.w	r1, [r9], #4
 8007cce:	d8e3      	bhi.n	8007c98 <__multiply+0xb0>
 8007cd0:	9a01      	ldr	r2, [sp, #4]
 8007cd2:	f845 c002 	str.w	ip, [r5, r2]
 8007cd6:	9a03      	ldr	r2, [sp, #12]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cde:	f1b9 0f00 	cmp.w	r9, #0
 8007ce2:	d020      	beq.n	8007d26 <__multiply+0x13e>
 8007ce4:	46ae      	mov	lr, r5
 8007ce6:	f04f 0a00 	mov.w	sl, #0
 8007cea:	6829      	ldr	r1, [r5, #0]
 8007cec:	f104 0c14 	add.w	ip, r4, #20
 8007cf0:	f8bc b000 	ldrh.w	fp, [ip]
 8007cf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007cf8:	b289      	uxth	r1, r1
 8007cfa:	fb09 220b 	mla	r2, r9, fp, r2
 8007cfe:	4492      	add	sl, r2
 8007d00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d04:	f84e 1b04 	str.w	r1, [lr], #4
 8007d08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d0c:	f8be 1000 	ldrh.w	r1, [lr]
 8007d10:	0c12      	lsrs	r2, r2, #16
 8007d12:	fb09 1102 	mla	r1, r9, r2, r1
 8007d16:	4567      	cmp	r7, ip
 8007d18:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d20:	d8e6      	bhi.n	8007cf0 <__multiply+0x108>
 8007d22:	9a01      	ldr	r2, [sp, #4]
 8007d24:	50a9      	str	r1, [r5, r2]
 8007d26:	3504      	adds	r5, #4
 8007d28:	e79b      	b.n	8007c62 <__multiply+0x7a>
 8007d2a:	3e01      	subs	r6, #1
 8007d2c:	e79d      	b.n	8007c6a <__multiply+0x82>
 8007d2e:	bf00      	nop
 8007d30:	080097a8 	.word	0x080097a8
 8007d34:	08009834 	.word	0x08009834

08007d38 <__pow5mult>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4615      	mov	r5, r2
 8007d3e:	f012 0203 	ands.w	r2, r2, #3
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	d007      	beq.n	8007d58 <__pow5mult+0x20>
 8007d48:	4c25      	ldr	r4, [pc, #148]	; (8007de0 <__pow5mult+0xa8>)
 8007d4a:	3a01      	subs	r2, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d52:	f7ff fe55 	bl	8007a00 <__multadd>
 8007d56:	4607      	mov	r7, r0
 8007d58:	10ad      	asrs	r5, r5, #2
 8007d5a:	d03d      	beq.n	8007dd8 <__pow5mult+0xa0>
 8007d5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d5e:	b97c      	cbnz	r4, 8007d80 <__pow5mult+0x48>
 8007d60:	2010      	movs	r0, #16
 8007d62:	f7ff fdb5 	bl	80078d0 <malloc>
 8007d66:	4602      	mov	r2, r0
 8007d68:	6270      	str	r0, [r6, #36]	; 0x24
 8007d6a:	b928      	cbnz	r0, 8007d78 <__pow5mult+0x40>
 8007d6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d70:	4b1c      	ldr	r3, [pc, #112]	; (8007de4 <__pow5mult+0xac>)
 8007d72:	481d      	ldr	r0, [pc, #116]	; (8007de8 <__pow5mult+0xb0>)
 8007d74:	f000 fd1e 	bl	80087b4 <__assert_func>
 8007d78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d7c:	6004      	str	r4, [r0, #0]
 8007d7e:	60c4      	str	r4, [r0, #12]
 8007d80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d88:	b94c      	cbnz	r4, 8007d9e <__pow5mult+0x66>
 8007d8a:	f240 2171 	movw	r1, #625	; 0x271
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7ff ff14 	bl	8007bbc <__i2b>
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d9c:	6003      	str	r3, [r0, #0]
 8007d9e:	f04f 0900 	mov.w	r9, #0
 8007da2:	07eb      	lsls	r3, r5, #31
 8007da4:	d50a      	bpl.n	8007dbc <__pow5mult+0x84>
 8007da6:	4639      	mov	r1, r7
 8007da8:	4622      	mov	r2, r4
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff ff1c 	bl	8007be8 <__multiply>
 8007db0:	4680      	mov	r8, r0
 8007db2:	4639      	mov	r1, r7
 8007db4:	4630      	mov	r0, r6
 8007db6:	f7ff fe01 	bl	80079bc <_Bfree>
 8007dba:	4647      	mov	r7, r8
 8007dbc:	106d      	asrs	r5, r5, #1
 8007dbe:	d00b      	beq.n	8007dd8 <__pow5mult+0xa0>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	b938      	cbnz	r0, 8007dd4 <__pow5mult+0x9c>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f7ff ff0d 	bl	8007be8 <__multiply>
 8007dce:	6020      	str	r0, [r4, #0]
 8007dd0:	f8c0 9000 	str.w	r9, [r0]
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	e7e4      	b.n	8007da2 <__pow5mult+0x6a>
 8007dd8:	4638      	mov	r0, r7
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	bf00      	nop
 8007de0:	08009980 	.word	0x08009980
 8007de4:	08009736 	.word	0x08009736
 8007de8:	08009834 	.word	0x08009834

08007dec <__lshift>:
 8007dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df0:	460c      	mov	r4, r1
 8007df2:	4607      	mov	r7, r0
 8007df4:	4691      	mov	r9, r2
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	6849      	ldr	r1, [r1, #4]
 8007dfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dfe:	68a3      	ldr	r3, [r4, #8]
 8007e00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e04:	f108 0601 	add.w	r6, r8, #1
 8007e08:	42b3      	cmp	r3, r6
 8007e0a:	db0b      	blt.n	8007e24 <__lshift+0x38>
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff fd95 	bl	800793c <_Balloc>
 8007e12:	4605      	mov	r5, r0
 8007e14:	b948      	cbnz	r0, 8007e2a <__lshift+0x3e>
 8007e16:	4602      	mov	r2, r0
 8007e18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e1c:	4b29      	ldr	r3, [pc, #164]	; (8007ec4 <__lshift+0xd8>)
 8007e1e:	482a      	ldr	r0, [pc, #168]	; (8007ec8 <__lshift+0xdc>)
 8007e20:	f000 fcc8 	bl	80087b4 <__assert_func>
 8007e24:	3101      	adds	r1, #1
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	e7ee      	b.n	8007e08 <__lshift+0x1c>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f100 0114 	add.w	r1, r0, #20
 8007e30:	f100 0210 	add.w	r2, r0, #16
 8007e34:	4618      	mov	r0, r3
 8007e36:	4553      	cmp	r3, sl
 8007e38:	db37      	blt.n	8007eaa <__lshift+0xbe>
 8007e3a:	6920      	ldr	r0, [r4, #16]
 8007e3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e40:	f104 0314 	add.w	r3, r4, #20
 8007e44:	f019 091f 	ands.w	r9, r9, #31
 8007e48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e50:	d02f      	beq.n	8007eb2 <__lshift+0xc6>
 8007e52:	468a      	mov	sl, r1
 8007e54:	f04f 0c00 	mov.w	ip, #0
 8007e58:	f1c9 0e20 	rsb	lr, r9, #32
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	fa02 f209 	lsl.w	r2, r2, r9
 8007e62:	ea42 020c 	orr.w	r2, r2, ip
 8007e66:	f84a 2b04 	str.w	r2, [sl], #4
 8007e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6e:	4298      	cmp	r0, r3
 8007e70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e74:	d8f2      	bhi.n	8007e5c <__lshift+0x70>
 8007e76:	1b03      	subs	r3, r0, r4
 8007e78:	3b15      	subs	r3, #21
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	3304      	adds	r3, #4
 8007e80:	f104 0215 	add.w	r2, r4, #21
 8007e84:	4290      	cmp	r0, r2
 8007e86:	bf38      	it	cc
 8007e88:	2304      	movcc	r3, #4
 8007e8a:	f841 c003 	str.w	ip, [r1, r3]
 8007e8e:	f1bc 0f00 	cmp.w	ip, #0
 8007e92:	d001      	beq.n	8007e98 <__lshift+0xac>
 8007e94:	f108 0602 	add.w	r6, r8, #2
 8007e98:	3e01      	subs	r6, #1
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	612e      	str	r6, [r5, #16]
 8007ea0:	f7ff fd8c 	bl	80079bc <_Bfree>
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eae:	3301      	adds	r3, #1
 8007eb0:	e7c1      	b.n	8007e36 <__lshift+0x4a>
 8007eb2:	3904      	subs	r1, #4
 8007eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb8:	4298      	cmp	r0, r3
 8007eba:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ebe:	d8f9      	bhi.n	8007eb4 <__lshift+0xc8>
 8007ec0:	e7ea      	b.n	8007e98 <__lshift+0xac>
 8007ec2:	bf00      	nop
 8007ec4:	080097a8 	.word	0x080097a8
 8007ec8:	08009834 	.word	0x08009834

08007ecc <__mcmp>:
 8007ecc:	4603      	mov	r3, r0
 8007ece:	690a      	ldr	r2, [r1, #16]
 8007ed0:	6900      	ldr	r0, [r0, #16]
 8007ed2:	b530      	push	{r4, r5, lr}
 8007ed4:	1a80      	subs	r0, r0, r2
 8007ed6:	d10d      	bne.n	8007ef4 <__mcmp+0x28>
 8007ed8:	3314      	adds	r3, #20
 8007eda:	3114      	adds	r1, #20
 8007edc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ee0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007eec:	4295      	cmp	r5, r2
 8007eee:	d002      	beq.n	8007ef6 <__mcmp+0x2a>
 8007ef0:	d304      	bcc.n	8007efc <__mcmp+0x30>
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	bd30      	pop	{r4, r5, pc}
 8007ef6:	42a3      	cmp	r3, r4
 8007ef8:	d3f4      	bcc.n	8007ee4 <__mcmp+0x18>
 8007efa:	e7fb      	b.n	8007ef4 <__mcmp+0x28>
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	e7f8      	b.n	8007ef4 <__mcmp+0x28>
	...

08007f04 <__mdiff>:
 8007f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	460d      	mov	r5, r1
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4628      	mov	r0, r5
 8007f10:	4614      	mov	r4, r2
 8007f12:	f7ff ffdb 	bl	8007ecc <__mcmp>
 8007f16:	1e06      	subs	r6, r0, #0
 8007f18:	d111      	bne.n	8007f3e <__mdiff+0x3a>
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	f7ff fd0d 	bl	800793c <_Balloc>
 8007f22:	4602      	mov	r2, r0
 8007f24:	b928      	cbnz	r0, 8007f32 <__mdiff+0x2e>
 8007f26:	f240 2132 	movw	r1, #562	; 0x232
 8007f2a:	4b3a      	ldr	r3, [pc, #232]	; (8008014 <__mdiff+0x110>)
 8007f2c:	483a      	ldr	r0, [pc, #232]	; (8008018 <__mdiff+0x114>)
 8007f2e:	f000 fc41 	bl	80087b4 <__assert_func>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f38:	4610      	mov	r0, r2
 8007f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3e:	bfa4      	itt	ge
 8007f40:	4623      	movge	r3, r4
 8007f42:	462c      	movge	r4, r5
 8007f44:	4638      	mov	r0, r7
 8007f46:	6861      	ldr	r1, [r4, #4]
 8007f48:	bfa6      	itte	ge
 8007f4a:	461d      	movge	r5, r3
 8007f4c:	2600      	movge	r6, #0
 8007f4e:	2601      	movlt	r6, #1
 8007f50:	f7ff fcf4 	bl	800793c <_Balloc>
 8007f54:	4602      	mov	r2, r0
 8007f56:	b918      	cbnz	r0, 8007f60 <__mdiff+0x5c>
 8007f58:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f5c:	4b2d      	ldr	r3, [pc, #180]	; (8008014 <__mdiff+0x110>)
 8007f5e:	e7e5      	b.n	8007f2c <__mdiff+0x28>
 8007f60:	f102 0814 	add.w	r8, r2, #20
 8007f64:	46c2      	mov	sl, r8
 8007f66:	f04f 0c00 	mov.w	ip, #0
 8007f6a:	6927      	ldr	r7, [r4, #16]
 8007f6c:	60c6      	str	r6, [r0, #12]
 8007f6e:	692e      	ldr	r6, [r5, #16]
 8007f70:	f104 0014 	add.w	r0, r4, #20
 8007f74:	f105 0914 	add.w	r9, r5, #20
 8007f78:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007f7c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f80:	3410      	adds	r4, #16
 8007f82:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007f86:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f8a:	fa1f f18b 	uxth.w	r1, fp
 8007f8e:	448c      	add	ip, r1
 8007f90:	b299      	uxth	r1, r3
 8007f92:	0c1b      	lsrs	r3, r3, #16
 8007f94:	ebac 0101 	sub.w	r1, ip, r1
 8007f98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f9c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007fa0:	b289      	uxth	r1, r1
 8007fa2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007fa6:	454e      	cmp	r6, r9
 8007fa8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007fac:	f84a 3b04 	str.w	r3, [sl], #4
 8007fb0:	d8e7      	bhi.n	8007f82 <__mdiff+0x7e>
 8007fb2:	1b73      	subs	r3, r6, r5
 8007fb4:	3b15      	subs	r3, #21
 8007fb6:	f023 0303 	bic.w	r3, r3, #3
 8007fba:	3515      	adds	r5, #21
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	42ae      	cmp	r6, r5
 8007fc0:	bf38      	it	cc
 8007fc2:	2304      	movcc	r3, #4
 8007fc4:	4418      	add	r0, r3
 8007fc6:	4443      	add	r3, r8
 8007fc8:	461e      	mov	r6, r3
 8007fca:	4605      	mov	r5, r0
 8007fcc:	4575      	cmp	r5, lr
 8007fce:	d30e      	bcc.n	8007fee <__mdiff+0xea>
 8007fd0:	f10e 0103 	add.w	r1, lr, #3
 8007fd4:	1a09      	subs	r1, r1, r0
 8007fd6:	f021 0103 	bic.w	r1, r1, #3
 8007fda:	3803      	subs	r0, #3
 8007fdc:	4586      	cmp	lr, r0
 8007fde:	bf38      	it	cc
 8007fe0:	2100      	movcc	r1, #0
 8007fe2:	4419      	add	r1, r3
 8007fe4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007fe8:	b18b      	cbz	r3, 800800e <__mdiff+0x10a>
 8007fea:	6117      	str	r7, [r2, #16]
 8007fec:	e7a4      	b.n	8007f38 <__mdiff+0x34>
 8007fee:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ff2:	fa1f f188 	uxth.w	r1, r8
 8007ff6:	4461      	add	r1, ip
 8007ff8:	140c      	asrs	r4, r1, #16
 8007ffa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ffe:	b289      	uxth	r1, r1
 8008000:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008004:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008008:	f846 1b04 	str.w	r1, [r6], #4
 800800c:	e7de      	b.n	8007fcc <__mdiff+0xc8>
 800800e:	3f01      	subs	r7, #1
 8008010:	e7e8      	b.n	8007fe4 <__mdiff+0xe0>
 8008012:	bf00      	nop
 8008014:	080097a8 	.word	0x080097a8
 8008018:	08009834 	.word	0x08009834

0800801c <__ulp>:
 800801c:	4b11      	ldr	r3, [pc, #68]	; (8008064 <__ulp+0x48>)
 800801e:	400b      	ands	r3, r1
 8008020:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008024:	2b00      	cmp	r3, #0
 8008026:	dd02      	ble.n	800802e <__ulp+0x12>
 8008028:	2000      	movs	r0, #0
 800802a:	4619      	mov	r1, r3
 800802c:	4770      	bx	lr
 800802e:	425b      	negs	r3, r3
 8008030:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008034:	f04f 0000 	mov.w	r0, #0
 8008038:	f04f 0100 	mov.w	r1, #0
 800803c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008040:	da04      	bge.n	800804c <__ulp+0x30>
 8008042:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008046:	fa43 f102 	asr.w	r1, r3, r2
 800804a:	4770      	bx	lr
 800804c:	f1a2 0314 	sub.w	r3, r2, #20
 8008050:	2b1e      	cmp	r3, #30
 8008052:	bfd6      	itet	le
 8008054:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008058:	2301      	movgt	r3, #1
 800805a:	fa22 f303 	lsrle.w	r3, r2, r3
 800805e:	4618      	mov	r0, r3
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	7ff00000 	.word	0x7ff00000

08008068 <__b2d>:
 8008068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800806c:	6907      	ldr	r7, [r0, #16]
 800806e:	f100 0914 	add.w	r9, r0, #20
 8008072:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008076:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800807a:	f1a7 0804 	sub.w	r8, r7, #4
 800807e:	4630      	mov	r0, r6
 8008080:	f7ff fd4e 	bl	8007b20 <__hi0bits>
 8008084:	f1c0 0320 	rsb	r3, r0, #32
 8008088:	280a      	cmp	r0, #10
 800808a:	600b      	str	r3, [r1, #0]
 800808c:	491f      	ldr	r1, [pc, #124]	; (800810c <__b2d+0xa4>)
 800808e:	dc17      	bgt.n	80080c0 <__b2d+0x58>
 8008090:	45c1      	cmp	r9, r8
 8008092:	bf28      	it	cs
 8008094:	2200      	movcs	r2, #0
 8008096:	f1c0 0c0b 	rsb	ip, r0, #11
 800809a:	fa26 f30c 	lsr.w	r3, r6, ip
 800809e:	bf38      	it	cc
 80080a0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80080a4:	ea43 0501 	orr.w	r5, r3, r1
 80080a8:	f100 0315 	add.w	r3, r0, #21
 80080ac:	fa06 f303 	lsl.w	r3, r6, r3
 80080b0:	fa22 f20c 	lsr.w	r2, r2, ip
 80080b4:	ea43 0402 	orr.w	r4, r3, r2
 80080b8:	4620      	mov	r0, r4
 80080ba:	4629      	mov	r1, r5
 80080bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c0:	45c1      	cmp	r9, r8
 80080c2:	bf2e      	itee	cs
 80080c4:	2200      	movcs	r2, #0
 80080c6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80080ca:	f1a7 0808 	subcc.w	r8, r7, #8
 80080ce:	f1b0 030b 	subs.w	r3, r0, #11
 80080d2:	d016      	beq.n	8008102 <__b2d+0x9a>
 80080d4:	f1c3 0720 	rsb	r7, r3, #32
 80080d8:	fa22 f107 	lsr.w	r1, r2, r7
 80080dc:	45c8      	cmp	r8, r9
 80080de:	fa06 f603 	lsl.w	r6, r6, r3
 80080e2:	ea46 0601 	orr.w	r6, r6, r1
 80080e6:	bf94      	ite	ls
 80080e8:	2100      	movls	r1, #0
 80080ea:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80080ee:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80080f2:	fa02 f003 	lsl.w	r0, r2, r3
 80080f6:	40f9      	lsrs	r1, r7
 80080f8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80080fc:	ea40 0401 	orr.w	r4, r0, r1
 8008100:	e7da      	b.n	80080b8 <__b2d+0x50>
 8008102:	4614      	mov	r4, r2
 8008104:	ea46 0501 	orr.w	r5, r6, r1
 8008108:	e7d6      	b.n	80080b8 <__b2d+0x50>
 800810a:	bf00      	nop
 800810c:	3ff00000 	.word	0x3ff00000

08008110 <__d2b>:
 8008110:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008114:	2101      	movs	r1, #1
 8008116:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800811a:	4690      	mov	r8, r2
 800811c:	461d      	mov	r5, r3
 800811e:	f7ff fc0d 	bl	800793c <_Balloc>
 8008122:	4604      	mov	r4, r0
 8008124:	b930      	cbnz	r0, 8008134 <__d2b+0x24>
 8008126:	4602      	mov	r2, r0
 8008128:	f240 310a 	movw	r1, #778	; 0x30a
 800812c:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <__d2b+0xb0>)
 800812e:	4825      	ldr	r0, [pc, #148]	; (80081c4 <__d2b+0xb4>)
 8008130:	f000 fb40 	bl	80087b4 <__assert_func>
 8008134:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008138:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800813c:	bb2d      	cbnz	r5, 800818a <__d2b+0x7a>
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	f1b8 0300 	subs.w	r3, r8, #0
 8008144:	d026      	beq.n	8008194 <__d2b+0x84>
 8008146:	4668      	mov	r0, sp
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	f7ff fd09 	bl	8007b60 <__lo0bits>
 800814e:	9900      	ldr	r1, [sp, #0]
 8008150:	b1f0      	cbz	r0, 8008190 <__d2b+0x80>
 8008152:	9a01      	ldr	r2, [sp, #4]
 8008154:	f1c0 0320 	rsb	r3, r0, #32
 8008158:	fa02 f303 	lsl.w	r3, r2, r3
 800815c:	430b      	orrs	r3, r1
 800815e:	40c2      	lsrs	r2, r0
 8008160:	6163      	str	r3, [r4, #20]
 8008162:	9201      	str	r2, [sp, #4]
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	bf14      	ite	ne
 800816a:	2102      	movne	r1, #2
 800816c:	2101      	moveq	r1, #1
 800816e:	61a3      	str	r3, [r4, #24]
 8008170:	6121      	str	r1, [r4, #16]
 8008172:	b1c5      	cbz	r5, 80081a6 <__d2b+0x96>
 8008174:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008178:	4405      	add	r5, r0
 800817a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800817e:	603d      	str	r5, [r7, #0]
 8008180:	6030      	str	r0, [r6, #0]
 8008182:	4620      	mov	r0, r4
 8008184:	b002      	add	sp, #8
 8008186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800818a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800818e:	e7d6      	b.n	800813e <__d2b+0x2e>
 8008190:	6161      	str	r1, [r4, #20]
 8008192:	e7e7      	b.n	8008164 <__d2b+0x54>
 8008194:	a801      	add	r0, sp, #4
 8008196:	f7ff fce3 	bl	8007b60 <__lo0bits>
 800819a:	2101      	movs	r1, #1
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	6121      	str	r1, [r4, #16]
 80081a0:	6163      	str	r3, [r4, #20]
 80081a2:	3020      	adds	r0, #32
 80081a4:	e7e5      	b.n	8008172 <__d2b+0x62>
 80081a6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80081aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081ae:	6038      	str	r0, [r7, #0]
 80081b0:	6918      	ldr	r0, [r3, #16]
 80081b2:	f7ff fcb5 	bl	8007b20 <__hi0bits>
 80081b6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80081ba:	6031      	str	r1, [r6, #0]
 80081bc:	e7e1      	b.n	8008182 <__d2b+0x72>
 80081be:	bf00      	nop
 80081c0:	080097a8 	.word	0x080097a8
 80081c4:	08009834 	.word	0x08009834

080081c8 <__ratio>:
 80081c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	4688      	mov	r8, r1
 80081ce:	4669      	mov	r1, sp
 80081d0:	4681      	mov	r9, r0
 80081d2:	f7ff ff49 	bl	8008068 <__b2d>
 80081d6:	460f      	mov	r7, r1
 80081d8:	4604      	mov	r4, r0
 80081da:	460d      	mov	r5, r1
 80081dc:	4640      	mov	r0, r8
 80081de:	a901      	add	r1, sp, #4
 80081e0:	f7ff ff42 	bl	8008068 <__b2d>
 80081e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80081ec:	468b      	mov	fp, r1
 80081ee:	eba3 0c02 	sub.w	ip, r3, r2
 80081f2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	bfd5      	itete	le
 8008200:	460a      	movle	r2, r1
 8008202:	462a      	movgt	r2, r5
 8008204:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008208:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800820c:	bfd8      	it	le
 800820e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008212:	465b      	mov	r3, fp
 8008214:	4602      	mov	r2, r0
 8008216:	4639      	mov	r1, r7
 8008218:	4620      	mov	r0, r4
 800821a:	f7f8 fa87 	bl	800072c <__aeabi_ddiv>
 800821e:	b003      	add	sp, #12
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008224 <__copybits>:
 8008224:	3901      	subs	r1, #1
 8008226:	b570      	push	{r4, r5, r6, lr}
 8008228:	1149      	asrs	r1, r1, #5
 800822a:	6914      	ldr	r4, [r2, #16]
 800822c:	3101      	adds	r1, #1
 800822e:	f102 0314 	add.w	r3, r2, #20
 8008232:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008236:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800823a:	1f05      	subs	r5, r0, #4
 800823c:	42a3      	cmp	r3, r4
 800823e:	d30c      	bcc.n	800825a <__copybits+0x36>
 8008240:	1aa3      	subs	r3, r4, r2
 8008242:	3b11      	subs	r3, #17
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	3211      	adds	r2, #17
 800824a:	42a2      	cmp	r2, r4
 800824c:	bf88      	it	hi
 800824e:	2300      	movhi	r3, #0
 8008250:	4418      	add	r0, r3
 8008252:	2300      	movs	r3, #0
 8008254:	4288      	cmp	r0, r1
 8008256:	d305      	bcc.n	8008264 <__copybits+0x40>
 8008258:	bd70      	pop	{r4, r5, r6, pc}
 800825a:	f853 6b04 	ldr.w	r6, [r3], #4
 800825e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008262:	e7eb      	b.n	800823c <__copybits+0x18>
 8008264:	f840 3b04 	str.w	r3, [r0], #4
 8008268:	e7f4      	b.n	8008254 <__copybits+0x30>

0800826a <__any_on>:
 800826a:	f100 0214 	add.w	r2, r0, #20
 800826e:	6900      	ldr	r0, [r0, #16]
 8008270:	114b      	asrs	r3, r1, #5
 8008272:	4298      	cmp	r0, r3
 8008274:	b510      	push	{r4, lr}
 8008276:	db11      	blt.n	800829c <__any_on+0x32>
 8008278:	dd0a      	ble.n	8008290 <__any_on+0x26>
 800827a:	f011 011f 	ands.w	r1, r1, #31
 800827e:	d007      	beq.n	8008290 <__any_on+0x26>
 8008280:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008284:	fa24 f001 	lsr.w	r0, r4, r1
 8008288:	fa00 f101 	lsl.w	r1, r0, r1
 800828c:	428c      	cmp	r4, r1
 800828e:	d10b      	bne.n	80082a8 <__any_on+0x3e>
 8008290:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008294:	4293      	cmp	r3, r2
 8008296:	d803      	bhi.n	80082a0 <__any_on+0x36>
 8008298:	2000      	movs	r0, #0
 800829a:	bd10      	pop	{r4, pc}
 800829c:	4603      	mov	r3, r0
 800829e:	e7f7      	b.n	8008290 <__any_on+0x26>
 80082a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082a4:	2900      	cmp	r1, #0
 80082a6:	d0f5      	beq.n	8008294 <__any_on+0x2a>
 80082a8:	2001      	movs	r0, #1
 80082aa:	e7f6      	b.n	800829a <__any_on+0x30>

080082ac <_calloc_r>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	fba1 5402 	umull	r5, r4, r1, r2
 80082b2:	b934      	cbnz	r4, 80082c2 <_calloc_r+0x16>
 80082b4:	4629      	mov	r1, r5
 80082b6:	f000 f875 	bl	80083a4 <_malloc_r>
 80082ba:	4606      	mov	r6, r0
 80082bc:	b928      	cbnz	r0, 80082ca <_calloc_r+0x1e>
 80082be:	4630      	mov	r0, r6
 80082c0:	bd70      	pop	{r4, r5, r6, pc}
 80082c2:	220c      	movs	r2, #12
 80082c4:	2600      	movs	r6, #0
 80082c6:	6002      	str	r2, [r0, #0]
 80082c8:	e7f9      	b.n	80082be <_calloc_r+0x12>
 80082ca:	462a      	mov	r2, r5
 80082cc:	4621      	mov	r1, r4
 80082ce:	f7fc fbf1 	bl	8004ab4 <memset>
 80082d2:	e7f4      	b.n	80082be <_calloc_r+0x12>

080082d4 <_free_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4605      	mov	r5, r0
 80082d8:	2900      	cmp	r1, #0
 80082da:	d040      	beq.n	800835e <_free_r+0x8a>
 80082dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e0:	1f0c      	subs	r4, r1, #4
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bfb8      	it	lt
 80082e6:	18e4      	addlt	r4, r4, r3
 80082e8:	f000 faae 	bl	8008848 <__malloc_lock>
 80082ec:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <_free_r+0x8c>)
 80082ee:	6813      	ldr	r3, [r2, #0]
 80082f0:	b933      	cbnz	r3, 8008300 <_free_r+0x2c>
 80082f2:	6063      	str	r3, [r4, #4]
 80082f4:	6014      	str	r4, [r2, #0]
 80082f6:	4628      	mov	r0, r5
 80082f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082fc:	f000 baaa 	b.w	8008854 <__malloc_unlock>
 8008300:	42a3      	cmp	r3, r4
 8008302:	d908      	bls.n	8008316 <_free_r+0x42>
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	1821      	adds	r1, r4, r0
 8008308:	428b      	cmp	r3, r1
 800830a:	bf01      	itttt	eq
 800830c:	6819      	ldreq	r1, [r3, #0]
 800830e:	685b      	ldreq	r3, [r3, #4]
 8008310:	1809      	addeq	r1, r1, r0
 8008312:	6021      	streq	r1, [r4, #0]
 8008314:	e7ed      	b.n	80082f2 <_free_r+0x1e>
 8008316:	461a      	mov	r2, r3
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	b10b      	cbz	r3, 8008320 <_free_r+0x4c>
 800831c:	42a3      	cmp	r3, r4
 800831e:	d9fa      	bls.n	8008316 <_free_r+0x42>
 8008320:	6811      	ldr	r1, [r2, #0]
 8008322:	1850      	adds	r0, r2, r1
 8008324:	42a0      	cmp	r0, r4
 8008326:	d10b      	bne.n	8008340 <_free_r+0x6c>
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	4401      	add	r1, r0
 800832c:	1850      	adds	r0, r2, r1
 800832e:	4283      	cmp	r3, r0
 8008330:	6011      	str	r1, [r2, #0]
 8008332:	d1e0      	bne.n	80082f6 <_free_r+0x22>
 8008334:	6818      	ldr	r0, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	4401      	add	r1, r0
 800833a:	6011      	str	r1, [r2, #0]
 800833c:	6053      	str	r3, [r2, #4]
 800833e:	e7da      	b.n	80082f6 <_free_r+0x22>
 8008340:	d902      	bls.n	8008348 <_free_r+0x74>
 8008342:	230c      	movs	r3, #12
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	e7d6      	b.n	80082f6 <_free_r+0x22>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	1821      	adds	r1, r4, r0
 800834c:	428b      	cmp	r3, r1
 800834e:	bf01      	itttt	eq
 8008350:	6819      	ldreq	r1, [r3, #0]
 8008352:	685b      	ldreq	r3, [r3, #4]
 8008354:	1809      	addeq	r1, r1, r0
 8008356:	6021      	streq	r1, [r4, #0]
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	6054      	str	r4, [r2, #4]
 800835c:	e7cb      	b.n	80082f6 <_free_r+0x22>
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	200003ec 	.word	0x200003ec

08008364 <sbrk_aligned>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4e0e      	ldr	r6, [pc, #56]	; (80083a0 <sbrk_aligned+0x3c>)
 8008368:	460c      	mov	r4, r1
 800836a:	6831      	ldr	r1, [r6, #0]
 800836c:	4605      	mov	r5, r0
 800836e:	b911      	cbnz	r1, 8008376 <sbrk_aligned+0x12>
 8008370:	f000 f9ee 	bl	8008750 <_sbrk_r>
 8008374:	6030      	str	r0, [r6, #0]
 8008376:	4621      	mov	r1, r4
 8008378:	4628      	mov	r0, r5
 800837a:	f000 f9e9 	bl	8008750 <_sbrk_r>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d00a      	beq.n	8008398 <sbrk_aligned+0x34>
 8008382:	1cc4      	adds	r4, r0, #3
 8008384:	f024 0403 	bic.w	r4, r4, #3
 8008388:	42a0      	cmp	r0, r4
 800838a:	d007      	beq.n	800839c <sbrk_aligned+0x38>
 800838c:	1a21      	subs	r1, r4, r0
 800838e:	4628      	mov	r0, r5
 8008390:	f000 f9de 	bl	8008750 <_sbrk_r>
 8008394:	3001      	adds	r0, #1
 8008396:	d101      	bne.n	800839c <sbrk_aligned+0x38>
 8008398:	f04f 34ff 	mov.w	r4, #4294967295
 800839c:	4620      	mov	r0, r4
 800839e:	bd70      	pop	{r4, r5, r6, pc}
 80083a0:	200003f0 	.word	0x200003f0

080083a4 <_malloc_r>:
 80083a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a8:	1ccd      	adds	r5, r1, #3
 80083aa:	f025 0503 	bic.w	r5, r5, #3
 80083ae:	3508      	adds	r5, #8
 80083b0:	2d0c      	cmp	r5, #12
 80083b2:	bf38      	it	cc
 80083b4:	250c      	movcc	r5, #12
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	4607      	mov	r7, r0
 80083ba:	db01      	blt.n	80083c0 <_malloc_r+0x1c>
 80083bc:	42a9      	cmp	r1, r5
 80083be:	d905      	bls.n	80083cc <_malloc_r+0x28>
 80083c0:	230c      	movs	r3, #12
 80083c2:	2600      	movs	r6, #0
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	4630      	mov	r0, r6
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083cc:	4e2e      	ldr	r6, [pc, #184]	; (8008488 <_malloc_r+0xe4>)
 80083ce:	f000 fa3b 	bl	8008848 <__malloc_lock>
 80083d2:	6833      	ldr	r3, [r6, #0]
 80083d4:	461c      	mov	r4, r3
 80083d6:	bb34      	cbnz	r4, 8008426 <_malloc_r+0x82>
 80083d8:	4629      	mov	r1, r5
 80083da:	4638      	mov	r0, r7
 80083dc:	f7ff ffc2 	bl	8008364 <sbrk_aligned>
 80083e0:	1c43      	adds	r3, r0, #1
 80083e2:	4604      	mov	r4, r0
 80083e4:	d14d      	bne.n	8008482 <_malloc_r+0xde>
 80083e6:	6834      	ldr	r4, [r6, #0]
 80083e8:	4626      	mov	r6, r4
 80083ea:	2e00      	cmp	r6, #0
 80083ec:	d140      	bne.n	8008470 <_malloc_r+0xcc>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	4631      	mov	r1, r6
 80083f2:	4638      	mov	r0, r7
 80083f4:	eb04 0803 	add.w	r8, r4, r3
 80083f8:	f000 f9aa 	bl	8008750 <_sbrk_r>
 80083fc:	4580      	cmp	r8, r0
 80083fe:	d13a      	bne.n	8008476 <_malloc_r+0xd2>
 8008400:	6821      	ldr	r1, [r4, #0]
 8008402:	3503      	adds	r5, #3
 8008404:	1a6d      	subs	r5, r5, r1
 8008406:	f025 0503 	bic.w	r5, r5, #3
 800840a:	3508      	adds	r5, #8
 800840c:	2d0c      	cmp	r5, #12
 800840e:	bf38      	it	cc
 8008410:	250c      	movcc	r5, #12
 8008412:	4638      	mov	r0, r7
 8008414:	4629      	mov	r1, r5
 8008416:	f7ff ffa5 	bl	8008364 <sbrk_aligned>
 800841a:	3001      	adds	r0, #1
 800841c:	d02b      	beq.n	8008476 <_malloc_r+0xd2>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	442b      	add	r3, r5
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	e00e      	b.n	8008444 <_malloc_r+0xa0>
 8008426:	6822      	ldr	r2, [r4, #0]
 8008428:	1b52      	subs	r2, r2, r5
 800842a:	d41e      	bmi.n	800846a <_malloc_r+0xc6>
 800842c:	2a0b      	cmp	r2, #11
 800842e:	d916      	bls.n	800845e <_malloc_r+0xba>
 8008430:	1961      	adds	r1, r4, r5
 8008432:	42a3      	cmp	r3, r4
 8008434:	6025      	str	r5, [r4, #0]
 8008436:	bf18      	it	ne
 8008438:	6059      	strne	r1, [r3, #4]
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	bf08      	it	eq
 800843e:	6031      	streq	r1, [r6, #0]
 8008440:	5162      	str	r2, [r4, r5]
 8008442:	604b      	str	r3, [r1, #4]
 8008444:	4638      	mov	r0, r7
 8008446:	f104 060b 	add.w	r6, r4, #11
 800844a:	f000 fa03 	bl	8008854 <__malloc_unlock>
 800844e:	f026 0607 	bic.w	r6, r6, #7
 8008452:	1d23      	adds	r3, r4, #4
 8008454:	1af2      	subs	r2, r6, r3
 8008456:	d0b6      	beq.n	80083c6 <_malloc_r+0x22>
 8008458:	1b9b      	subs	r3, r3, r6
 800845a:	50a3      	str	r3, [r4, r2]
 800845c:	e7b3      	b.n	80083c6 <_malloc_r+0x22>
 800845e:	6862      	ldr	r2, [r4, #4]
 8008460:	42a3      	cmp	r3, r4
 8008462:	bf0c      	ite	eq
 8008464:	6032      	streq	r2, [r6, #0]
 8008466:	605a      	strne	r2, [r3, #4]
 8008468:	e7ec      	b.n	8008444 <_malloc_r+0xa0>
 800846a:	4623      	mov	r3, r4
 800846c:	6864      	ldr	r4, [r4, #4]
 800846e:	e7b2      	b.n	80083d6 <_malloc_r+0x32>
 8008470:	4634      	mov	r4, r6
 8008472:	6876      	ldr	r6, [r6, #4]
 8008474:	e7b9      	b.n	80083ea <_malloc_r+0x46>
 8008476:	230c      	movs	r3, #12
 8008478:	4638      	mov	r0, r7
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	f000 f9ea 	bl	8008854 <__malloc_unlock>
 8008480:	e7a1      	b.n	80083c6 <_malloc_r+0x22>
 8008482:	6025      	str	r5, [r4, #0]
 8008484:	e7de      	b.n	8008444 <_malloc_r+0xa0>
 8008486:	bf00      	nop
 8008488:	200003ec 	.word	0x200003ec

0800848c <__ssputs_r>:
 800848c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	688e      	ldr	r6, [r1, #8]
 8008492:	4682      	mov	sl, r0
 8008494:	429e      	cmp	r6, r3
 8008496:	460c      	mov	r4, r1
 8008498:	4690      	mov	r8, r2
 800849a:	461f      	mov	r7, r3
 800849c:	d838      	bhi.n	8008510 <__ssputs_r+0x84>
 800849e:	898a      	ldrh	r2, [r1, #12]
 80084a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084a4:	d032      	beq.n	800850c <__ssputs_r+0x80>
 80084a6:	6825      	ldr	r5, [r4, #0]
 80084a8:	6909      	ldr	r1, [r1, #16]
 80084aa:	3301      	adds	r3, #1
 80084ac:	eba5 0901 	sub.w	r9, r5, r1
 80084b0:	6965      	ldr	r5, [r4, #20]
 80084b2:	444b      	add	r3, r9
 80084b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084bc:	106d      	asrs	r5, r5, #1
 80084be:	429d      	cmp	r5, r3
 80084c0:	bf38      	it	cc
 80084c2:	461d      	movcc	r5, r3
 80084c4:	0553      	lsls	r3, r2, #21
 80084c6:	d531      	bpl.n	800852c <__ssputs_r+0xa0>
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7ff ff6b 	bl	80083a4 <_malloc_r>
 80084ce:	4606      	mov	r6, r0
 80084d0:	b950      	cbnz	r0, 80084e8 <__ssputs_r+0x5c>
 80084d2:	230c      	movs	r3, #12
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	f8ca 3000 	str.w	r3, [sl]
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e8:	464a      	mov	r2, r9
 80084ea:	6921      	ldr	r1, [r4, #16]
 80084ec:	f7ff fa18 	bl	8007920 <memcpy>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	6126      	str	r6, [r4, #16]
 80084fe:	444e      	add	r6, r9
 8008500:	6026      	str	r6, [r4, #0]
 8008502:	463e      	mov	r6, r7
 8008504:	6165      	str	r5, [r4, #20]
 8008506:	eba5 0509 	sub.w	r5, r5, r9
 800850a:	60a5      	str	r5, [r4, #8]
 800850c:	42be      	cmp	r6, r7
 800850e:	d900      	bls.n	8008512 <__ssputs_r+0x86>
 8008510:	463e      	mov	r6, r7
 8008512:	4632      	mov	r2, r6
 8008514:	4641      	mov	r1, r8
 8008516:	6820      	ldr	r0, [r4, #0]
 8008518:	f000 f97c 	bl	8008814 <memmove>
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	2000      	movs	r0, #0
 8008520:	1b9b      	subs	r3, r3, r6
 8008522:	60a3      	str	r3, [r4, #8]
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	4433      	add	r3, r6
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	e7db      	b.n	80084e4 <__ssputs_r+0x58>
 800852c:	462a      	mov	r2, r5
 800852e:	f000 f997 	bl	8008860 <_realloc_r>
 8008532:	4606      	mov	r6, r0
 8008534:	2800      	cmp	r0, #0
 8008536:	d1e1      	bne.n	80084fc <__ssputs_r+0x70>
 8008538:	4650      	mov	r0, sl
 800853a:	6921      	ldr	r1, [r4, #16]
 800853c:	f7ff feca 	bl	80082d4 <_free_r>
 8008540:	e7c7      	b.n	80084d2 <__ssputs_r+0x46>
	...

08008544 <_svfiprintf_r>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	4698      	mov	r8, r3
 800854a:	898b      	ldrh	r3, [r1, #12]
 800854c:	4607      	mov	r7, r0
 800854e:	061b      	lsls	r3, r3, #24
 8008550:	460d      	mov	r5, r1
 8008552:	4614      	mov	r4, r2
 8008554:	b09d      	sub	sp, #116	; 0x74
 8008556:	d50e      	bpl.n	8008576 <_svfiprintf_r+0x32>
 8008558:	690b      	ldr	r3, [r1, #16]
 800855a:	b963      	cbnz	r3, 8008576 <_svfiprintf_r+0x32>
 800855c:	2140      	movs	r1, #64	; 0x40
 800855e:	f7ff ff21 	bl	80083a4 <_malloc_r>
 8008562:	6028      	str	r0, [r5, #0]
 8008564:	6128      	str	r0, [r5, #16]
 8008566:	b920      	cbnz	r0, 8008572 <_svfiprintf_r+0x2e>
 8008568:	230c      	movs	r3, #12
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	f04f 30ff 	mov.w	r0, #4294967295
 8008570:	e0d1      	b.n	8008716 <_svfiprintf_r+0x1d2>
 8008572:	2340      	movs	r3, #64	; 0x40
 8008574:	616b      	str	r3, [r5, #20]
 8008576:	2300      	movs	r3, #0
 8008578:	9309      	str	r3, [sp, #36]	; 0x24
 800857a:	2320      	movs	r3, #32
 800857c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008580:	2330      	movs	r3, #48	; 0x30
 8008582:	f04f 0901 	mov.w	r9, #1
 8008586:	f8cd 800c 	str.w	r8, [sp, #12]
 800858a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008730 <_svfiprintf_r+0x1ec>
 800858e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008592:	4623      	mov	r3, r4
 8008594:	469a      	mov	sl, r3
 8008596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800859a:	b10a      	cbz	r2, 80085a0 <_svfiprintf_r+0x5c>
 800859c:	2a25      	cmp	r2, #37	; 0x25
 800859e:	d1f9      	bne.n	8008594 <_svfiprintf_r+0x50>
 80085a0:	ebba 0b04 	subs.w	fp, sl, r4
 80085a4:	d00b      	beq.n	80085be <_svfiprintf_r+0x7a>
 80085a6:	465b      	mov	r3, fp
 80085a8:	4622      	mov	r2, r4
 80085aa:	4629      	mov	r1, r5
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff ff6d 	bl	800848c <__ssputs_r>
 80085b2:	3001      	adds	r0, #1
 80085b4:	f000 80aa 	beq.w	800870c <_svfiprintf_r+0x1c8>
 80085b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ba:	445a      	add	r2, fp
 80085bc:	9209      	str	r2, [sp, #36]	; 0x24
 80085be:	f89a 3000 	ldrb.w	r3, [sl]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 80a2 	beq.w	800870c <_svfiprintf_r+0x1c8>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f04f 32ff 	mov.w	r2, #4294967295
 80085ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085d2:	f10a 0a01 	add.w	sl, sl, #1
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	9307      	str	r3, [sp, #28]
 80085da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085de:	931a      	str	r3, [sp, #104]	; 0x68
 80085e0:	4654      	mov	r4, sl
 80085e2:	2205      	movs	r2, #5
 80085e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e8:	4851      	ldr	r0, [pc, #324]	; (8008730 <_svfiprintf_r+0x1ec>)
 80085ea:	f7ff f98b 	bl	8007904 <memchr>
 80085ee:	9a04      	ldr	r2, [sp, #16]
 80085f0:	b9d8      	cbnz	r0, 800862a <_svfiprintf_r+0xe6>
 80085f2:	06d0      	lsls	r0, r2, #27
 80085f4:	bf44      	itt	mi
 80085f6:	2320      	movmi	r3, #32
 80085f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085fc:	0711      	lsls	r1, r2, #28
 80085fe:	bf44      	itt	mi
 8008600:	232b      	movmi	r3, #43	; 0x2b
 8008602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008606:	f89a 3000 	ldrb.w	r3, [sl]
 800860a:	2b2a      	cmp	r3, #42	; 0x2a
 800860c:	d015      	beq.n	800863a <_svfiprintf_r+0xf6>
 800860e:	4654      	mov	r4, sl
 8008610:	2000      	movs	r0, #0
 8008612:	f04f 0c0a 	mov.w	ip, #10
 8008616:	9a07      	ldr	r2, [sp, #28]
 8008618:	4621      	mov	r1, r4
 800861a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800861e:	3b30      	subs	r3, #48	; 0x30
 8008620:	2b09      	cmp	r3, #9
 8008622:	d94e      	bls.n	80086c2 <_svfiprintf_r+0x17e>
 8008624:	b1b0      	cbz	r0, 8008654 <_svfiprintf_r+0x110>
 8008626:	9207      	str	r2, [sp, #28]
 8008628:	e014      	b.n	8008654 <_svfiprintf_r+0x110>
 800862a:	eba0 0308 	sub.w	r3, r0, r8
 800862e:	fa09 f303 	lsl.w	r3, r9, r3
 8008632:	4313      	orrs	r3, r2
 8008634:	46a2      	mov	sl, r4
 8008636:	9304      	str	r3, [sp, #16]
 8008638:	e7d2      	b.n	80085e0 <_svfiprintf_r+0x9c>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	1d19      	adds	r1, r3, #4
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	9103      	str	r1, [sp, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	bfbb      	ittet	lt
 8008646:	425b      	neglt	r3, r3
 8008648:	f042 0202 	orrlt.w	r2, r2, #2
 800864c:	9307      	strge	r3, [sp, #28]
 800864e:	9307      	strlt	r3, [sp, #28]
 8008650:	bfb8      	it	lt
 8008652:	9204      	strlt	r2, [sp, #16]
 8008654:	7823      	ldrb	r3, [r4, #0]
 8008656:	2b2e      	cmp	r3, #46	; 0x2e
 8008658:	d10c      	bne.n	8008674 <_svfiprintf_r+0x130>
 800865a:	7863      	ldrb	r3, [r4, #1]
 800865c:	2b2a      	cmp	r3, #42	; 0x2a
 800865e:	d135      	bne.n	80086cc <_svfiprintf_r+0x188>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	3402      	adds	r4, #2
 8008664:	1d1a      	adds	r2, r3, #4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	9203      	str	r2, [sp, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	bfb8      	it	lt
 800866e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008672:	9305      	str	r3, [sp, #20]
 8008674:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008734 <_svfiprintf_r+0x1f0>
 8008678:	2203      	movs	r2, #3
 800867a:	4650      	mov	r0, sl
 800867c:	7821      	ldrb	r1, [r4, #0]
 800867e:	f7ff f941 	bl	8007904 <memchr>
 8008682:	b140      	cbz	r0, 8008696 <_svfiprintf_r+0x152>
 8008684:	2340      	movs	r3, #64	; 0x40
 8008686:	eba0 000a 	sub.w	r0, r0, sl
 800868a:	fa03 f000 	lsl.w	r0, r3, r0
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	3401      	adds	r4, #1
 8008692:	4303      	orrs	r3, r0
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800869a:	2206      	movs	r2, #6
 800869c:	4826      	ldr	r0, [pc, #152]	; (8008738 <_svfiprintf_r+0x1f4>)
 800869e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086a2:	f7ff f92f 	bl	8007904 <memchr>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d038      	beq.n	800871c <_svfiprintf_r+0x1d8>
 80086aa:	4b24      	ldr	r3, [pc, #144]	; (800873c <_svfiprintf_r+0x1f8>)
 80086ac:	bb1b      	cbnz	r3, 80086f6 <_svfiprintf_r+0x1b2>
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	3307      	adds	r3, #7
 80086b2:	f023 0307 	bic.w	r3, r3, #7
 80086b6:	3308      	adds	r3, #8
 80086b8:	9303      	str	r3, [sp, #12]
 80086ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086bc:	4433      	add	r3, r6
 80086be:	9309      	str	r3, [sp, #36]	; 0x24
 80086c0:	e767      	b.n	8008592 <_svfiprintf_r+0x4e>
 80086c2:	460c      	mov	r4, r1
 80086c4:	2001      	movs	r0, #1
 80086c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086ca:	e7a5      	b.n	8008618 <_svfiprintf_r+0xd4>
 80086cc:	2300      	movs	r3, #0
 80086ce:	f04f 0c0a 	mov.w	ip, #10
 80086d2:	4619      	mov	r1, r3
 80086d4:	3401      	adds	r4, #1
 80086d6:	9305      	str	r3, [sp, #20]
 80086d8:	4620      	mov	r0, r4
 80086da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086de:	3a30      	subs	r2, #48	; 0x30
 80086e0:	2a09      	cmp	r2, #9
 80086e2:	d903      	bls.n	80086ec <_svfiprintf_r+0x1a8>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0c5      	beq.n	8008674 <_svfiprintf_r+0x130>
 80086e8:	9105      	str	r1, [sp, #20]
 80086ea:	e7c3      	b.n	8008674 <_svfiprintf_r+0x130>
 80086ec:	4604      	mov	r4, r0
 80086ee:	2301      	movs	r3, #1
 80086f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80086f4:	e7f0      	b.n	80086d8 <_svfiprintf_r+0x194>
 80086f6:	ab03      	add	r3, sp, #12
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	462a      	mov	r2, r5
 80086fc:	4638      	mov	r0, r7
 80086fe:	4b10      	ldr	r3, [pc, #64]	; (8008740 <_svfiprintf_r+0x1fc>)
 8008700:	a904      	add	r1, sp, #16
 8008702:	f7fc fa7d 	bl	8004c00 <_printf_float>
 8008706:	1c42      	adds	r2, r0, #1
 8008708:	4606      	mov	r6, r0
 800870a:	d1d6      	bne.n	80086ba <_svfiprintf_r+0x176>
 800870c:	89ab      	ldrh	r3, [r5, #12]
 800870e:	065b      	lsls	r3, r3, #25
 8008710:	f53f af2c 	bmi.w	800856c <_svfiprintf_r+0x28>
 8008714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008716:	b01d      	add	sp, #116	; 0x74
 8008718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871c:	ab03      	add	r3, sp, #12
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	462a      	mov	r2, r5
 8008722:	4638      	mov	r0, r7
 8008724:	4b06      	ldr	r3, [pc, #24]	; (8008740 <_svfiprintf_r+0x1fc>)
 8008726:	a904      	add	r1, sp, #16
 8008728:	f7fc fd06 	bl	8005138 <_printf_i>
 800872c:	e7eb      	b.n	8008706 <_svfiprintf_r+0x1c2>
 800872e:	bf00      	nop
 8008730:	0800998c 	.word	0x0800998c
 8008734:	08009992 	.word	0x08009992
 8008738:	08009996 	.word	0x08009996
 800873c:	08004c01 	.word	0x08004c01
 8008740:	0800848d 	.word	0x0800848d

08008744 <nan>:
 8008744:	2000      	movs	r0, #0
 8008746:	4901      	ldr	r1, [pc, #4]	; (800874c <nan+0x8>)
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	7ff80000 	.word	0x7ff80000

08008750 <_sbrk_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	2300      	movs	r3, #0
 8008754:	4d05      	ldr	r5, [pc, #20]	; (800876c <_sbrk_r+0x1c>)
 8008756:	4604      	mov	r4, r0
 8008758:	4608      	mov	r0, r1
 800875a:	602b      	str	r3, [r5, #0]
 800875c:	f7f9 fe5c 	bl	8002418 <_sbrk>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_sbrk_r+0x1a>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	b103      	cbz	r3, 800876a <_sbrk_r+0x1a>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	200003f4 	.word	0x200003f4

08008770 <strncmp>:
 8008770:	4603      	mov	r3, r0
 8008772:	b510      	push	{r4, lr}
 8008774:	b172      	cbz	r2, 8008794 <strncmp+0x24>
 8008776:	3901      	subs	r1, #1
 8008778:	1884      	adds	r4, r0, r2
 800877a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800877e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008782:	4290      	cmp	r0, r2
 8008784:	d101      	bne.n	800878a <strncmp+0x1a>
 8008786:	42a3      	cmp	r3, r4
 8008788:	d101      	bne.n	800878e <strncmp+0x1e>
 800878a:	1a80      	subs	r0, r0, r2
 800878c:	bd10      	pop	{r4, pc}
 800878e:	2800      	cmp	r0, #0
 8008790:	d1f3      	bne.n	800877a <strncmp+0xa>
 8008792:	e7fa      	b.n	800878a <strncmp+0x1a>
 8008794:	4610      	mov	r0, r2
 8008796:	e7f9      	b.n	800878c <strncmp+0x1c>

08008798 <__ascii_wctomb>:
 8008798:	4603      	mov	r3, r0
 800879a:	4608      	mov	r0, r1
 800879c:	b141      	cbz	r1, 80087b0 <__ascii_wctomb+0x18>
 800879e:	2aff      	cmp	r2, #255	; 0xff
 80087a0:	d904      	bls.n	80087ac <__ascii_wctomb+0x14>
 80087a2:	228a      	movs	r2, #138	; 0x8a
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	4770      	bx	lr
 80087ac:	2001      	movs	r0, #1
 80087ae:	700a      	strb	r2, [r1, #0]
 80087b0:	4770      	bx	lr
	...

080087b4 <__assert_func>:
 80087b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087b6:	4614      	mov	r4, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <__assert_func+0x2c>)
 80087bc:	4605      	mov	r5, r0
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68d8      	ldr	r0, [r3, #12]
 80087c2:	b14c      	cbz	r4, 80087d8 <__assert_func+0x24>
 80087c4:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <__assert_func+0x30>)
 80087c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087ca:	9100      	str	r1, [sp, #0]
 80087cc:	462b      	mov	r3, r5
 80087ce:	4906      	ldr	r1, [pc, #24]	; (80087e8 <__assert_func+0x34>)
 80087d0:	f000 f80e 	bl	80087f0 <fiprintf>
 80087d4:	f000 fa8a 	bl	8008cec <abort>
 80087d8:	4b04      	ldr	r3, [pc, #16]	; (80087ec <__assert_func+0x38>)
 80087da:	461c      	mov	r4, r3
 80087dc:	e7f3      	b.n	80087c6 <__assert_func+0x12>
 80087de:	bf00      	nop
 80087e0:	2000000c 	.word	0x2000000c
 80087e4:	0800999d 	.word	0x0800999d
 80087e8:	080099aa 	.word	0x080099aa
 80087ec:	080099d8 	.word	0x080099d8

080087f0 <fiprintf>:
 80087f0:	b40e      	push	{r1, r2, r3}
 80087f2:	b503      	push	{r0, r1, lr}
 80087f4:	4601      	mov	r1, r0
 80087f6:	ab03      	add	r3, sp, #12
 80087f8:	4805      	ldr	r0, [pc, #20]	; (8008810 <fiprintf+0x20>)
 80087fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80087fe:	6800      	ldr	r0, [r0, #0]
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	f000 f883 	bl	800890c <_vfiprintf_r>
 8008806:	b002      	add	sp, #8
 8008808:	f85d eb04 	ldr.w	lr, [sp], #4
 800880c:	b003      	add	sp, #12
 800880e:	4770      	bx	lr
 8008810:	2000000c 	.word	0x2000000c

08008814 <memmove>:
 8008814:	4288      	cmp	r0, r1
 8008816:	b510      	push	{r4, lr}
 8008818:	eb01 0402 	add.w	r4, r1, r2
 800881c:	d902      	bls.n	8008824 <memmove+0x10>
 800881e:	4284      	cmp	r4, r0
 8008820:	4623      	mov	r3, r4
 8008822:	d807      	bhi.n	8008834 <memmove+0x20>
 8008824:	1e43      	subs	r3, r0, #1
 8008826:	42a1      	cmp	r1, r4
 8008828:	d008      	beq.n	800883c <memmove+0x28>
 800882a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008832:	e7f8      	b.n	8008826 <memmove+0x12>
 8008834:	4601      	mov	r1, r0
 8008836:	4402      	add	r2, r0
 8008838:	428a      	cmp	r2, r1
 800883a:	d100      	bne.n	800883e <memmove+0x2a>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008846:	e7f7      	b.n	8008838 <memmove+0x24>

08008848 <__malloc_lock>:
 8008848:	4801      	ldr	r0, [pc, #4]	; (8008850 <__malloc_lock+0x8>)
 800884a:	f000 bc0b 	b.w	8009064 <__retarget_lock_acquire_recursive>
 800884e:	bf00      	nop
 8008850:	200003f8 	.word	0x200003f8

08008854 <__malloc_unlock>:
 8008854:	4801      	ldr	r0, [pc, #4]	; (800885c <__malloc_unlock+0x8>)
 8008856:	f000 bc06 	b.w	8009066 <__retarget_lock_release_recursive>
 800885a:	bf00      	nop
 800885c:	200003f8 	.word	0x200003f8

08008860 <_realloc_r>:
 8008860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008864:	4680      	mov	r8, r0
 8008866:	4614      	mov	r4, r2
 8008868:	460e      	mov	r6, r1
 800886a:	b921      	cbnz	r1, 8008876 <_realloc_r+0x16>
 800886c:	4611      	mov	r1, r2
 800886e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008872:	f7ff bd97 	b.w	80083a4 <_malloc_r>
 8008876:	b92a      	cbnz	r2, 8008884 <_realloc_r+0x24>
 8008878:	f7ff fd2c 	bl	80082d4 <_free_r>
 800887c:	4625      	mov	r5, r4
 800887e:	4628      	mov	r0, r5
 8008880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008884:	f000 fc56 	bl	8009134 <_malloc_usable_size_r>
 8008888:	4284      	cmp	r4, r0
 800888a:	4607      	mov	r7, r0
 800888c:	d802      	bhi.n	8008894 <_realloc_r+0x34>
 800888e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008892:	d812      	bhi.n	80088ba <_realloc_r+0x5a>
 8008894:	4621      	mov	r1, r4
 8008896:	4640      	mov	r0, r8
 8008898:	f7ff fd84 	bl	80083a4 <_malloc_r>
 800889c:	4605      	mov	r5, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	d0ed      	beq.n	800887e <_realloc_r+0x1e>
 80088a2:	42bc      	cmp	r4, r7
 80088a4:	4622      	mov	r2, r4
 80088a6:	4631      	mov	r1, r6
 80088a8:	bf28      	it	cs
 80088aa:	463a      	movcs	r2, r7
 80088ac:	f7ff f838 	bl	8007920 <memcpy>
 80088b0:	4631      	mov	r1, r6
 80088b2:	4640      	mov	r0, r8
 80088b4:	f7ff fd0e 	bl	80082d4 <_free_r>
 80088b8:	e7e1      	b.n	800887e <_realloc_r+0x1e>
 80088ba:	4635      	mov	r5, r6
 80088bc:	e7df      	b.n	800887e <_realloc_r+0x1e>

080088be <__sfputc_r>:
 80088be:	6893      	ldr	r3, [r2, #8]
 80088c0:	b410      	push	{r4}
 80088c2:	3b01      	subs	r3, #1
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	6093      	str	r3, [r2, #8]
 80088c8:	da07      	bge.n	80088da <__sfputc_r+0x1c>
 80088ca:	6994      	ldr	r4, [r2, #24]
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	db01      	blt.n	80088d4 <__sfputc_r+0x16>
 80088d0:	290a      	cmp	r1, #10
 80088d2:	d102      	bne.n	80088da <__sfputc_r+0x1c>
 80088d4:	bc10      	pop	{r4}
 80088d6:	f000 b949 	b.w	8008b6c <__swbuf_r>
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	1c58      	adds	r0, r3, #1
 80088de:	6010      	str	r0, [r2, #0]
 80088e0:	7019      	strb	r1, [r3, #0]
 80088e2:	4608      	mov	r0, r1
 80088e4:	bc10      	pop	{r4}
 80088e6:	4770      	bx	lr

080088e8 <__sfputs_r>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	4606      	mov	r6, r0
 80088ec:	460f      	mov	r7, r1
 80088ee:	4614      	mov	r4, r2
 80088f0:	18d5      	adds	r5, r2, r3
 80088f2:	42ac      	cmp	r4, r5
 80088f4:	d101      	bne.n	80088fa <__sfputs_r+0x12>
 80088f6:	2000      	movs	r0, #0
 80088f8:	e007      	b.n	800890a <__sfputs_r+0x22>
 80088fa:	463a      	mov	r2, r7
 80088fc:	4630      	mov	r0, r6
 80088fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008902:	f7ff ffdc 	bl	80088be <__sfputc_r>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	d1f3      	bne.n	80088f2 <__sfputs_r+0xa>
 800890a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800890c <_vfiprintf_r>:
 800890c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	460d      	mov	r5, r1
 8008912:	4614      	mov	r4, r2
 8008914:	4698      	mov	r8, r3
 8008916:	4606      	mov	r6, r0
 8008918:	b09d      	sub	sp, #116	; 0x74
 800891a:	b118      	cbz	r0, 8008924 <_vfiprintf_r+0x18>
 800891c:	6983      	ldr	r3, [r0, #24]
 800891e:	b90b      	cbnz	r3, 8008924 <_vfiprintf_r+0x18>
 8008920:	f000 fb02 	bl	8008f28 <__sinit>
 8008924:	4b89      	ldr	r3, [pc, #548]	; (8008b4c <_vfiprintf_r+0x240>)
 8008926:	429d      	cmp	r5, r3
 8008928:	d11b      	bne.n	8008962 <_vfiprintf_r+0x56>
 800892a:	6875      	ldr	r5, [r6, #4]
 800892c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800892e:	07d9      	lsls	r1, r3, #31
 8008930:	d405      	bmi.n	800893e <_vfiprintf_r+0x32>
 8008932:	89ab      	ldrh	r3, [r5, #12]
 8008934:	059a      	lsls	r2, r3, #22
 8008936:	d402      	bmi.n	800893e <_vfiprintf_r+0x32>
 8008938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800893a:	f000 fb93 	bl	8009064 <__retarget_lock_acquire_recursive>
 800893e:	89ab      	ldrh	r3, [r5, #12]
 8008940:	071b      	lsls	r3, r3, #28
 8008942:	d501      	bpl.n	8008948 <_vfiprintf_r+0x3c>
 8008944:	692b      	ldr	r3, [r5, #16]
 8008946:	b9eb      	cbnz	r3, 8008984 <_vfiprintf_r+0x78>
 8008948:	4629      	mov	r1, r5
 800894a:	4630      	mov	r0, r6
 800894c:	f000 f960 	bl	8008c10 <__swsetup_r>
 8008950:	b1c0      	cbz	r0, 8008984 <_vfiprintf_r+0x78>
 8008952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008954:	07dc      	lsls	r4, r3, #31
 8008956:	d50e      	bpl.n	8008976 <_vfiprintf_r+0x6a>
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	b01d      	add	sp, #116	; 0x74
 800895e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008962:	4b7b      	ldr	r3, [pc, #492]	; (8008b50 <_vfiprintf_r+0x244>)
 8008964:	429d      	cmp	r5, r3
 8008966:	d101      	bne.n	800896c <_vfiprintf_r+0x60>
 8008968:	68b5      	ldr	r5, [r6, #8]
 800896a:	e7df      	b.n	800892c <_vfiprintf_r+0x20>
 800896c:	4b79      	ldr	r3, [pc, #484]	; (8008b54 <_vfiprintf_r+0x248>)
 800896e:	429d      	cmp	r5, r3
 8008970:	bf08      	it	eq
 8008972:	68f5      	ldreq	r5, [r6, #12]
 8008974:	e7da      	b.n	800892c <_vfiprintf_r+0x20>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	0598      	lsls	r0, r3, #22
 800897a:	d4ed      	bmi.n	8008958 <_vfiprintf_r+0x4c>
 800897c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800897e:	f000 fb72 	bl	8009066 <__retarget_lock_release_recursive>
 8008982:	e7e9      	b.n	8008958 <_vfiprintf_r+0x4c>
 8008984:	2300      	movs	r3, #0
 8008986:	9309      	str	r3, [sp, #36]	; 0x24
 8008988:	2320      	movs	r3, #32
 800898a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800898e:	2330      	movs	r3, #48	; 0x30
 8008990:	f04f 0901 	mov.w	r9, #1
 8008994:	f8cd 800c 	str.w	r8, [sp, #12]
 8008998:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008b58 <_vfiprintf_r+0x24c>
 800899c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089a0:	4623      	mov	r3, r4
 80089a2:	469a      	mov	sl, r3
 80089a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a8:	b10a      	cbz	r2, 80089ae <_vfiprintf_r+0xa2>
 80089aa:	2a25      	cmp	r2, #37	; 0x25
 80089ac:	d1f9      	bne.n	80089a2 <_vfiprintf_r+0x96>
 80089ae:	ebba 0b04 	subs.w	fp, sl, r4
 80089b2:	d00b      	beq.n	80089cc <_vfiprintf_r+0xc0>
 80089b4:	465b      	mov	r3, fp
 80089b6:	4622      	mov	r2, r4
 80089b8:	4629      	mov	r1, r5
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7ff ff94 	bl	80088e8 <__sfputs_r>
 80089c0:	3001      	adds	r0, #1
 80089c2:	f000 80aa 	beq.w	8008b1a <_vfiprintf_r+0x20e>
 80089c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089c8:	445a      	add	r2, fp
 80089ca:	9209      	str	r2, [sp, #36]	; 0x24
 80089cc:	f89a 3000 	ldrb.w	r3, [sl]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 80a2 	beq.w	8008b1a <_vfiprintf_r+0x20e>
 80089d6:	2300      	movs	r3, #0
 80089d8:	f04f 32ff 	mov.w	r2, #4294967295
 80089dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089e0:	f10a 0a01 	add.w	sl, sl, #1
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	9307      	str	r3, [sp, #28]
 80089e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089ec:	931a      	str	r3, [sp, #104]	; 0x68
 80089ee:	4654      	mov	r4, sl
 80089f0:	2205      	movs	r2, #5
 80089f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f6:	4858      	ldr	r0, [pc, #352]	; (8008b58 <_vfiprintf_r+0x24c>)
 80089f8:	f7fe ff84 	bl	8007904 <memchr>
 80089fc:	9a04      	ldr	r2, [sp, #16]
 80089fe:	b9d8      	cbnz	r0, 8008a38 <_vfiprintf_r+0x12c>
 8008a00:	06d1      	lsls	r1, r2, #27
 8008a02:	bf44      	itt	mi
 8008a04:	2320      	movmi	r3, #32
 8008a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a0a:	0713      	lsls	r3, r2, #28
 8008a0c:	bf44      	itt	mi
 8008a0e:	232b      	movmi	r3, #43	; 0x2b
 8008a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a14:	f89a 3000 	ldrb.w	r3, [sl]
 8008a18:	2b2a      	cmp	r3, #42	; 0x2a
 8008a1a:	d015      	beq.n	8008a48 <_vfiprintf_r+0x13c>
 8008a1c:	4654      	mov	r4, sl
 8008a1e:	2000      	movs	r0, #0
 8008a20:	f04f 0c0a 	mov.w	ip, #10
 8008a24:	9a07      	ldr	r2, [sp, #28]
 8008a26:	4621      	mov	r1, r4
 8008a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a2c:	3b30      	subs	r3, #48	; 0x30
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	d94e      	bls.n	8008ad0 <_vfiprintf_r+0x1c4>
 8008a32:	b1b0      	cbz	r0, 8008a62 <_vfiprintf_r+0x156>
 8008a34:	9207      	str	r2, [sp, #28]
 8008a36:	e014      	b.n	8008a62 <_vfiprintf_r+0x156>
 8008a38:	eba0 0308 	sub.w	r3, r0, r8
 8008a3c:	fa09 f303 	lsl.w	r3, r9, r3
 8008a40:	4313      	orrs	r3, r2
 8008a42:	46a2      	mov	sl, r4
 8008a44:	9304      	str	r3, [sp, #16]
 8008a46:	e7d2      	b.n	80089ee <_vfiprintf_r+0xe2>
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	1d19      	adds	r1, r3, #4
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	9103      	str	r1, [sp, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	bfbb      	ittet	lt
 8008a54:	425b      	neglt	r3, r3
 8008a56:	f042 0202 	orrlt.w	r2, r2, #2
 8008a5a:	9307      	strge	r3, [sp, #28]
 8008a5c:	9307      	strlt	r3, [sp, #28]
 8008a5e:	bfb8      	it	lt
 8008a60:	9204      	strlt	r2, [sp, #16]
 8008a62:	7823      	ldrb	r3, [r4, #0]
 8008a64:	2b2e      	cmp	r3, #46	; 0x2e
 8008a66:	d10c      	bne.n	8008a82 <_vfiprintf_r+0x176>
 8008a68:	7863      	ldrb	r3, [r4, #1]
 8008a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a6c:	d135      	bne.n	8008ada <_vfiprintf_r+0x1ce>
 8008a6e:	9b03      	ldr	r3, [sp, #12]
 8008a70:	3402      	adds	r4, #2
 8008a72:	1d1a      	adds	r2, r3, #4
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	9203      	str	r2, [sp, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	bfb8      	it	lt
 8008a7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a80:	9305      	str	r3, [sp, #20]
 8008a82:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008b5c <_vfiprintf_r+0x250>
 8008a86:	2203      	movs	r2, #3
 8008a88:	4650      	mov	r0, sl
 8008a8a:	7821      	ldrb	r1, [r4, #0]
 8008a8c:	f7fe ff3a 	bl	8007904 <memchr>
 8008a90:	b140      	cbz	r0, 8008aa4 <_vfiprintf_r+0x198>
 8008a92:	2340      	movs	r3, #64	; 0x40
 8008a94:	eba0 000a 	sub.w	r0, r0, sl
 8008a98:	fa03 f000 	lsl.w	r0, r3, r0
 8008a9c:	9b04      	ldr	r3, [sp, #16]
 8008a9e:	3401      	adds	r4, #1
 8008aa0:	4303      	orrs	r3, r0
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa8:	2206      	movs	r2, #6
 8008aaa:	482d      	ldr	r0, [pc, #180]	; (8008b60 <_vfiprintf_r+0x254>)
 8008aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ab0:	f7fe ff28 	bl	8007904 <memchr>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d03f      	beq.n	8008b38 <_vfiprintf_r+0x22c>
 8008ab8:	4b2a      	ldr	r3, [pc, #168]	; (8008b64 <_vfiprintf_r+0x258>)
 8008aba:	bb1b      	cbnz	r3, 8008b04 <_vfiprintf_r+0x1f8>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	3307      	adds	r3, #7
 8008ac0:	f023 0307 	bic.w	r3, r3, #7
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	9303      	str	r3, [sp, #12]
 8008ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aca:	443b      	add	r3, r7
 8008acc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ace:	e767      	b.n	80089a0 <_vfiprintf_r+0x94>
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ad8:	e7a5      	b.n	8008a26 <_vfiprintf_r+0x11a>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f04f 0c0a 	mov.w	ip, #10
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	3401      	adds	r4, #1
 8008ae4:	9305      	str	r3, [sp, #20]
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aec:	3a30      	subs	r2, #48	; 0x30
 8008aee:	2a09      	cmp	r2, #9
 8008af0:	d903      	bls.n	8008afa <_vfiprintf_r+0x1ee>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d0c5      	beq.n	8008a82 <_vfiprintf_r+0x176>
 8008af6:	9105      	str	r1, [sp, #20]
 8008af8:	e7c3      	b.n	8008a82 <_vfiprintf_r+0x176>
 8008afa:	4604      	mov	r4, r0
 8008afc:	2301      	movs	r3, #1
 8008afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b02:	e7f0      	b.n	8008ae6 <_vfiprintf_r+0x1da>
 8008b04:	ab03      	add	r3, sp, #12
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	462a      	mov	r2, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <_vfiprintf_r+0x25c>)
 8008b0e:	a904      	add	r1, sp, #16
 8008b10:	f7fc f876 	bl	8004c00 <_printf_float>
 8008b14:	4607      	mov	r7, r0
 8008b16:	1c78      	adds	r0, r7, #1
 8008b18:	d1d6      	bne.n	8008ac8 <_vfiprintf_r+0x1bc>
 8008b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b1c:	07d9      	lsls	r1, r3, #31
 8008b1e:	d405      	bmi.n	8008b2c <_vfiprintf_r+0x220>
 8008b20:	89ab      	ldrh	r3, [r5, #12]
 8008b22:	059a      	lsls	r2, r3, #22
 8008b24:	d402      	bmi.n	8008b2c <_vfiprintf_r+0x220>
 8008b26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b28:	f000 fa9d 	bl	8009066 <__retarget_lock_release_recursive>
 8008b2c:	89ab      	ldrh	r3, [r5, #12]
 8008b2e:	065b      	lsls	r3, r3, #25
 8008b30:	f53f af12 	bmi.w	8008958 <_vfiprintf_r+0x4c>
 8008b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b36:	e711      	b.n	800895c <_vfiprintf_r+0x50>
 8008b38:	ab03      	add	r3, sp, #12
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	462a      	mov	r2, r5
 8008b3e:	4630      	mov	r0, r6
 8008b40:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <_vfiprintf_r+0x25c>)
 8008b42:	a904      	add	r1, sp, #16
 8008b44:	f7fc faf8 	bl	8005138 <_printf_i>
 8008b48:	e7e4      	b.n	8008b14 <_vfiprintf_r+0x208>
 8008b4a:	bf00      	nop
 8008b4c:	080099fc 	.word	0x080099fc
 8008b50:	08009a1c 	.word	0x08009a1c
 8008b54:	080099dc 	.word	0x080099dc
 8008b58:	0800998c 	.word	0x0800998c
 8008b5c:	08009992 	.word	0x08009992
 8008b60:	08009996 	.word	0x08009996
 8008b64:	08004c01 	.word	0x08004c01
 8008b68:	080088e9 	.word	0x080088e9

08008b6c <__swbuf_r>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	460e      	mov	r6, r1
 8008b70:	4614      	mov	r4, r2
 8008b72:	4605      	mov	r5, r0
 8008b74:	b118      	cbz	r0, 8008b7e <__swbuf_r+0x12>
 8008b76:	6983      	ldr	r3, [r0, #24]
 8008b78:	b90b      	cbnz	r3, 8008b7e <__swbuf_r+0x12>
 8008b7a:	f000 f9d5 	bl	8008f28 <__sinit>
 8008b7e:	4b21      	ldr	r3, [pc, #132]	; (8008c04 <__swbuf_r+0x98>)
 8008b80:	429c      	cmp	r4, r3
 8008b82:	d12b      	bne.n	8008bdc <__swbuf_r+0x70>
 8008b84:	686c      	ldr	r4, [r5, #4]
 8008b86:	69a3      	ldr	r3, [r4, #24]
 8008b88:	60a3      	str	r3, [r4, #8]
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	071a      	lsls	r2, r3, #28
 8008b8e:	d52f      	bpl.n	8008bf0 <__swbuf_r+0x84>
 8008b90:	6923      	ldr	r3, [r4, #16]
 8008b92:	b36b      	cbz	r3, 8008bf0 <__swbuf_r+0x84>
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	b2f6      	uxtb	r6, r6
 8008b9a:	1ac0      	subs	r0, r0, r3
 8008b9c:	6963      	ldr	r3, [r4, #20]
 8008b9e:	4637      	mov	r7, r6
 8008ba0:	4283      	cmp	r3, r0
 8008ba2:	dc04      	bgt.n	8008bae <__swbuf_r+0x42>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f000 f92a 	bl	8008e00 <_fflush_r>
 8008bac:	bb30      	cbnz	r0, 8008bfc <__swbuf_r+0x90>
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	60a3      	str	r3, [r4, #8]
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	6022      	str	r2, [r4, #0]
 8008bbc:	701e      	strb	r6, [r3, #0]
 8008bbe:	6963      	ldr	r3, [r4, #20]
 8008bc0:	4283      	cmp	r3, r0
 8008bc2:	d004      	beq.n	8008bce <__swbuf_r+0x62>
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	07db      	lsls	r3, r3, #31
 8008bc8:	d506      	bpl.n	8008bd8 <__swbuf_r+0x6c>
 8008bca:	2e0a      	cmp	r6, #10
 8008bcc:	d104      	bne.n	8008bd8 <__swbuf_r+0x6c>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	f000 f915 	bl	8008e00 <_fflush_r>
 8008bd6:	b988      	cbnz	r0, 8008bfc <__swbuf_r+0x90>
 8008bd8:	4638      	mov	r0, r7
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	; (8008c08 <__swbuf_r+0x9c>)
 8008bde:	429c      	cmp	r4, r3
 8008be0:	d101      	bne.n	8008be6 <__swbuf_r+0x7a>
 8008be2:	68ac      	ldr	r4, [r5, #8]
 8008be4:	e7cf      	b.n	8008b86 <__swbuf_r+0x1a>
 8008be6:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <__swbuf_r+0xa0>)
 8008be8:	429c      	cmp	r4, r3
 8008bea:	bf08      	it	eq
 8008bec:	68ec      	ldreq	r4, [r5, #12]
 8008bee:	e7ca      	b.n	8008b86 <__swbuf_r+0x1a>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f000 f80c 	bl	8008c10 <__swsetup_r>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d0cb      	beq.n	8008b94 <__swbuf_r+0x28>
 8008bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8008c00:	e7ea      	b.n	8008bd8 <__swbuf_r+0x6c>
 8008c02:	bf00      	nop
 8008c04:	080099fc 	.word	0x080099fc
 8008c08:	08009a1c 	.word	0x08009a1c
 8008c0c:	080099dc 	.word	0x080099dc

08008c10 <__swsetup_r>:
 8008c10:	4b32      	ldr	r3, [pc, #200]	; (8008cdc <__swsetup_r+0xcc>)
 8008c12:	b570      	push	{r4, r5, r6, lr}
 8008c14:	681d      	ldr	r5, [r3, #0]
 8008c16:	4606      	mov	r6, r0
 8008c18:	460c      	mov	r4, r1
 8008c1a:	b125      	cbz	r5, 8008c26 <__swsetup_r+0x16>
 8008c1c:	69ab      	ldr	r3, [r5, #24]
 8008c1e:	b913      	cbnz	r3, 8008c26 <__swsetup_r+0x16>
 8008c20:	4628      	mov	r0, r5
 8008c22:	f000 f981 	bl	8008f28 <__sinit>
 8008c26:	4b2e      	ldr	r3, [pc, #184]	; (8008ce0 <__swsetup_r+0xd0>)
 8008c28:	429c      	cmp	r4, r3
 8008c2a:	d10f      	bne.n	8008c4c <__swsetup_r+0x3c>
 8008c2c:	686c      	ldr	r4, [r5, #4]
 8008c2e:	89a3      	ldrh	r3, [r4, #12]
 8008c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c34:	0719      	lsls	r1, r3, #28
 8008c36:	d42c      	bmi.n	8008c92 <__swsetup_r+0x82>
 8008c38:	06dd      	lsls	r5, r3, #27
 8008c3a:	d411      	bmi.n	8008c60 <__swsetup_r+0x50>
 8008c3c:	2309      	movs	r3, #9
 8008c3e:	6033      	str	r3, [r6, #0]
 8008c40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	e03e      	b.n	8008cca <__swsetup_r+0xba>
 8008c4c:	4b25      	ldr	r3, [pc, #148]	; (8008ce4 <__swsetup_r+0xd4>)
 8008c4e:	429c      	cmp	r4, r3
 8008c50:	d101      	bne.n	8008c56 <__swsetup_r+0x46>
 8008c52:	68ac      	ldr	r4, [r5, #8]
 8008c54:	e7eb      	b.n	8008c2e <__swsetup_r+0x1e>
 8008c56:	4b24      	ldr	r3, [pc, #144]	; (8008ce8 <__swsetup_r+0xd8>)
 8008c58:	429c      	cmp	r4, r3
 8008c5a:	bf08      	it	eq
 8008c5c:	68ec      	ldreq	r4, [r5, #12]
 8008c5e:	e7e6      	b.n	8008c2e <__swsetup_r+0x1e>
 8008c60:	0758      	lsls	r0, r3, #29
 8008c62:	d512      	bpl.n	8008c8a <__swsetup_r+0x7a>
 8008c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c66:	b141      	cbz	r1, 8008c7a <__swsetup_r+0x6a>
 8008c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c6c:	4299      	cmp	r1, r3
 8008c6e:	d002      	beq.n	8008c76 <__swsetup_r+0x66>
 8008c70:	4630      	mov	r0, r6
 8008c72:	f7ff fb2f 	bl	80082d4 <_free_r>
 8008c76:	2300      	movs	r3, #0
 8008c78:	6363      	str	r3, [r4, #52]	; 0x34
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c80:	81a3      	strh	r3, [r4, #12]
 8008c82:	2300      	movs	r3, #0
 8008c84:	6063      	str	r3, [r4, #4]
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f043 0308 	orr.w	r3, r3, #8
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	6923      	ldr	r3, [r4, #16]
 8008c94:	b94b      	cbnz	r3, 8008caa <__swsetup_r+0x9a>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca0:	d003      	beq.n	8008caa <__swsetup_r+0x9a>
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f000 fa05 	bl	80090b4 <__smakebuf_r>
 8008caa:	89a0      	ldrh	r0, [r4, #12]
 8008cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cb0:	f010 0301 	ands.w	r3, r0, #1
 8008cb4:	d00a      	beq.n	8008ccc <__swsetup_r+0xbc>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60a3      	str	r3, [r4, #8]
 8008cba:	6963      	ldr	r3, [r4, #20]
 8008cbc:	425b      	negs	r3, r3
 8008cbe:	61a3      	str	r3, [r4, #24]
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	b943      	cbnz	r3, 8008cd6 <__swsetup_r+0xc6>
 8008cc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cc8:	d1ba      	bne.n	8008c40 <__swsetup_r+0x30>
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	0781      	lsls	r1, r0, #30
 8008cce:	bf58      	it	pl
 8008cd0:	6963      	ldrpl	r3, [r4, #20]
 8008cd2:	60a3      	str	r3, [r4, #8]
 8008cd4:	e7f4      	b.n	8008cc0 <__swsetup_r+0xb0>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e7f7      	b.n	8008cca <__swsetup_r+0xba>
 8008cda:	bf00      	nop
 8008cdc:	2000000c 	.word	0x2000000c
 8008ce0:	080099fc 	.word	0x080099fc
 8008ce4:	08009a1c 	.word	0x08009a1c
 8008ce8:	080099dc 	.word	0x080099dc

08008cec <abort>:
 8008cec:	2006      	movs	r0, #6
 8008cee:	b508      	push	{r3, lr}
 8008cf0:	f000 fa50 	bl	8009194 <raise>
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	f7f9 fb1c 	bl	8002332 <_exit>
	...

08008cfc <__sflush_r>:
 8008cfc:	898a      	ldrh	r2, [r1, #12]
 8008cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d00:	4605      	mov	r5, r0
 8008d02:	0710      	lsls	r0, r2, #28
 8008d04:	460c      	mov	r4, r1
 8008d06:	d457      	bmi.n	8008db8 <__sflush_r+0xbc>
 8008d08:	684b      	ldr	r3, [r1, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dc04      	bgt.n	8008d18 <__sflush_r+0x1c>
 8008d0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	dc01      	bgt.n	8008d18 <__sflush_r+0x1c>
 8008d14:	2000      	movs	r0, #0
 8008d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d1a:	2e00      	cmp	r6, #0
 8008d1c:	d0fa      	beq.n	8008d14 <__sflush_r+0x18>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d24:	682f      	ldr	r7, [r5, #0]
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	d032      	beq.n	8008d90 <__sflush_r+0x94>
 8008d2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	075a      	lsls	r2, r3, #29
 8008d30:	d505      	bpl.n	8008d3e <__sflush_r+0x42>
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	1ac0      	subs	r0, r0, r3
 8008d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d38:	b10b      	cbz	r3, 8008d3e <__sflush_r+0x42>
 8008d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d3c:	1ac0      	subs	r0, r0, r3
 8008d3e:	2300      	movs	r3, #0
 8008d40:	4602      	mov	r2, r0
 8008d42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d44:	4628      	mov	r0, r5
 8008d46:	6a21      	ldr	r1, [r4, #32]
 8008d48:	47b0      	blx	r6
 8008d4a:	1c43      	adds	r3, r0, #1
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	d106      	bne.n	8008d5e <__sflush_r+0x62>
 8008d50:	6829      	ldr	r1, [r5, #0]
 8008d52:	291d      	cmp	r1, #29
 8008d54:	d82c      	bhi.n	8008db0 <__sflush_r+0xb4>
 8008d56:	4a29      	ldr	r2, [pc, #164]	; (8008dfc <__sflush_r+0x100>)
 8008d58:	40ca      	lsrs	r2, r1
 8008d5a:	07d6      	lsls	r6, r2, #31
 8008d5c:	d528      	bpl.n	8008db0 <__sflush_r+0xb4>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	6062      	str	r2, [r4, #4]
 8008d62:	6922      	ldr	r2, [r4, #16]
 8008d64:	04d9      	lsls	r1, r3, #19
 8008d66:	6022      	str	r2, [r4, #0]
 8008d68:	d504      	bpl.n	8008d74 <__sflush_r+0x78>
 8008d6a:	1c42      	adds	r2, r0, #1
 8008d6c:	d101      	bne.n	8008d72 <__sflush_r+0x76>
 8008d6e:	682b      	ldr	r3, [r5, #0]
 8008d70:	b903      	cbnz	r3, 8008d74 <__sflush_r+0x78>
 8008d72:	6560      	str	r0, [r4, #84]	; 0x54
 8008d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d76:	602f      	str	r7, [r5, #0]
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	d0cb      	beq.n	8008d14 <__sflush_r+0x18>
 8008d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d80:	4299      	cmp	r1, r3
 8008d82:	d002      	beq.n	8008d8a <__sflush_r+0x8e>
 8008d84:	4628      	mov	r0, r5
 8008d86:	f7ff faa5 	bl	80082d4 <_free_r>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d8e:	e7c2      	b.n	8008d16 <__sflush_r+0x1a>
 8008d90:	6a21      	ldr	r1, [r4, #32]
 8008d92:	2301      	movs	r3, #1
 8008d94:	4628      	mov	r0, r5
 8008d96:	47b0      	blx	r6
 8008d98:	1c41      	adds	r1, r0, #1
 8008d9a:	d1c7      	bne.n	8008d2c <__sflush_r+0x30>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0c4      	beq.n	8008d2c <__sflush_r+0x30>
 8008da2:	2b1d      	cmp	r3, #29
 8008da4:	d001      	beq.n	8008daa <__sflush_r+0xae>
 8008da6:	2b16      	cmp	r3, #22
 8008da8:	d101      	bne.n	8008dae <__sflush_r+0xb2>
 8008daa:	602f      	str	r7, [r5, #0]
 8008dac:	e7b2      	b.n	8008d14 <__sflush_r+0x18>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db4:	81a3      	strh	r3, [r4, #12]
 8008db6:	e7ae      	b.n	8008d16 <__sflush_r+0x1a>
 8008db8:	690f      	ldr	r7, [r1, #16]
 8008dba:	2f00      	cmp	r7, #0
 8008dbc:	d0aa      	beq.n	8008d14 <__sflush_r+0x18>
 8008dbe:	0793      	lsls	r3, r2, #30
 8008dc0:	bf18      	it	ne
 8008dc2:	2300      	movne	r3, #0
 8008dc4:	680e      	ldr	r6, [r1, #0]
 8008dc6:	bf08      	it	eq
 8008dc8:	694b      	ldreq	r3, [r1, #20]
 8008dca:	1bf6      	subs	r6, r6, r7
 8008dcc:	600f      	str	r7, [r1, #0]
 8008dce:	608b      	str	r3, [r1, #8]
 8008dd0:	2e00      	cmp	r6, #0
 8008dd2:	dd9f      	ble.n	8008d14 <__sflush_r+0x18>
 8008dd4:	4633      	mov	r3, r6
 8008dd6:	463a      	mov	r2, r7
 8008dd8:	4628      	mov	r0, r5
 8008dda:	6a21      	ldr	r1, [r4, #32]
 8008ddc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008de0:	47e0      	blx	ip
 8008de2:	2800      	cmp	r0, #0
 8008de4:	dc06      	bgt.n	8008df4 <__sflush_r+0xf8>
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df0:	81a3      	strh	r3, [r4, #12]
 8008df2:	e790      	b.n	8008d16 <__sflush_r+0x1a>
 8008df4:	4407      	add	r7, r0
 8008df6:	1a36      	subs	r6, r6, r0
 8008df8:	e7ea      	b.n	8008dd0 <__sflush_r+0xd4>
 8008dfa:	bf00      	nop
 8008dfc:	20400001 	.word	0x20400001

08008e00 <_fflush_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	690b      	ldr	r3, [r1, #16]
 8008e04:	4605      	mov	r5, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	b913      	cbnz	r3, 8008e10 <_fflush_r+0x10>
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	bd38      	pop	{r3, r4, r5, pc}
 8008e10:	b118      	cbz	r0, 8008e1a <_fflush_r+0x1a>
 8008e12:	6983      	ldr	r3, [r0, #24]
 8008e14:	b90b      	cbnz	r3, 8008e1a <_fflush_r+0x1a>
 8008e16:	f000 f887 	bl	8008f28 <__sinit>
 8008e1a:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <_fflush_r+0x6c>)
 8008e1c:	429c      	cmp	r4, r3
 8008e1e:	d11b      	bne.n	8008e58 <_fflush_r+0x58>
 8008e20:	686c      	ldr	r4, [r5, #4]
 8008e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0ef      	beq.n	8008e0a <_fflush_r+0xa>
 8008e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e2c:	07d0      	lsls	r0, r2, #31
 8008e2e:	d404      	bmi.n	8008e3a <_fflush_r+0x3a>
 8008e30:	0599      	lsls	r1, r3, #22
 8008e32:	d402      	bmi.n	8008e3a <_fflush_r+0x3a>
 8008e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e36:	f000 f915 	bl	8009064 <__retarget_lock_acquire_recursive>
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	4621      	mov	r1, r4
 8008e3e:	f7ff ff5d 	bl	8008cfc <__sflush_r>
 8008e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e44:	4605      	mov	r5, r0
 8008e46:	07da      	lsls	r2, r3, #31
 8008e48:	d4e0      	bmi.n	8008e0c <_fflush_r+0xc>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	059b      	lsls	r3, r3, #22
 8008e4e:	d4dd      	bmi.n	8008e0c <_fflush_r+0xc>
 8008e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e52:	f000 f908 	bl	8009066 <__retarget_lock_release_recursive>
 8008e56:	e7d9      	b.n	8008e0c <_fflush_r+0xc>
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <_fflush_r+0x70>)
 8008e5a:	429c      	cmp	r4, r3
 8008e5c:	d101      	bne.n	8008e62 <_fflush_r+0x62>
 8008e5e:	68ac      	ldr	r4, [r5, #8]
 8008e60:	e7df      	b.n	8008e22 <_fflush_r+0x22>
 8008e62:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <_fflush_r+0x74>)
 8008e64:	429c      	cmp	r4, r3
 8008e66:	bf08      	it	eq
 8008e68:	68ec      	ldreq	r4, [r5, #12]
 8008e6a:	e7da      	b.n	8008e22 <_fflush_r+0x22>
 8008e6c:	080099fc 	.word	0x080099fc
 8008e70:	08009a1c 	.word	0x08009a1c
 8008e74:	080099dc 	.word	0x080099dc

08008e78 <std>:
 8008e78:	2300      	movs	r3, #0
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e86:	6083      	str	r3, [r0, #8]
 8008e88:	8181      	strh	r1, [r0, #12]
 8008e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e8c:	81c2      	strh	r2, [r0, #14]
 8008e8e:	6183      	str	r3, [r0, #24]
 8008e90:	4619      	mov	r1, r3
 8008e92:	2208      	movs	r2, #8
 8008e94:	305c      	adds	r0, #92	; 0x5c
 8008e96:	f7fb fe0d 	bl	8004ab4 <memset>
 8008e9a:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <std+0x38>)
 8008e9c:	6224      	str	r4, [r4, #32]
 8008e9e:	6263      	str	r3, [r4, #36]	; 0x24
 8008ea0:	4b04      	ldr	r3, [pc, #16]	; (8008eb4 <std+0x3c>)
 8008ea2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ea4:	4b04      	ldr	r3, [pc, #16]	; (8008eb8 <std+0x40>)
 8008ea6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ea8:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <std+0x44>)
 8008eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8008eac:	bd10      	pop	{r4, pc}
 8008eae:	bf00      	nop
 8008eb0:	080091cd 	.word	0x080091cd
 8008eb4:	080091ef 	.word	0x080091ef
 8008eb8:	08009227 	.word	0x08009227
 8008ebc:	0800924b 	.word	0x0800924b

08008ec0 <_cleanup_r>:
 8008ec0:	4901      	ldr	r1, [pc, #4]	; (8008ec8 <_cleanup_r+0x8>)
 8008ec2:	f000 b8af 	b.w	8009024 <_fwalk_reent>
 8008ec6:	bf00      	nop
 8008ec8:	08008e01 	.word	0x08008e01

08008ecc <__sfmoreglue>:
 8008ecc:	2268      	movs	r2, #104	; 0x68
 8008ece:	b570      	push	{r4, r5, r6, lr}
 8008ed0:	1e4d      	subs	r5, r1, #1
 8008ed2:	4355      	muls	r5, r2
 8008ed4:	460e      	mov	r6, r1
 8008ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008eda:	f7ff fa63 	bl	80083a4 <_malloc_r>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	b140      	cbz	r0, 8008ef4 <__sfmoreglue+0x28>
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ee8:	300c      	adds	r0, #12
 8008eea:	60a0      	str	r0, [r4, #8]
 8008eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ef0:	f7fb fde0 	bl	8004ab4 <memset>
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}

08008ef8 <__sfp_lock_acquire>:
 8008ef8:	4801      	ldr	r0, [pc, #4]	; (8008f00 <__sfp_lock_acquire+0x8>)
 8008efa:	f000 b8b3 	b.w	8009064 <__retarget_lock_acquire_recursive>
 8008efe:	bf00      	nop
 8008f00:	200003f9 	.word	0x200003f9

08008f04 <__sfp_lock_release>:
 8008f04:	4801      	ldr	r0, [pc, #4]	; (8008f0c <__sfp_lock_release+0x8>)
 8008f06:	f000 b8ae 	b.w	8009066 <__retarget_lock_release_recursive>
 8008f0a:	bf00      	nop
 8008f0c:	200003f9 	.word	0x200003f9

08008f10 <__sinit_lock_acquire>:
 8008f10:	4801      	ldr	r0, [pc, #4]	; (8008f18 <__sinit_lock_acquire+0x8>)
 8008f12:	f000 b8a7 	b.w	8009064 <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	200003fa 	.word	0x200003fa

08008f1c <__sinit_lock_release>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	; (8008f24 <__sinit_lock_release+0x8>)
 8008f1e:	f000 b8a2 	b.w	8009066 <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	200003fa 	.word	0x200003fa

08008f28 <__sinit>:
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	f7ff fff0 	bl	8008f10 <__sinit_lock_acquire>
 8008f30:	69a3      	ldr	r3, [r4, #24]
 8008f32:	b11b      	cbz	r3, 8008f3c <__sinit+0x14>
 8008f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f38:	f7ff bff0 	b.w	8008f1c <__sinit_lock_release>
 8008f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f40:	6523      	str	r3, [r4, #80]	; 0x50
 8008f42:	4b13      	ldr	r3, [pc, #76]	; (8008f90 <__sinit+0x68>)
 8008f44:	4a13      	ldr	r2, [pc, #76]	; (8008f94 <__sinit+0x6c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	bf08      	it	eq
 8008f4e:	2301      	moveq	r3, #1
 8008f50:	4620      	mov	r0, r4
 8008f52:	bf08      	it	eq
 8008f54:	61a3      	streq	r3, [r4, #24]
 8008f56:	f000 f81f 	bl	8008f98 <__sfp>
 8008f5a:	6060      	str	r0, [r4, #4]
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f000 f81b 	bl	8008f98 <__sfp>
 8008f62:	60a0      	str	r0, [r4, #8]
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 f817 	bl	8008f98 <__sfp>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2104      	movs	r1, #4
 8008f6e:	60e0      	str	r0, [r4, #12]
 8008f70:	6860      	ldr	r0, [r4, #4]
 8008f72:	f7ff ff81 	bl	8008e78 <std>
 8008f76:	2201      	movs	r2, #1
 8008f78:	2109      	movs	r1, #9
 8008f7a:	68a0      	ldr	r0, [r4, #8]
 8008f7c:	f7ff ff7c 	bl	8008e78 <std>
 8008f80:	2202      	movs	r2, #2
 8008f82:	2112      	movs	r1, #18
 8008f84:	68e0      	ldr	r0, [r4, #12]
 8008f86:	f7ff ff77 	bl	8008e78 <std>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	61a3      	str	r3, [r4, #24]
 8008f8e:	e7d1      	b.n	8008f34 <__sinit+0xc>
 8008f90:	08009594 	.word	0x08009594
 8008f94:	08008ec1 	.word	0x08008ec1

08008f98 <__sfp>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	f7ff ffac 	bl	8008ef8 <__sfp_lock_acquire>
 8008fa0:	4b1e      	ldr	r3, [pc, #120]	; (800901c <__sfp+0x84>)
 8008fa2:	681e      	ldr	r6, [r3, #0]
 8008fa4:	69b3      	ldr	r3, [r6, #24]
 8008fa6:	b913      	cbnz	r3, 8008fae <__sfp+0x16>
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7ff ffbd 	bl	8008f28 <__sinit>
 8008fae:	3648      	adds	r6, #72	; 0x48
 8008fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	d503      	bpl.n	8008fc0 <__sfp+0x28>
 8008fb8:	6833      	ldr	r3, [r6, #0]
 8008fba:	b30b      	cbz	r3, 8009000 <__sfp+0x68>
 8008fbc:	6836      	ldr	r6, [r6, #0]
 8008fbe:	e7f7      	b.n	8008fb0 <__sfp+0x18>
 8008fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fc4:	b9d5      	cbnz	r5, 8008ffc <__sfp+0x64>
 8008fc6:	4b16      	ldr	r3, [pc, #88]	; (8009020 <__sfp+0x88>)
 8008fc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fcc:	60e3      	str	r3, [r4, #12]
 8008fce:	6665      	str	r5, [r4, #100]	; 0x64
 8008fd0:	f000 f847 	bl	8009062 <__retarget_lock_init_recursive>
 8008fd4:	f7ff ff96 	bl	8008f04 <__sfp_lock_release>
 8008fd8:	2208      	movs	r2, #8
 8008fda:	4629      	mov	r1, r5
 8008fdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008fe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008fe4:	6025      	str	r5, [r4, #0]
 8008fe6:	61a5      	str	r5, [r4, #24]
 8008fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008fec:	f7fb fd62 	bl	8004ab4 <memset>
 8008ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffc:	3468      	adds	r4, #104	; 0x68
 8008ffe:	e7d9      	b.n	8008fb4 <__sfp+0x1c>
 8009000:	2104      	movs	r1, #4
 8009002:	4638      	mov	r0, r7
 8009004:	f7ff ff62 	bl	8008ecc <__sfmoreglue>
 8009008:	4604      	mov	r4, r0
 800900a:	6030      	str	r0, [r6, #0]
 800900c:	2800      	cmp	r0, #0
 800900e:	d1d5      	bne.n	8008fbc <__sfp+0x24>
 8009010:	f7ff ff78 	bl	8008f04 <__sfp_lock_release>
 8009014:	230c      	movs	r3, #12
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	e7ee      	b.n	8008ff8 <__sfp+0x60>
 800901a:	bf00      	nop
 800901c:	08009594 	.word	0x08009594
 8009020:	ffff0001 	.word	0xffff0001

08009024 <_fwalk_reent>:
 8009024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009028:	4606      	mov	r6, r0
 800902a:	4688      	mov	r8, r1
 800902c:	2700      	movs	r7, #0
 800902e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009036:	f1b9 0901 	subs.w	r9, r9, #1
 800903a:	d505      	bpl.n	8009048 <_fwalk_reent+0x24>
 800903c:	6824      	ldr	r4, [r4, #0]
 800903e:	2c00      	cmp	r4, #0
 8009040:	d1f7      	bne.n	8009032 <_fwalk_reent+0xe>
 8009042:	4638      	mov	r0, r7
 8009044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009048:	89ab      	ldrh	r3, [r5, #12]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d907      	bls.n	800905e <_fwalk_reent+0x3a>
 800904e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009052:	3301      	adds	r3, #1
 8009054:	d003      	beq.n	800905e <_fwalk_reent+0x3a>
 8009056:	4629      	mov	r1, r5
 8009058:	4630      	mov	r0, r6
 800905a:	47c0      	blx	r8
 800905c:	4307      	orrs	r7, r0
 800905e:	3568      	adds	r5, #104	; 0x68
 8009060:	e7e9      	b.n	8009036 <_fwalk_reent+0x12>

08009062 <__retarget_lock_init_recursive>:
 8009062:	4770      	bx	lr

08009064 <__retarget_lock_acquire_recursive>:
 8009064:	4770      	bx	lr

08009066 <__retarget_lock_release_recursive>:
 8009066:	4770      	bx	lr

08009068 <__swhatbuf_r>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	460e      	mov	r6, r1
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	4614      	mov	r4, r2
 8009072:	2900      	cmp	r1, #0
 8009074:	461d      	mov	r5, r3
 8009076:	b096      	sub	sp, #88	; 0x58
 8009078:	da08      	bge.n	800908c <__swhatbuf_r+0x24>
 800907a:	2200      	movs	r2, #0
 800907c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009080:	602a      	str	r2, [r5, #0]
 8009082:	061a      	lsls	r2, r3, #24
 8009084:	d410      	bmi.n	80090a8 <__swhatbuf_r+0x40>
 8009086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800908a:	e00e      	b.n	80090aa <__swhatbuf_r+0x42>
 800908c:	466a      	mov	r2, sp
 800908e:	f000 f903 	bl	8009298 <_fstat_r>
 8009092:	2800      	cmp	r0, #0
 8009094:	dbf1      	blt.n	800907a <__swhatbuf_r+0x12>
 8009096:	9a01      	ldr	r2, [sp, #4]
 8009098:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800909c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090a0:	425a      	negs	r2, r3
 80090a2:	415a      	adcs	r2, r3
 80090a4:	602a      	str	r2, [r5, #0]
 80090a6:	e7ee      	b.n	8009086 <__swhatbuf_r+0x1e>
 80090a8:	2340      	movs	r3, #64	; 0x40
 80090aa:	2000      	movs	r0, #0
 80090ac:	6023      	str	r3, [r4, #0]
 80090ae:	b016      	add	sp, #88	; 0x58
 80090b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080090b4 <__smakebuf_r>:
 80090b4:	898b      	ldrh	r3, [r1, #12]
 80090b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090b8:	079d      	lsls	r5, r3, #30
 80090ba:	4606      	mov	r6, r0
 80090bc:	460c      	mov	r4, r1
 80090be:	d507      	bpl.n	80090d0 <__smakebuf_r+0x1c>
 80090c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	6123      	str	r3, [r4, #16]
 80090c8:	2301      	movs	r3, #1
 80090ca:	6163      	str	r3, [r4, #20]
 80090cc:	b002      	add	sp, #8
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	466a      	mov	r2, sp
 80090d2:	ab01      	add	r3, sp, #4
 80090d4:	f7ff ffc8 	bl	8009068 <__swhatbuf_r>
 80090d8:	9900      	ldr	r1, [sp, #0]
 80090da:	4605      	mov	r5, r0
 80090dc:	4630      	mov	r0, r6
 80090de:	f7ff f961 	bl	80083a4 <_malloc_r>
 80090e2:	b948      	cbnz	r0, 80090f8 <__smakebuf_r+0x44>
 80090e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e8:	059a      	lsls	r2, r3, #22
 80090ea:	d4ef      	bmi.n	80090cc <__smakebuf_r+0x18>
 80090ec:	f023 0303 	bic.w	r3, r3, #3
 80090f0:	f043 0302 	orr.w	r3, r3, #2
 80090f4:	81a3      	strh	r3, [r4, #12]
 80090f6:	e7e3      	b.n	80090c0 <__smakebuf_r+0xc>
 80090f8:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <__smakebuf_r+0x7c>)
 80090fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	9b00      	ldr	r3, [sp, #0]
 8009108:	6120      	str	r0, [r4, #16]
 800910a:	6163      	str	r3, [r4, #20]
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	b15b      	cbz	r3, 8009128 <__smakebuf_r+0x74>
 8009110:	4630      	mov	r0, r6
 8009112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009116:	f000 f8d1 	bl	80092bc <_isatty_r>
 800911a:	b128      	cbz	r0, 8009128 <__smakebuf_r+0x74>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	89a0      	ldrh	r0, [r4, #12]
 800912a:	4305      	orrs	r5, r0
 800912c:	81a5      	strh	r5, [r4, #12]
 800912e:	e7cd      	b.n	80090cc <__smakebuf_r+0x18>
 8009130:	08008ec1 	.word	0x08008ec1

08009134 <_malloc_usable_size_r>:
 8009134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009138:	1f18      	subs	r0, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	bfbc      	itt	lt
 800913e:	580b      	ldrlt	r3, [r1, r0]
 8009140:	18c0      	addlt	r0, r0, r3
 8009142:	4770      	bx	lr

08009144 <_raise_r>:
 8009144:	291f      	cmp	r1, #31
 8009146:	b538      	push	{r3, r4, r5, lr}
 8009148:	4604      	mov	r4, r0
 800914a:	460d      	mov	r5, r1
 800914c:	d904      	bls.n	8009158 <_raise_r+0x14>
 800914e:	2316      	movs	r3, #22
 8009150:	6003      	str	r3, [r0, #0]
 8009152:	f04f 30ff 	mov.w	r0, #4294967295
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800915a:	b112      	cbz	r2, 8009162 <_raise_r+0x1e>
 800915c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009160:	b94b      	cbnz	r3, 8009176 <_raise_r+0x32>
 8009162:	4620      	mov	r0, r4
 8009164:	f000 f830 	bl	80091c8 <_getpid_r>
 8009168:	462a      	mov	r2, r5
 800916a:	4601      	mov	r1, r0
 800916c:	4620      	mov	r0, r4
 800916e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009172:	f000 b817 	b.w	80091a4 <_kill_r>
 8009176:	2b01      	cmp	r3, #1
 8009178:	d00a      	beq.n	8009190 <_raise_r+0x4c>
 800917a:	1c59      	adds	r1, r3, #1
 800917c:	d103      	bne.n	8009186 <_raise_r+0x42>
 800917e:	2316      	movs	r3, #22
 8009180:	6003      	str	r3, [r0, #0]
 8009182:	2001      	movs	r0, #1
 8009184:	e7e7      	b.n	8009156 <_raise_r+0x12>
 8009186:	2400      	movs	r4, #0
 8009188:	4628      	mov	r0, r5
 800918a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800918e:	4798      	blx	r3
 8009190:	2000      	movs	r0, #0
 8009192:	e7e0      	b.n	8009156 <_raise_r+0x12>

08009194 <raise>:
 8009194:	4b02      	ldr	r3, [pc, #8]	; (80091a0 <raise+0xc>)
 8009196:	4601      	mov	r1, r0
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	f7ff bfd3 	b.w	8009144 <_raise_r>
 800919e:	bf00      	nop
 80091a0:	2000000c 	.word	0x2000000c

080091a4 <_kill_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	2300      	movs	r3, #0
 80091a8:	4d06      	ldr	r5, [pc, #24]	; (80091c4 <_kill_r+0x20>)
 80091aa:	4604      	mov	r4, r0
 80091ac:	4608      	mov	r0, r1
 80091ae:	4611      	mov	r1, r2
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	f7f9 f8ae 	bl	8002312 <_kill>
 80091b6:	1c43      	adds	r3, r0, #1
 80091b8:	d102      	bne.n	80091c0 <_kill_r+0x1c>
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	b103      	cbz	r3, 80091c0 <_kill_r+0x1c>
 80091be:	6023      	str	r3, [r4, #0]
 80091c0:	bd38      	pop	{r3, r4, r5, pc}
 80091c2:	bf00      	nop
 80091c4:	200003f4 	.word	0x200003f4

080091c8 <_getpid_r>:
 80091c8:	f7f9 b89c 	b.w	8002304 <_getpid>

080091cc <__sread>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	460c      	mov	r4, r1
 80091d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d4:	f000 f894 	bl	8009300 <_read_r>
 80091d8:	2800      	cmp	r0, #0
 80091da:	bfab      	itete	ge
 80091dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091de:	89a3      	ldrhlt	r3, [r4, #12]
 80091e0:	181b      	addge	r3, r3, r0
 80091e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091e6:	bfac      	ite	ge
 80091e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091ea:	81a3      	strhlt	r3, [r4, #12]
 80091ec:	bd10      	pop	{r4, pc}

080091ee <__swrite>:
 80091ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f2:	461f      	mov	r7, r3
 80091f4:	898b      	ldrh	r3, [r1, #12]
 80091f6:	4605      	mov	r5, r0
 80091f8:	05db      	lsls	r3, r3, #23
 80091fa:	460c      	mov	r4, r1
 80091fc:	4616      	mov	r6, r2
 80091fe:	d505      	bpl.n	800920c <__swrite+0x1e>
 8009200:	2302      	movs	r3, #2
 8009202:	2200      	movs	r2, #0
 8009204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009208:	f000 f868 	bl	80092dc <_lseek_r>
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	4632      	mov	r2, r6
 8009210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009214:	81a3      	strh	r3, [r4, #12]
 8009216:	4628      	mov	r0, r5
 8009218:	463b      	mov	r3, r7
 800921a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800921e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009222:	f000 b817 	b.w	8009254 <_write_r>

08009226 <__sseek>:
 8009226:	b510      	push	{r4, lr}
 8009228:	460c      	mov	r4, r1
 800922a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800922e:	f000 f855 	bl	80092dc <_lseek_r>
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	bf15      	itete	ne
 8009238:	6560      	strne	r0, [r4, #84]	; 0x54
 800923a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800923e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009242:	81a3      	strheq	r3, [r4, #12]
 8009244:	bf18      	it	ne
 8009246:	81a3      	strhne	r3, [r4, #12]
 8009248:	bd10      	pop	{r4, pc}

0800924a <__sclose>:
 800924a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800924e:	f000 b813 	b.w	8009278 <_close_r>
	...

08009254 <_write_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	4611      	mov	r1, r2
 800925c:	2200      	movs	r2, #0
 800925e:	4d05      	ldr	r5, [pc, #20]	; (8009274 <_write_r+0x20>)
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f7f9 f88c 	bl	8002380 <_write>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_write_r+0x1e>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_write_r+0x1e>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	200003f4 	.word	0x200003f4

08009278 <_close_r>:
 8009278:	b538      	push	{r3, r4, r5, lr}
 800927a:	2300      	movs	r3, #0
 800927c:	4d05      	ldr	r5, [pc, #20]	; (8009294 <_close_r+0x1c>)
 800927e:	4604      	mov	r4, r0
 8009280:	4608      	mov	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7f9 f898 	bl	80023b8 <_close>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d102      	bne.n	8009292 <_close_r+0x1a>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b103      	cbz	r3, 8009292 <_close_r+0x1a>
 8009290:	6023      	str	r3, [r4, #0]
 8009292:	bd38      	pop	{r3, r4, r5, pc}
 8009294:	200003f4 	.word	0x200003f4

08009298 <_fstat_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	2300      	movs	r3, #0
 800929c:	4d06      	ldr	r5, [pc, #24]	; (80092b8 <_fstat_r+0x20>)
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	4611      	mov	r1, r2
 80092a4:	602b      	str	r3, [r5, #0]
 80092a6:	f7f9 f892 	bl	80023ce <_fstat>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d102      	bne.n	80092b4 <_fstat_r+0x1c>
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	b103      	cbz	r3, 80092b4 <_fstat_r+0x1c>
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	bf00      	nop
 80092b8:	200003f4 	.word	0x200003f4

080092bc <_isatty_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	2300      	movs	r3, #0
 80092c0:	4d05      	ldr	r5, [pc, #20]	; (80092d8 <_isatty_r+0x1c>)
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	f7f9 f890 	bl	80023ec <_isatty>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_isatty_r+0x1a>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_isatty_r+0x1a>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	200003f4 	.word	0x200003f4

080092dc <_lseek_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4604      	mov	r4, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	2200      	movs	r2, #0
 80092e6:	4d05      	ldr	r5, [pc, #20]	; (80092fc <_lseek_r+0x20>)
 80092e8:	602a      	str	r2, [r5, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f7f9 f888 	bl	8002400 <_lseek>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_lseek_r+0x1e>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_lseek_r+0x1e>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	200003f4 	.word	0x200003f4

08009300 <_read_r>:
 8009300:	b538      	push	{r3, r4, r5, lr}
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	4611      	mov	r1, r2
 8009308:	2200      	movs	r2, #0
 800930a:	4d05      	ldr	r5, [pc, #20]	; (8009320 <_read_r+0x20>)
 800930c:	602a      	str	r2, [r5, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	f7f9 f819 	bl	8002346 <_read>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_read_r+0x1e>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_read_r+0x1e>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	200003f4 	.word	0x200003f4

08009324 <_init>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	bf00      	nop
 8009328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932a:	bc08      	pop	{r3}
 800932c:	469e      	mov	lr, r3
 800932e:	4770      	bx	lr

08009330 <_fini>:
 8009330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009332:	bf00      	nop
 8009334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009336:	bc08      	pop	{r3}
 8009338:	469e      	mov	lr, r3
 800933a:	4770      	bx	lr
