
pzem_dht11_stm32f03c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800a098  0800a098  0001a098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e4  0800a7e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7e4  0800a7e4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7e4  0800a7e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e4  0800a7e4  0001a7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a7ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  200001e0  0800a9cc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800a9cc  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d554  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ca  00000000  00000000  0002d75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0002fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  000309c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018de6  00000000  00000000  00031698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbd0  00000000  00000000  0004a47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000883cd  00000000  00000000  0005a04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e241b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d48  00000000  00000000  000e246c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a07c 	.word	0x0800a07c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a07c 	.word	0x0800a07c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e02:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e0e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000e2e:	bf00      	nop
     __ASM volatile ("NOP");
 8000e30:	bf00      	nop
 __ASM volatile ("NOP");
 8000e32:	bf00      	nop

  /* Check if clock cycle counter has started */
	
			 if(DWT->CYCCNT)
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e000      	b.n	8000e42 <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8000e40:	2301      	movs	r3, #1
				}
				

		
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000edf0 	.word	0xe000edf0
 8000e50:	e0001000 	.word	0xe0001000

08000e54 <delay>:

 void delay(volatile uint32_t microseconds)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <delay+0x40>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e62:	f003 f9a9 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <delay+0x44>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e78:	bf00      	nop
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <delay+0x40>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3f8      	bcc.n	8000e7a <delay+0x26>
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e0001000 	.word	0xe0001000
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f001 ffad 	bl	8002e28 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 ff90 	bl	8002e28 <HAL_GPIO_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DHT_Start>:


void DHT_Start (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f14:	f7ff ff6e 	bl	8000df4 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f18:	2101      	movs	r1, #1
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <DHT_Start+0x40>)
 8000f1c:	f7ff ffbe 	bl	8000e9c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 8000f20:	2200      	movs	r2, #0
 8000f22:	2101      	movs	r1, #1
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <DHT_Start+0x40>)
 8000f26:	f002 f91a 	bl	800315e <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000f2a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f2e:	f7ff ff91 	bl	8000e54 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 8000f32:	2201      	movs	r2, #1
 8000f34:	2101      	movs	r1, #1
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <DHT_Start+0x40>)
 8000f38:	f002 f911 	bl	800315e <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 8000f3c:	201e      	movs	r0, #30
 8000f3e:	f7ff ff89 	bl	8000e54 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000f42:	2101      	movs	r1, #1
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <DHT_Start+0x40>)
 8000f46:	f7ff ffc6 	bl	8000ed6 <Set_Pin_Input>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010800 	.word	0x40010800

08000f54 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	delay (50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f7ff ff78 	bl	8000e54 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000f64:	2101      	movs	r1, #1
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <DHT_Check_Response+0x58>)
 8000f68:	f002 f8e2 	bl	8003130 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10e      	bne.n	8000f90 <DHT_Check_Response+0x3c>
	{
		delay (100);
 8000f72:	2064      	movs	r0, #100	; 0x64
 8000f74:	f7ff ff6e 	bl	8000e54 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) 
 8000f78:	2101      	movs	r1, #1
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <DHT_Check_Response+0x58>)
 8000f7c:	f002 f8d8 	bl	8003130 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <DHT_Check_Response+0x38>
		{
			Response = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e001      	b.n	8000f90 <DHT_Check_Response+0x3c>
		}
		else 
		{
			Response = -1;
 8000f8c:	23ff      	movs	r3, #255	; 0xff
 8000f8e:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f90:	bf00      	nop
 8000f92:	2101      	movs	r1, #1
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <DHT_Check_Response+0x58>)
 8000f96:	f002 f8cb 	bl	8003130 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f8      	bne.n	8000f92 <DHT_Check_Response+0x3e>

	return Response;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010800 	.word	0x40010800

08000fb0 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	e037      	b.n	800102c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000fbc:	bf00      	nop
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <DHT_Read+0x8c>)
 8000fc2:	f002 f8b5 	bl	8003130 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f8      	beq.n	8000fbe <DHT_Read+0xe>
		delay (50);   // wait for 40 us
 8000fcc:	2032      	movs	r0, #50	; 0x32
 8000fce:	f7ff ff41 	bl	8000e54 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4819      	ldr	r0, [pc, #100]	; (800103c <DHT_Read+0x8c>)
 8000fd6:	f002 f8ab 	bl	8003130 <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	e00b      	b.n	8001016 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	f1c3 0307 	rsb	r3, r3, #7
 8001004:	2201      	movs	r2, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	b25a      	sxtb	r2, r3
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4313      	orrs	r3, r2
 8001012:	b25b      	sxtb	r3, r3
 8001014:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001016:	bf00      	nop
 8001018:	2101      	movs	r1, #1
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <DHT_Read+0x8c>)
 800101c:	f002 f888 	bl	8003130 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f8      	bne.n	8001018 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	3301      	adds	r3, #1
 800102a:	71bb      	strb	r3, [r7, #6]
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d9c4      	bls.n	8000fbc <DHT_Read+0xc>
	}
	return i;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010800 	.word	0x40010800

08001040 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	DHT_Start ();
 8001048:	f7ff ff62 	bl	8000f10 <DHT_Start>
	Presence = DHT_Check_Response ();
 800104c:	f7ff ff82 	bl	8000f54 <DHT_Check_Response>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <DHT_GetData+0xa0>)
 8001056:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001058:	f7ff ffaa 	bl	8000fb0 <DHT_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <DHT_GetData+0xa4>)
 8001062:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001064:	f7ff ffa4 	bl	8000fb0 <DHT_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <DHT_GetData+0xa8>)
 800106e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001070:	f7ff ff9e 	bl	8000fb0 <DHT_Read>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <DHT_GetData+0xac>)
 800107a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 800107c:	f7ff ff98 	bl	8000fb0 <DHT_Read>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <DHT_GetData+0xb0>)
 8001086:	701a      	strb	r2, [r3, #0]

	
	SUM = DHT_Read();
 8001088:	f7ff ff92 	bl	8000fb0 <DHT_Read>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <DHT_GetData+0xb4>)
 8001092:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <DHT_GetData+0xb4>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <DHT_GetData+0xa4>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <DHT_GetData+0xa8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <DHT_GetData+0xac>)
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <DHT_GetData+0xb0>)
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d10f      	bne.n	80010d6 <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <DHT_GetData+0xac>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe0a 	bl	8000cd4 <__aeabi_ui2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <DHT_GetData+0xa4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe02 	bl	8000cd4 <__aeabi_ui2f>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000202 	.word	0x20000202
 80010e4:	200001fc 	.word	0x200001fc
 80010e8:	200001fd 	.word	0x200001fd
 80010ec:	200001fe 	.word	0x200001fe
 80010f0:	200001ff 	.word	0x200001ff
 80010f4:	20000200 	.word	0x20000200

080010f8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80010f8:	b4b0      	push	{r4, r5, r7}
 80010fa:	b08f      	sub	sp, #60	; 0x3c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001100:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001106:	2307      	movs	r3, #7
 8001108:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800110c:	2307      	movs	r3, #7
 800110e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001112:	2301      	movs	r3, #1
 8001114:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001124:	2308      	movs	r3, #8
 8001126:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	461d      	mov	r5, r3
 800112c:	f107 040c 	add.w	r4, r7, #12
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800113c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	373c      	adds	r7, #60	; 0x3c
 8001144:	46bd      	mov	sp, r7
 8001146:	bcb0      	pop	{r4, r5, r7}
 8001148:	4770      	bx	lr

0800114a <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6898      	ldr	r0, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	899b      	ldrh	r3, [r3, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	f001 fffe 	bl	800315e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f001 fc7e 	bl	8002a64 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	899b      	ldrh	r3, [r3, #12]
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	f001 fff3 	bl	800315e <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001178:	2064      	movs	r0, #100	; 0x64
 800117a:	f001 fc73 	bl	8002a64 <HAL_Delay>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001190:	2101      	movs	r1, #1
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f99f 	bl	80014d6 <LoRa_read>
 8001198:	4603      	mov	r3, r0
 800119a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d107      	bne.n	80011b6 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	f023 0307 	bic.w	r3, r3, #7
 80011ac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
 80011b4:	e03e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10c      	bne.n	80011d6 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80011bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011c0:	f023 0307 	bic.w	r3, r3, #7
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	61da      	str	r2, [r3, #28]
 80011d4:	e02e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d10c      	bne.n	80011f6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80011dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011e0:	f023 0307 	bic.w	r3, r3, #7
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	f043 0303 	orr.w	r3, r3, #3
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	61da      	str	r2, [r3, #28]
 80011f4:	e01e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d10c      	bne.n	8001216 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80011fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001200:	f023 0307 	bic.w	r3, r3, #7
 8001204:	b25b      	sxtb	r3, r3
 8001206:	f043 0305 	orr.w	r3, r3, #5
 800120a:	b25b      	sxtb	r3, r3
 800120c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2205      	movs	r2, #5
 8001212:	61da      	str	r2, [r3, #28]
 8001214:	e00e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b06      	cmp	r3, #6
 800121a:	d10b      	bne.n	8001234 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800121c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001220:	f023 0307 	bic.w	r3, r3, #7
 8001224:	b25b      	sxtb	r3, r3
 8001226:	f043 0306 	orr.w	r3, r3, #6
 800122a:	b25b      	sxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2206      	movs	r2, #6
 8001232:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	461a      	mov	r2, r3
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f965 	bl	800150a <LoRa_write>
	//HAL_Delay(10);
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	889b      	ldrh	r3, [r3, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	f001 ff7b 	bl	800315e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6998      	ldr	r0, [r3, #24]
 800126c:	88fa      	ldrh	r2, [r7, #6]
 800126e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	f003 f874 	bl	8004360 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001278:	bf00      	nop
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fc5d 	bl	8004b3e <HAL_SPI_GetState>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d1f7      	bne.n	800127a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6998      	ldr	r0, [r3, #24]
 800128e:	8b3a      	ldrh	r2, [r7, #24]
 8001290:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	f003 f99f 	bl	80045d8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800129a:	bf00      	nop
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fc4c 	bl	8004b3e <HAL_SPI_GetState>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d1f7      	bne.n	800129c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	889b      	ldrh	r3, [r3, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 ff51 	bl	800315e <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	f001 ff3d 	bl	800315e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6998      	ldr	r0, [r3, #24]
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	f003 f836 	bl	8004360 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012f4:	bf00      	nop
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 fc1f 	bl	8004b3e <HAL_SPI_GetState>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d1f7      	bne.n	80012f6 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6998      	ldr	r0, [r3, #24]
 800130a:	8b3a      	ldrh	r2, [r7, #24]
 800130c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	f003 f825 	bl	8004360 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001316:	bf00      	nop
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fc0e 	bl	8004b3e <HAL_SPI_GetState>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d1f7      	bne.n	8001318 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	f001 ff13 	bl	800315e <HAL_GPIO_WritePin>
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	04db      	lsls	r3, r3, #19
 800134e:	115b      	asrs	r3, r3, #5
 8001350:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0c1b      	lsrs	r3, r3, #16
 8001356:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	461a      	mov	r2, r3
 800135c:	2106      	movs	r1, #6
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f8d3 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 8001364:	2005      	movs	r0, #5
 8001366:	f001 fb7d 	bl	8002a64 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001370:	7afb      	ldrb	r3, [r7, #11]
 8001372:	461a      	mov	r2, r3
 8001374:	2107      	movs	r1, #7
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f8c7 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 800137c:	2005      	movs	r0, #5
 800137e:	f001 fb71 	bl	8002a64 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	461a      	mov	r2, r3
 800138a:	2108      	movs	r1, #8
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f8bc 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 8001392:	2005      	movs	r0, #5
 8001394:	f001 fb66 	bl	8002a64 <HAL_Delay>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	dd01      	ble.n	80013b4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80013b0:	230c      	movs	r3, #12
 80013b2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	dc01      	bgt.n	80013be <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80013ba:	2307      	movs	r3, #7
 80013bc:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013be:	211e      	movs	r1, #30
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f888 	bl	80014d6 <LoRa_read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80013ca:	200a      	movs	r0, #10
 80013cc:	f001 fb4a 	bl	8002a64 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	461a      	mov	r2, r3
 80013e8:	211e      	movs	r1, #30
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f88d 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 80013f0:	200a      	movs	r0, #10
 80013f2:	f001 fb37 	bl	8002a64 <HAL_Delay>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	461a      	mov	r2, r3
 800140e:	2109      	movs	r1, #9
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f87a 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 8001416:	200a      	movs	r0, #10
 8001418:	f001 fb24 	bl	8002a64 <HAL_Delay>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	2b2c      	cmp	r3, #44	; 0x2c
 8001438:	d801      	bhi.n	800143e <LoRa_setOCP+0x1a>
		current = 45;
 800143a:	232d      	movs	r3, #45	; 0x2d
 800143c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	2bf0      	cmp	r3, #240	; 0xf0
 8001442:	d901      	bls.n	8001448 <LoRa_setOCP+0x24>
		current = 240;
 8001444:	23f0      	movs	r3, #240	; 0xf0
 8001446:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b78      	cmp	r3, #120	; 0x78
 800144c:	d809      	bhi.n	8001462 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	3b2d      	subs	r3, #45	; 0x2d
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <LoRa_setOCP+0x78>)
 8001454:	fb82 1203 	smull	r1, r2, r2, r3
 8001458:	1052      	asrs	r2, r2, #1
 800145a:	17db      	asrs	r3, r3, #31
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e00b      	b.n	800147a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2bf0      	cmp	r3, #240	; 0xf0
 8001466:	d808      	bhi.n	800147a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	331e      	adds	r3, #30
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <LoRa_setOCP+0x78>)
 800146e:	fb82 1203 	smull	r1, r2, r2, r3
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	17db      	asrs	r3, r3, #31
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3320      	adds	r3, #32
 800147e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	461a      	mov	r2, r3
 8001484:	210b      	movs	r1, #11
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f83f 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 800148c:	200a      	movs	r0, #10
 800148e:	f001 fae9 	bl	8002a64 <HAL_Delay>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	66666667 	.word	0x66666667

080014a0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80014a8:	211e      	movs	r1, #30
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f813 	bl	80014d6 <LoRa_read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f043 0307 	orr.w	r3, r3, #7
 80014ba:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	461a      	mov	r2, r3
 80014c0:	211e      	movs	r1, #30
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f821 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f001 facb 	bl	8002a64 <HAL_Delay>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af02      	add	r7, sp, #8
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80014ec:	f107 030f 	add.w	r3, r7, #15
 80014f0:	f107 010e 	add.w	r1, r7, #14
 80014f4:	2201      	movs	r2, #1
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fea4 	bl	8001248 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af02      	add	r7, sp, #8
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
 8001516:	4613      	mov	r3, r2
 8001518:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001520:	b2db      	uxtb	r3, r3
 8001522:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001524:	78bb      	ldrb	r3, [r7, #2]
 8001526:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001528:	f107 030f 	add.w	r3, r7, #15
 800152c:	f107 010e 	add.w	r1, r7, #14
 8001530:	2201      	movs	r2, #1
 8001532:	9200      	str	r2, [sp, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fec4 	bl	80012c4 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	461a      	mov	r2, r3
 8001550:	460b      	mov	r3, r1
 8001552:	72fb      	strb	r3, [r7, #11]
 8001554:	4613      	mov	r3, r2
 8001556:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800155e:	b2db      	uxtb	r3, r3
 8001560:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	f001 fdf6 	bl	800315e <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6998      	ldr	r0, [r3, #24]
 8001576:	f107 0117 	add.w	r1, r7, #23
 800157a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800157e:	2201      	movs	r2, #1
 8001580:	f002 feee 	bl	8004360 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001584:	bf00      	nop
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4618      	mov	r0, r3
 800158c:	f003 fad7 	bl	8004b3e <HAL_SPI_GetState>
 8001590:	4603      	mov	r3, r0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d1f7      	bne.n	8001586 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6998      	ldr	r0, [r3, #24]
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	b29a      	uxth	r2, r3
 800159e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f002 fedc 	bl	8004360 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80015a8:	bf00      	nop
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fac5 	bl	8004b3e <HAL_SPI_GetState>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d1f7      	bne.n	80015aa <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	889b      	ldrh	r3, [r3, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4619      	mov	r1, r3
 80015c6:	f001 fdca 	bl	800315e <HAL_GPIO_WritePin>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]

	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	4611      	mov	r1, r2
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001602:	2101      	movs	r1, #1
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff fdbe 	bl	8001186 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800160a:	210e      	movs	r1, #14
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ff62 	bl	80014d6 <LoRa_read>
 8001612:	4603      	mov	r3, r0
 8001614:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	461a      	mov	r2, r3
 800161a:	210d      	movs	r1, #13
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff74 	bl	800150a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	461a      	mov	r2, r3
 8001626:	2122      	movs	r1, #34	; 0x22
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff ff6e 	bl	800150a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	2100      	movs	r1, #0
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff ff85 	bl	8001544 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800163a:	2103      	movs	r1, #3
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fda2 	bl	8001186 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001642:	2112      	movs	r1, #18
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff ff46 	bl	80014d6 <LoRa_read>
 800164a:	4603      	mov	r3, r0
 800164c:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800164e:	7cfb      	ldrb	r3, [r7, #19]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00a      	beq.n	800166e <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	2112      	movs	r1, #18
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff ff54 	bl	800150a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001662:	6979      	ldr	r1, [r7, #20]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fd8e 	bl	8001186 <LoRa_gotoMode>
			return 1;
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	3b01      	subs	r3, #1
 8001672:	80bb      	strh	r3, [r7, #4]
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7ff fd82 	bl	8001186 <LoRa_gotoMode>
				return 0;
 8001682:	2300      	movs	r3, #0
 8001684:	e003      	b.n	800168e <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f001 f9ec 	bl	8002a64 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800168c:	e7d9      	b.n	8001642 <LoRa_transmit+0x5c>
	}

}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ff97 	bl	80015d2 <LoRa_isvalid>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8093 	beq.w	80017d2 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80016ac:	2100      	movs	r1, #0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fd69 	bl	8001186 <LoRa_gotoMode>
			HAL_Delay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f001 f9d5 	bl	8002a64 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80016ba:	2101      	movs	r1, #1
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff0a 	bl	80014d6 <LoRa_read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f001 f9cc 	bl	8002a64 <HAL_Delay>
			data = read | 0x80;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016d2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2101      	movs	r1, #1
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff15 	bl	800150a <LoRa_write>
			HAL_Delay(100);
 80016e0:	2064      	movs	r0, #100	; 0x64
 80016e2:	f001 f9bf 	bl	8002a64 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fe27 	bl	8001340 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016f8:	4619      	mov	r1, r3
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe7f 	bl	80013fe <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe8b 	bl	8001424 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800170e:	2223      	movs	r2, #35	; 0x23
 8001710:	210c      	movs	r1, #12
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fef9 	bl	800150a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fec1 	bl	80014a0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fe3a 	bl	80013a0 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800172c:	22ff      	movs	r2, #255	; 0xff
 800172e:	211f      	movs	r1, #31
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff feea 	bl	800150a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4413      	add	r3, r2
 8001750:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	461a      	mov	r2, r3
 8001756:	211d      	movs	r1, #29
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fed6 	bl	800150a <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	2120      	movs	r1, #32
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fecc 	bl	800150a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	2121      	movs	r1, #33	; 0x21
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fec4 	bl	800150a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fea6 	bl	80014d6 <LoRa_read>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001794:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	461a      	mov	r2, r3
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff feb4 	bl	800150a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80017a2:	2101      	movs	r1, #1
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fcee 	bl	8001186 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f001 f957 	bl	8002a64 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80017b6:	2142      	movs	r1, #66	; 0x42
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe8c 	bl	80014d6 <LoRa_read>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	d101      	bne.n	80017cc <LoRa_init+0x136>
				return LORA_OK;
 80017c8:	23c8      	movs	r3, #200	; 0xc8
 80017ca:	e004      	b.n	80017d6 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80017cc:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80017d0:	e001      	b.n	80017d6 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80017d2:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f023 030f 	bic.w	r3, r3, #15
 80017f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	f043 030c 	orr.w	r3, r3, #12
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	b2db      	uxtb	r3, r3
 800180a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	f043 030c 	orr.w	r3, r3, #12
 8001812:	b2db      	uxtb	r3, r3
 8001814:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001816:	7bbb      	ldrb	r3, [r7, #14]
 8001818:	f043 0308 	orr.w	r3, r3, #8
 800181c:	b2db      	uxtb	r3, r3
 800181e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001820:	f107 0208 	add.w	r2, r7, #8
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2304      	movs	r3, #4
 800182a:	214e      	movs	r1, #78	; 0x4e
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <lcd_send_cmd+0x5c>)
 800182e:	f001 fdf3 	bl	8003418 <HAL_I2C_Master_Transmit>
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000027c 	.word	0x2000027c

08001840 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af02      	add	r7, sp, #8
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f023 030f 	bic.w	r3, r3, #15
 8001850:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	f043 030d 	orr.w	r3, r3, #13
 800185e:	b2db      	uxtb	r3, r3
 8001860:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	f043 0309 	orr.w	r3, r3, #9
 8001868:	b2db      	uxtb	r3, r3
 800186a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800186c:	7bbb      	ldrb	r3, [r7, #14]
 800186e:	f043 030d 	orr.w	r3, r3, #13
 8001872:	b2db      	uxtb	r3, r3
 8001874:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	f043 0309 	orr.w	r3, r3, #9
 800187c:	b2db      	uxtb	r3, r3
 800187e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001880:	f107 0208 	add.w	r2, r7, #8
 8001884:	2364      	movs	r3, #100	; 0x64
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2304      	movs	r3, #4
 800188a:	214e      	movs	r1, #78	; 0x4e
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <lcd_send_data+0x5c>)
 800188e:	f001 fdc3 	bl	8003418 <HAL_I2C_Master_Transmit>
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000027c 	.word	0x2000027c

080018a0 <lcd_init>:

void lcd_init (void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80018a4:	2033      	movs	r0, #51	; 0x33
 80018a6:	f7ff ff9b 	bl	80017e0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80018aa:	2032      	movs	r0, #50	; 0x32
 80018ac:	f7ff ff98 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(50);
 80018b0:	2032      	movs	r0, #50	; 0x32
 80018b2:	f001 f8d7 	bl	8002a64 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80018b6:	2028      	movs	r0, #40	; 0x28
 80018b8:	f7ff ff92 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(50);
 80018bc:	2032      	movs	r0, #50	; 0x32
 80018be:	f001 f8d1 	bl	8002a64 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff ff8c 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(50);
 80018c8:	2032      	movs	r0, #50	; 0x32
 80018ca:	f001 f8cb 	bl	8002a64 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80018ce:	2006      	movs	r0, #6
 80018d0:	f7ff ff86 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(50);
 80018d4:	2032      	movs	r0, #50	; 0x32
 80018d6:	f001 f8c5 	bl	8002a64 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 80018da:	200c      	movs	r0, #12
 80018dc:	f7ff ff80 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(50);
 80018e0:	2032      	movs	r0, #50	; 0x32
 80018e2:	f001 f8bf 	bl	8002a64 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80018e6:	2002      	movs	r0, #2
 80018e8:	f7ff ff7a 	bl	80017e0 <lcd_send_cmd>
	HAL_Delay(50);
 80018ec:	2032      	movs	r0, #50	; 0x32
 80018ee:	f001 f8b9 	bl	8002a64 <HAL_Delay>
	lcd_send_cmd (0x80);
 80018f2:	2080      	movs	r0, #128	; 0x80
 80018f4:	f7ff ff74 	bl	80017e0 <lcd_send_cmd>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001904:	e006      	b.n	8001914 <lcd_send_string+0x18>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff96 	bl	8001840 <lcd_send_data>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f4      	bne.n	8001906 <lcd_send_string+0xa>
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800192a:	2001      	movs	r0, #1
 800192c:	f7ff ff58 	bl	80017e0 <lcd_send_cmd>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b2db      	uxtb	r3, r3
 8001950:	337f      	adds	r3, #127	; 0x7f
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	e008      	b.n	8001968 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3340      	adds	r3, #64	; 0x40
 800195c:	b2db      	uxtb	r3, r3
 800195e:	b25b      	sxtb	r3, r3
 8001960:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001964:	b25b      	sxtb	r3, r3
 8001966:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff38 	bl	80017e0 <lcd_send_cmd>
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <spi_Transmit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void spi_Transmit(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b096      	sub	sp, #88	; 0x58
 800197e:	af0e      	add	r7, sp, #56	; 0x38
	DHT_GetData(&DHT11_Data);
 8001980:	4843      	ldr	r0, [pc, #268]	; (8001a90 <spi_Transmit+0x118>)
 8001982:	f7ff fb5d 	bl	8001040 <DHT_GetData>
	temp_value = DHT11_Data.Temperature;
 8001986:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <spi_Transmit+0x118>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a42      	ldr	r2, [pc, #264]	; (8001a94 <spi_Transmit+0x11c>)
 800198c:	6013      	str	r3, [r2, #0]
	rh_value = DHT11_Data.Humidity;
 800198e:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <spi_Transmit+0x118>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a41      	ldr	r2, [pc, #260]	; (8001a98 <spi_Transmit+0x120>)
 8001994:	6013      	str	r3, [r2, #0]

	updateValues(&PZEM);
 8001996:	4841      	ldr	r0, [pc, #260]	; (8001a9c <spi_Transmit+0x124>)
 8001998:	f000 fcc0 	bl	800231c <updateValues>
	volt = PZEM.values.voltage;
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <spi_Transmit+0x124>)
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	4a3f      	ldr	r2, [pc, #252]	; (8001aa0 <spi_Transmit+0x128>)
 80019a2:	6013      	str	r3, [r2, #0]
	curr = PZEM.values.current;
 80019a4:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <spi_Transmit+0x124>)
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	4a3e      	ldr	r2, [pc, #248]	; (8001aa4 <spi_Transmit+0x12c>)
 80019aa:	6013      	str	r3, [r2, #0]
	power = PZEM.values.power;
 80019ac:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <spi_Transmit+0x124>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <spi_Transmit+0x130>)
 80019b2:	6013      	str	r3, [r2, #0]
	energy = PZEM.values.energy;
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <spi_Transmit+0x124>)
 80019b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b8:	4a3c      	ldr	r2, [pc, #240]	; (8001aac <spi_Transmit+0x134>)
 80019ba:	6013      	str	r3, [r2, #0]
	freq = PZEM.values.frequency;
 80019bc:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <spi_Transmit+0x124>)
 80019be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c0:	4a3b      	ldr	r2, [pc, #236]	; (8001ab0 <spi_Transmit+0x138>)
 80019c2:	6013      	str	r3, [r2, #0]
	pf = PZEM.values.pf;
 80019c4:	4b35      	ldr	r3, [pc, #212]	; (8001a9c <spi_Transmit+0x124>)
 80019c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c8:	4a3a      	ldr	r2, [pc, #232]	; (8001ab4 <spi_Transmit+0x13c>)
 80019ca:	6013      	str	r3, [r2, #0]

	sprintf(value_array, "1,%.1f,%.1f,%.1f,%.3f,%.1f,%.3f,%.1f,%.2f,\r\n", temp_value, rh_value, volt, curr, power, energy, freq, pf);
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <spi_Transmit+0x11c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fd29 	bl	8000428 <__aeabi_f2d>
 80019d6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80019da:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <spi_Transmit+0x120>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fd22 	bl	8000428 <__aeabi_f2d>
 80019e4:	4682      	mov	sl, r0
 80019e6:	468b      	mov	fp, r1
 80019e8:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <spi_Transmit+0x128>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fd1b 	bl	8000428 <__aeabi_f2d>
 80019f2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <spi_Transmit+0x12c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd14 	bl	8000428 <__aeabi_f2d>
 8001a00:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <spi_Transmit+0x130>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd0d 	bl	8000428 <__aeabi_f2d>
 8001a0e:	e9c7 0100 	strd	r0, r1, [r7]
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <spi_Transmit+0x134>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd06 	bl	8000428 <__aeabi_f2d>
 8001a1c:	4680      	mov	r8, r0
 8001a1e:	4689      	mov	r9, r1
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <spi_Transmit+0x138>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fcff 	bl	8000428 <__aeabi_f2d>
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	460d      	mov	r5, r1
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <spi_Transmit+0x13c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fcf8 	bl	8000428 <__aeabi_f2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001a40:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001a44:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001a48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a4c:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001a50:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001a54:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001a58:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001a5c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001a60:	e9cd ab00 	strd	sl, fp, [sp]
 8001a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a68:	4913      	ldr	r1, [pc, #76]	; (8001ab8 <spi_Transmit+0x140>)
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <spi_Transmit+0x144>)
 8001a6c:	f004 fd48 	bl	8006500 <siprintf>
//	sprintf(value_array, "2,%.1f,%.1f,%.1f,%.3f,%.1f,%.3f,%.1f,%.2f,\r\n", temp_value, rh_value, volt, curr, power, energy, freq, pf);
	LoRa_transmit(&myLoRa, (uint8_t*)value_array, strlen(value_array), 3000); //Default: 3000
 8001a70:	4812      	ldr	r0, [pc, #72]	; (8001abc <spi_Transmit+0x144>)
 8001a72:	f7fe fb6d 	bl	8000150 <strlen>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001a7e:	490f      	ldr	r1, [pc, #60]	; (8001abc <spi_Transmit+0x144>)
 8001a80:	480f      	ldr	r0, [pc, #60]	; (8001ac0 <spi_Transmit+0x148>)
 8001a82:	f7ff fdb0 	bl	80015e6 <LoRa_transmit>

	//HAL_UART_Transmit(&huart2, (uint8_t *)value_array, strlen(value_array), 1000);
}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a90:	20000204 	.word	0x20000204
 8001a94:	200003b0 	.word	0x200003b0
 8001a98:	200003b4 	.word	0x200003b4
 8001a9c:	2000020c 	.word	0x2000020c
 8001aa0:	200003b8 	.word	0x200003b8
 8001aa4:	200003bc 	.word	0x200003bc
 8001aa8:	200003c0 	.word	0x200003c0
 8001aac:	200003c4 	.word	0x200003c4
 8001ab0:	200003c8 	.word	0x200003c8
 8001ab4:	200003cc 	.word	0x200003cc
 8001ab8:	0800a098 	.word	0x0800a098
 8001abc:	200003d0 	.word	0x200003d0
 8001ac0:	20000250 	.word	0x20000250

08001ac4 <i2c_LCD_1>:

void i2c_LCD_1(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
	updateValues(&PZEM);
 8001ac8:	4836      	ldr	r0, [pc, #216]	; (8001ba4 <i2c_LCD_1+0xe0>)
 8001aca:	f000 fc27 	bl	800231c <updateValues>
	volt = PZEM.values.voltage;
 8001ace:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <i2c_LCD_1+0xe0>)
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <i2c_LCD_1+0xe4>)
 8001ad4:	6013      	str	r3, [r2, #0]
	curr = PZEM.values.current;
 8001ad6:	4b33      	ldr	r3, [pc, #204]	; (8001ba4 <i2c_LCD_1+0xe0>)
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	4a34      	ldr	r2, [pc, #208]	; (8001bac <i2c_LCD_1+0xe8>)
 8001adc:	6013      	str	r3, [r2, #0]
	power = PZEM.values.power;
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <i2c_LCD_1+0xe0>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a33      	ldr	r2, [pc, #204]	; (8001bb0 <i2c_LCD_1+0xec>)
 8001ae4:	6013      	str	r3, [r2, #0]
	energy = PZEM.values.energy;
 8001ae6:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <i2c_LCD_1+0xe0>)
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	4a32      	ldr	r2, [pc, #200]	; (8001bb4 <i2c_LCD_1+0xf0>)
 8001aec:	6013      	str	r3, [r2, #0]
	freq = PZEM.values.frequency;
 8001aee:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <i2c_LCD_1+0xe0>)
 8001af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af2:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <i2c_LCD_1+0xf4>)
 8001af4:	6013      	str	r3, [r2, #0]
	pf = PZEM.values.pf;
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <i2c_LCD_1+0xe0>)
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	4a30      	ldr	r2, [pc, #192]	; (8001bbc <i2c_LCD_1+0xf8>)
 8001afc:	6013      	str	r3, [r2, #0]

	lcd_clear_display();
 8001afe:	f7ff ff12 	bl	8001926 <lcd_clear_display>
	HAL_Delay(50);
 8001b02:	2032      	movs	r0, #50	; 0x32
 8001b04:	f000 ffae 	bl	8002a64 <HAL_Delay>

	sprintf(i2c_array, "%.1fV", volt);
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <i2c_LCD_1+0xe4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fc8b 	bl	8000428 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	492a      	ldr	r1, [pc, #168]	; (8001bc0 <i2c_LCD_1+0xfc>)
 8001b18:	482a      	ldr	r0, [pc, #168]	; (8001bc4 <i2c_LCD_1+0x100>)
 8001b1a:	f004 fcf1 	bl	8006500 <siprintf>
	lcd_goto_XY(1, 0);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff ff07 	bl	8001934 <lcd_goto_XY>
	lcd_send_string(i2c_array);
 8001b26:	4827      	ldr	r0, [pc, #156]	; (8001bc4 <i2c_LCD_1+0x100>)
 8001b28:	f7ff fee8 	bl	80018fc <lcd_send_string>

	sprintf(i2c_array, "%.3fA", curr);
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <i2c_LCD_1+0xe8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fc79 	bl	8000428 <__aeabi_f2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4923      	ldr	r1, [pc, #140]	; (8001bc8 <i2c_LCD_1+0x104>)
 8001b3c:	4821      	ldr	r0, [pc, #132]	; (8001bc4 <i2c_LCD_1+0x100>)
 8001b3e:	f004 fcdf 	bl	8006500 <siprintf>
	lcd_goto_XY(1, 7);
 8001b42:	2107      	movs	r1, #7
 8001b44:	2001      	movs	r0, #1
 8001b46:	f7ff fef5 	bl	8001934 <lcd_goto_XY>
	lcd_send_string(i2c_array);
 8001b4a:	481e      	ldr	r0, [pc, #120]	; (8001bc4 <i2c_LCD_1+0x100>)
 8001b4c:	f7ff fed6 	bl	80018fc <lcd_send_string>

	sprintf(i2c_array, "%.1fW", power);
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <i2c_LCD_1+0xec>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fc67 	bl	8000428 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	491b      	ldr	r1, [pc, #108]	; (8001bcc <i2c_LCD_1+0x108>)
 8001b60:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <i2c_LCD_1+0x100>)
 8001b62:	f004 fccd 	bl	8006500 <siprintf>
	lcd_goto_XY(2, 0);
 8001b66:	2100      	movs	r1, #0
 8001b68:	2002      	movs	r0, #2
 8001b6a:	f7ff fee3 	bl	8001934 <lcd_goto_XY>
	lcd_send_string(i2c_array);
 8001b6e:	4815      	ldr	r0, [pc, #84]	; (8001bc4 <i2c_LCD_1+0x100>)
 8001b70:	f7ff fec4 	bl	80018fc <lcd_send_string>

	sprintf(i2c_array, "%.3fWh", energy);
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <i2c_LCD_1+0xf0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fc55 	bl	8000428 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4913      	ldr	r1, [pc, #76]	; (8001bd0 <i2c_LCD_1+0x10c>)
 8001b84:	480f      	ldr	r0, [pc, #60]	; (8001bc4 <i2c_LCD_1+0x100>)
 8001b86:	f004 fcbb 	bl	8006500 <siprintf>
	lcd_goto_XY(2, 7);
 8001b8a:	2107      	movs	r1, #7
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7ff fed1 	bl	8001934 <lcd_goto_XY>
	lcd_send_string(i2c_array);
 8001b92:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <i2c_LCD_1+0x100>)
 8001b94:	f7ff feb2 	bl	80018fc <lcd_send_string>

	HAL_Delay(2000);
 8001b98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b9c:	f000 ff62 	bl	8002a64 <HAL_Delay>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	2000020c 	.word	0x2000020c
 8001ba8:	200003b8 	.word	0x200003b8
 8001bac:	200003bc 	.word	0x200003bc
 8001bb0:	200003c0 	.word	0x200003c0
 8001bb4:	200003c4 	.word	0x200003c4
 8001bb8:	200003c8 	.word	0x200003c8
 8001bbc:	200003cc 	.word	0x200003cc
 8001bc0:	0800a0c8 	.word	0x0800a0c8
 8001bc4:	20000434 	.word	0x20000434
 8001bc8:	0800a0d0 	.word	0x0800a0d0
 8001bcc:	0800a0d8 	.word	0x0800a0d8
 8001bd0:	0800a0e0 	.word	0x0800a0e0

08001bd4 <i2c_LCD_2>:

void i2c_LCD_2(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	lcd_clear_display();
 8001bd8:	f7ff fea5 	bl	8001926 <lcd_clear_display>
	HAL_Delay(50);
 8001bdc:	2032      	movs	r0, #50	; 0x32
 8001bde:	f000 ff41 	bl	8002a64 <HAL_Delay>

	DHT_GetData(&DHT11_Data);
 8001be2:	4832      	ldr	r0, [pc, #200]	; (8001cac <i2c_LCD_2+0xd8>)
 8001be4:	f7ff fa2c 	bl	8001040 <DHT_GetData>
	temp_value = DHT11_Data.Temperature;
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <i2c_LCD_2+0xd8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <i2c_LCD_2+0xdc>)
 8001bee:	6013      	str	r3, [r2, #0]
	rh_value = DHT11_Data.Humidity;
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <i2c_LCD_2+0xd8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a2f      	ldr	r2, [pc, #188]	; (8001cb4 <i2c_LCD_2+0xe0>)
 8001bf6:	6013      	str	r3, [r2, #0]

	updateValues(&PZEM);
 8001bf8:	482f      	ldr	r0, [pc, #188]	; (8001cb8 <i2c_LCD_2+0xe4>)
 8001bfa:	f000 fb8f 	bl	800231c <updateValues>
	freq = PZEM.values.frequency;
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <i2c_LCD_2+0xe4>)
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	4a2e      	ldr	r2, [pc, #184]	; (8001cbc <i2c_LCD_2+0xe8>)
 8001c04:	6013      	str	r3, [r2, #0]
	pf = PZEM.values.pf;
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <i2c_LCD_2+0xe4>)
 8001c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <i2c_LCD_2+0xec>)
 8001c0c:	6013      	str	r3, [r2, #0]

	sprintf(i2c_array, "%.1fHz", freq);
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <i2c_LCD_2+0xe8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc08 	bl	8000428 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4929      	ldr	r1, [pc, #164]	; (8001cc4 <i2c_LCD_2+0xf0>)
 8001c1e:	482a      	ldr	r0, [pc, #168]	; (8001cc8 <i2c_LCD_2+0xf4>)
 8001c20:	f004 fc6e 	bl	8006500 <siprintf>
	lcd_goto_XY(1, 0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff fe84 	bl	8001934 <lcd_goto_XY>
	lcd_send_string(i2c_array);
 8001c2c:	4826      	ldr	r0, [pc, #152]	; (8001cc8 <i2c_LCD_2+0xf4>)
 8001c2e:	f7ff fe65 	bl	80018fc <lcd_send_string>

	sprintf(i2c_array, "%.2f", pf);
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <i2c_LCD_2+0xec>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fbf6 	bl	8000428 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4922      	ldr	r1, [pc, #136]	; (8001ccc <i2c_LCD_2+0xf8>)
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <i2c_LCD_2+0xf4>)
 8001c44:	f004 fc5c 	bl	8006500 <siprintf>
	lcd_goto_XY(1, 8);
 8001c48:	2108      	movs	r1, #8
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff fe72 	bl	8001934 <lcd_goto_XY>
	lcd_send_string(i2c_array);
 8001c50:	481d      	ldr	r0, [pc, #116]	; (8001cc8 <i2c_LCD_2+0xf4>)
 8001c52:	f7ff fe53 	bl	80018fc <lcd_send_string>

	sprintf(i2c_array, "%.1fC", temp_value);
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <i2c_LCD_2+0xdc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fbe4 	bl	8000428 <__aeabi_f2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	491a      	ldr	r1, [pc, #104]	; (8001cd0 <i2c_LCD_2+0xfc>)
 8001c66:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <i2c_LCD_2+0xf4>)
 8001c68:	f004 fc4a 	bl	8006500 <siprintf>
	lcd_goto_XY(2, 0);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f7ff fe60 	bl	8001934 <lcd_goto_XY>
	lcd_send_string(i2c_array);
 8001c74:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <i2c_LCD_2+0xf4>)
 8001c76:	f7ff fe41 	bl	80018fc <lcd_send_string>

	sprintf(i2c_array, "%.1f%%", rh_value);
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <i2c_LCD_2+0xe0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fbd2 	bl	8000428 <__aeabi_f2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4912      	ldr	r1, [pc, #72]	; (8001cd4 <i2c_LCD_2+0x100>)
 8001c8a:	480f      	ldr	r0, [pc, #60]	; (8001cc8 <i2c_LCD_2+0xf4>)
 8001c8c:	f004 fc38 	bl	8006500 <siprintf>
	lcd_goto_XY(2, 8);
 8001c90:	2108      	movs	r1, #8
 8001c92:	2002      	movs	r0, #2
 8001c94:	f7ff fe4e 	bl	8001934 <lcd_goto_XY>
	lcd_send_string(i2c_array);
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <i2c_LCD_2+0xf4>)
 8001c9a:	f7ff fe2f 	bl	80018fc <lcd_send_string>

	HAL_Delay(2000);
 8001c9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ca2:	f000 fedf 	bl	8002a64 <HAL_Delay>
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000204 	.word	0x20000204
 8001cb0:	200003b0 	.word	0x200003b0
 8001cb4:	200003b4 	.word	0x200003b4
 8001cb8:	2000020c 	.word	0x2000020c
 8001cbc:	200003c8 	.word	0x200003c8
 8001cc0:	200003cc 	.word	0x200003cc
 8001cc4:	0800a0e8 	.word	0x0800a0e8
 8001cc8:	20000434 	.word	0x20000434
 8001ccc:	0800a0f0 	.word	0x0800a0f0
 8001cd0:	0800a0f8 	.word	0x0800a0f8
 8001cd4:	0800a100 	.word	0x0800a100

08001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cde:	f000 fe5f 	bl	80029a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce2:	f000 f89d 	bl	8001e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce6:	f000 f999 	bl	800201c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001cea:	f000 f943 	bl	8001f74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001cee:	f000 f96b 	bl	8001fc8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001cf2:	f000 f909 	bl	8001f08 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001cf6:	f000 f8d9 	bl	8001eac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	//PZEM CONFIG
	init_pzem(&PZEM, &huart1, 0x01);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4940      	ldr	r1, [pc, #256]	; (8001e00 <main+0x128>)
 8001cfe:	4841      	ldr	r0, [pc, #260]	; (8001e04 <main+0x12c>)
 8001d00:	f000 fa2d 	bl	800215e <init_pzem>
	HAL_UART_Receive_IT(PZEM.huart, &PZEM.byteRx[0], 1);
 8001d04:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <main+0x12c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	493f      	ldr	r1, [pc, #252]	; (8001e08 <main+0x130>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 f8fa 	bl	8004f06 <HAL_UART_Receive_IT>

	//LORA CONFIG
	myLoRa = newLoRa();
 8001d12:	4c3e      	ldr	r4, [pc, #248]	; (8001e0c <main+0x134>)
 8001d14:	463b      	mov	r3, r7
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9ee 	bl	80010f8 <newLoRa>
 8001d1c:	4625      	mov	r5, r4
 8001d1e:	463c      	mov	r4, r7
 8001d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d28:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port = NSS_GPIO_Port;
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <main+0x134>)
 8001d32:	4a37      	ldr	r2, [pc, #220]	; (8001e10 <main+0x138>)
 8001d34:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <main+0x134>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 8001d3c:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <main+0x134>)
 8001d3e:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <main+0x138>)
 8001d40:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 8001d42:	4b32      	ldr	r3, [pc, #200]	; (8001e0c <main+0x134>)
 8001d44:	2202      	movs	r2, #2
 8001d46:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 8001d48:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <main+0x134>)
 8001d4a:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <main+0x138>)
 8001d4c:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 8001d4e:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <main+0x134>)
 8001d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d54:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <main+0x134>)
 8001d58:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <main+0x13c>)
 8001d5a:	619a      	str	r2, [r3, #24]

	myLoRa.frequency = 433;             // default = 433 MHz
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <main+0x134>)
 8001d5e:	f240 12b1 	movw	r2, #433	; 0x1b1
 8001d62:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;            // default = SF_7
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <main+0x134>)
 8001d66:	2207      	movs	r2, #7
 8001d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_125KHz;       // default = BW_125KHz
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <main+0x134>)
 8001d6e:	2207      	movs	r2, #7
 8001d70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_5;          // default = CR_4_5
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <main+0x134>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_20db;      // default = 20db
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <main+0x134>)
 8001d7e:	22ff      	movs	r2, #255	; 0xff
 8001d80:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <main+0x134>)
 8001d86:	2282      	movs	r2, #130	; 0x82
 8001d88:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 10;              // default = 8
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <main+0x134>)
 8001d8e:	220a      	movs	r2, #10
 8001d90:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8001d92:	481e      	ldr	r0, [pc, #120]	; (8001e0c <main+0x134>)
 8001d94:	f7ff f9d9 	bl	800114a <LoRa_reset>
	if (LoRa_init(&myLoRa) == LORA_OK)
 8001d98:	481c      	ldr	r0, [pc, #112]	; (8001e0c <main+0x134>)
 8001d9a:	f7ff fc7c 	bl	8001696 <LoRa_init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2bc8      	cmp	r3, #200	; 0xc8
 8001da2:	d102      	bne.n	8001daa <main+0xd2>
	{
		start_Lora = 1;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <main+0x140>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
	}

	//LCD CONFIG
	lcd_init();
 8001daa:	f7ff fd79 	bl	80018a0 <lcd_init>
	lcd_goto_XY(1, 1);
 8001dae:	2101      	movs	r1, #1
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7ff fdbf 	bl	8001934 <lcd_goto_XY>
	lcd_send_string("INTIALIZING...");
 8001db6:	4819      	ldr	r0, [pc, #100]	; (8001e1c <main+0x144>)
 8001db8:	f7ff fda0 	bl	80018fc <lcd_send_string>
	HAL_Delay(1000);
 8001dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc0:	f000 fe50 	bl	8002a64 <HAL_Delay>
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
//	  HAL_Delay(2000);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
//	  HAL_Delay(2000);

	  if(updateValues(&PZEM))
 8001dc4:	480f      	ldr	r0, [pc, #60]	; (8001e04 <main+0x12c>)
 8001dc6:	f000 faa9 	bl	800231c <updateValues>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f9      	beq.n	8001dc4 <main+0xec>
	  {
		  i2c_LCD_2();
 8001dd0:	f7ff ff00 	bl	8001bd4 <i2c_LCD_2>
		  HAL_Delay(1000);
 8001dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd8:	f000 fe44 	bl	8002a64 <HAL_Delay>
		  i2c_LCD_1();
 8001ddc:	f7ff fe72 	bl	8001ac4 <i2c_LCD_1>
		  HAL_Delay(1000);
 8001de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de4:	f000 fe3e 	bl	8002a64 <HAL_Delay>
//		  voltage = getVol(&PZEM);
//		  sprintf(voltageArray, "%1.f", voltage);
//		  HAL_UART_Transmit(&huart1, (uint8_t *)voltageArray, 5, 1000);
		  if(start_Lora == 1)
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <main+0x140>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d1e9      	bne.n	8001dc4 <main+0xec>
			  SPI_Power_Transmit(&myLoRa, &PZEM);
			  SPI_Energy_Transmit(&myLoRa, &PZEM);
			  SPI_Frequency_Transmit(&myLoRa, &PZEM);
			  SPI_pF_Transmit(&myLoRa, &PZEM);*/

			  spi_Transmit();
 8001df0:	f7ff fdc2 	bl	8001978 <spi_Transmit>
			  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			  HAL_Delay(60000);
 8001df4:	f64e 2060 	movw	r0, #60000	; 0xea60
 8001df8:	f000 fe34 	bl	8002a64 <HAL_Delay>
	  if(updateValues(&PZEM))
 8001dfc:	e7e2      	b.n	8001dc4 <main+0xec>
 8001dfe:	bf00      	nop
 8001e00:	20000328 	.word	0x20000328
 8001e04:	2000020c 	.word	0x2000020c
 8001e08:	2000022f 	.word	0x2000022f
 8001e0c:	20000250 	.word	0x20000250
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	200002d0 	.word	0x200002d0
 8001e18:	20000498 	.word	0x20000498
 8001e1c:	0800a108 	.word	0x0800a108

08001e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b090      	sub	sp, #64	; 0x40
 8001e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	2228      	movs	r2, #40	; 0x28
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fcec 	bl	800580c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e54:	2302      	movs	r3, #2
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e5e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e64:	f107 0318 	add.w	r3, r7, #24
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f001 fddb 	bl	8003a24 <HAL_RCC_OscConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e74:	f000 f96e 	bl	8002154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e78:	230f      	movs	r3, #15
 8001e7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 f848 	bl	8003f28 <HAL_RCC_ClockConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e9e:	f000 f959 	bl	8002154 <Error_Handler>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3740      	adds	r7, #64	; 0x40
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <MX_I2C1_Init+0x50>)
 8001eb2:	4a13      	ldr	r2, [pc, #76]	; (8001f00 <MX_I2C1_Init+0x54>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_I2C1_Init+0x50>)
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_I2C1_Init+0x58>)
 8001eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_I2C1_Init+0x50>)
 8001eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ece:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_I2C1_Init+0x50>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MX_I2C1_Init+0x50>)
 8001eea:	f001 f951 	bl	8003190 <HAL_I2C_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ef4:	f000 f92e 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	2000027c 	.word	0x2000027c
 8001f00:	40005400 	.word	0x40005400
 8001f04:	000186a0 	.word	0x000186a0

08001f08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f0e:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <MX_SPI1_Init+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f54:	220a      	movs	r2, #10
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	; (8001f6c <MX_SPI1_Init+0x64>)
 8001f5a:	f002 f97d 	bl	8004258 <HAL_SPI_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f64:	f000 f8f6 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200002d0 	.word	0x200002d0
 8001f70:	40013000 	.word	0x40013000

08001f74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <MX_USART1_UART_Init+0x50>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001f80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_USART1_UART_Init+0x4c>)
 8001fac:	f002 fecc 	bl	8004d48 <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fb6:	f000 f8cd 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000328 	.word	0x20000328
 8001fc4:	40013800 	.word	0x40013800

08001fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <MX_USART2_UART_Init+0x50>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8001fd4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_USART2_UART_Init+0x4c>)
 8002000:	f002 fea2 	bl	8004d48 <HAL_UART_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800200a:	f000 f8a3 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000036c 	.word	0x2000036c
 8002018:	40004400 	.word	0x40004400

0800201c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <MX_GPIO_Init+0xc0>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <MX_GPIO_Init+0xc0>)
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <MX_GPIO_Init+0xc0>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0320 	and.w	r3, r3, #32
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <MX_GPIO_Init+0xc0>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <MX_GPIO_Init+0xc0>)
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	6193      	str	r3, [r2, #24]
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <MX_GPIO_Init+0xc0>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002060:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <MX_GPIO_Init+0xc0>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <MX_GPIO_Init+0xc0>)
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	6193      	str	r3, [r2, #24]
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <MX_GPIO_Init+0xc0>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin|Relay_Pin, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	f240 1103 	movw	r1, #259	; 0x103
 800207e:	4818      	ldr	r0, [pc, #96]	; (80020e0 <MX_GPIO_Init+0xc4>)
 8002080:	f001 f86d 	bl	800315e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002084:	2301      	movs	r3, #1
 8002086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4619      	mov	r1, r3
 8002096:	4813      	ldr	r0, [pc, #76]	; (80020e4 <MX_GPIO_Init+0xc8>)
 8002098:	f000 fec6 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin Relay_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|Relay_Pin;
 800209c:	f240 1303 	movw	r3, #259	; 0x103
 80020a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a2:	2301      	movs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4619      	mov	r1, r3
 80020b4:	480a      	ldr	r0, [pc, #40]	; (80020e0 <MX_GPIO_Init+0xc4>)
 80020b6:	f000 feb7 	bl	8002e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80020ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_GPIO_Init+0xcc>)
 80020c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	4804      	ldr	r0, [pc, #16]	; (80020e0 <MX_GPIO_Init+0xc4>)
 80020d0:	f000 feaa 	bl	8002e28 <HAL_GPIO_Init>

}
 80020d4:	bf00      	nop
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010c00 	.word	0x40010c00
 80020e4:	40010800 	.word	0x40010800
 80020e8:	10110000 	.word	0x10110000

080020ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	if(PZEM.rxbufferIndex >30)
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <HAL_UART_RxCpltCallback+0x5c>)
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b1e      	cmp	r3, #30
 80020fc:	d902      	bls.n	8002104 <HAL_UART_RxCpltCallback+0x18>
	{
		 PZEM.rxbufferIndex=0;
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_UART_RxCpltCallback+0x5c>)
 8002100:	2200      	movs	r2, #0
 8002102:	711a      	strb	r2, [r3, #4]
	}

	if (huart->Instance == UART_PZEM) //queried which uart is used
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_UART_RxCpltCallback+0x60>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d117      	bne.n	800213e <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(PZEM.huart,&PZEM.byteRx[0], 1);
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_UART_RxCpltCallback+0x5c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	490e      	ldr	r1, [pc, #56]	; (8002150 <HAL_UART_RxCpltCallback+0x64>)
 8002116:	4618      	mov	r0, r3
 8002118:	f002 fef5 	bl	8004f06 <HAL_UART_Receive_IT>
		PZEM.rxBuffer[PZEM.rxbufferIndex] =PZEM.byteRx[0];
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_UART_RxCpltCallback+0x5c>)
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4619      	mov	r1, r3
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_UART_RxCpltCallback+0x5c>)
 8002126:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_UART_RxCpltCallback+0x5c>)
 800212c:	440b      	add	r3, r1
 800212e:	715a      	strb	r2, [r3, #5]
		PZEM.rxbufferIndex++;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_UART_RxCpltCallback+0x5c>)
 8002132:	791b      	ldrb	r3, [r3, #4]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	3301      	adds	r3, #1
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b03      	ldr	r3, [pc, #12]	; (8002148 <HAL_UART_RxCpltCallback+0x5c>)
 800213c:	711a      	strb	r2, [r3, #4]
	}
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000020c 	.word	0x2000020c
 800214c:	40013800 	.word	0x40013800
 8002150:	2000022f 	.word	0x2000022f

08002154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800215c:	e7fe      	b.n	800215c <Error_Handler+0x8>

0800215e <init_pzem>:
//float value = 0.0;
//char valueArray[100] = {0};


void init_pzem(pzem *pzem, UART_HandleTypeDef *huart, uint8_t addr)
{
 800215e:	b480      	push	{r7}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	4613      	mov	r3, r2
 800216a:	71fb      	strb	r3, [r7, #7]
	if(addr < 0x01 || addr > 0xF8)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <init_pzem+0x1a>
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	2bf8      	cmp	r3, #248	; 0xf8
 8002176:	d901      	bls.n	800217c <init_pzem+0x1e>
	{
		addr = PZEM_DEFAULT_ADDR;
 8002178:	2301      	movs	r3, #1
 800217a:	71fb      	strb	r3, [r7, #7]
	}
	pzem->_addr = addr;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	79fa      	ldrb	r2, [r7, #7]
 8002180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pzem->huart = huart;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <sendCmd8>:
	}
	return 0;
}

void sendCmd8(pzem *pzem, uint8_t cmd, uint16_t rAddr, uint16_t val, uint16_t slave_addr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	4608      	mov	r0, r1
 800219e:	4611      	mov	r1, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	72fb      	strb	r3, [r7, #11]
 80021a6:	460b      	mov	r3, r1
 80021a8:	813b      	strh	r3, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
	uint8_t sendBuffer[8]; //send buffer

	if((slave_addr == 0xFFFF) || (slave_addr < 0x01) || (slave_addr > 0xF7))
 80021ae:	8c3b      	ldrh	r3, [r7, #32]
 80021b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d005      	beq.n	80021c4 <sendCmd8+0x30>
 80021b8:	8c3b      	ldrh	r3, [r7, #32]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <sendCmd8+0x30>
 80021be:	8c3b      	ldrh	r3, [r7, #32]
 80021c0:	2bf7      	cmp	r3, #247	; 0xf7
 80021c2:	d903      	bls.n	80021cc <sendCmd8+0x38>
	{
		slave_addr = pzem->_addr;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021ca:	843b      	strh	r3, [r7, #32]
	}

	sendBuffer[0] = slave_addr;					// set slave address
 80021cc:	8c3b      	ldrh	r3, [r7, #32]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	743b      	strb	r3, [r7, #16]
	sendBuffer[1] = cmd;						// set command
 80021d2:	7afb      	ldrb	r3, [r7, #11]
 80021d4:	747b      	strb	r3, [r7, #17]
	sendBuffer[2] = (rAddr >> 8) & 0xFF;		// set high byte of register address
 80021d6:	893b      	ldrh	r3, [r7, #8]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	74bb      	strb	r3, [r7, #18]
	sendBuffer[3] = (rAddr) & 0xFF;				// set low byte of register address
 80021e0:	893b      	ldrh	r3, [r7, #8]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	74fb      	strb	r3, [r7, #19]
	sendBuffer[4] = (val >> 8) & 0xFF;			// set high byte of register value
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	753b      	strb	r3, [r7, #20]
	sendBuffer[5] = (val) & 0xFF;				// set low byte of register value
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	757b      	strb	r3, [r7, #21]

	setCRC((uint8_t *)sendBuffer, 8);
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	2108      	movs	r1, #8
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f83c 	bl	800227a <setCRC>
	HAL_UART_Transmit(pzem->huart, sendBuffer, 8, 100);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	f107 0110 	add.w	r1, r7, #16
 800220a:	2364      	movs	r3, #100	; 0x64
 800220c:	2208      	movs	r2, #8
 800220e:	f002 fde8 	bl	8004de2 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002212:	2064      	movs	r0, #100	; 0x64
 8002214:	f000 fc26 	bl	8002a64 <HAL_Delay>
}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <checkCRC>:

uint8_t checkCRC(pzem *pzem, uint8_t len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_check, crc_buffer;
	crc_buffer = ((uint16_t)pzem->rxBuffer[len-2]  | (uint16_t)pzem->rxBuffer[len-1] << 8);
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	3b02      	subs	r3, #2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	795b      	ldrb	r3, [r3, #5]
 8002236:	b21a      	sxth	r2, r3
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	3b01      	subs	r3, #1
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	440b      	add	r3, r1
 8002240:	795b      	ldrb	r3, [r3, #5]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21b      	sxth	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b21b      	sxth	r3, r3
 800224a:	81fb      	strh	r3, [r7, #14]
	crc_check = CRC16(pzem->rxBuffer, len-2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	1d5a      	adds	r2, r3, #5
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b02      	subs	r3, #2
 8002256:	b29b      	uxth	r3, r3
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f000 f834 	bl	80022c8 <CRC16>
 8002260:	4603      	mov	r3, r0
 8002262:	81bb      	strh	r3, [r7, #12]

	if(crc_buffer == crc_check)
 8002264:	89fa      	ldrh	r2, [r7, #14]
 8002266:	89bb      	ldrh	r3, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d101      	bne.n	8002270 <checkCRC+0x50>
	{
		return 1;
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <checkCRC+0x52>
	}
	else
	{
		return 0;
 8002270:	2300      	movs	r3, #0
	}
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <setCRC>:


void setCRC(uint8_t *buf, uint16_t len)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	460b      	mov	r3, r1
 8002284:	807b      	strh	r3, [r7, #2]
	if(len <= 2) return;		//sanity check
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d919      	bls.n	80022c0 <setCRC+0x46>

	uint16_t crc = CRC16(buf, len-2);		// crc of data
 800228c:	887b      	ldrh	r3, [r7, #2]
 800228e:	3b02      	subs	r3, #2
 8002290:	b29b      	uxth	r3, r3
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f817 	bl	80022c8 <CRC16>
 800229a:	4603      	mov	r3, r0
 800229c:	81fb      	strh	r3, [r7, #14]

	// Write high and low byte to last positions of sendBuffer
	buf[len - 1] = (crc >> 8) & 0xFF;		// high byte
 800229e:	89fb      	ldrh	r3, [r7, #14]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	b299      	uxth	r1, r3
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	b2ca      	uxtb	r2, r1
 80022ae:	701a      	strb	r2, [r3, #0]
	buf[len - 2] = crc & 0xFF;				// low byte
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	3b02      	subs	r3, #2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	89fa      	ldrh	r2, [r7, #14]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e000      	b.n	80022c2 <setCRC+0x48>
	if(len <= 2) return;		//sanity check
 80022c0:	bf00      	nop

}
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <CRC16>:
    0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
    0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
};

uint16_t CRC16(const volatile uint8_t *data, uint16_t len)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
    uint8_t nTemp; // CRC table index
    uint16_t crc = 0xFFFF; // Default value
 80022d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d8:	81fb      	strh	r3, [r7, #14]

    while (len--)
 80022da:	e012      	b.n	8002302 <CRC16+0x3a>
    {
        nTemp = (*data++) ^ crc;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4053      	eors	r3, r2
 80022ec:	737b      	strb	r3, [r7, #13]
        crc >>= 8;
 80022ee:	89fb      	ldrh	r3, [r7, #14]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	81fb      	strh	r3, [r7, #14]
        crc ^= (uint16_t)crcTable[nTemp];
 80022f4:	7b7b      	ldrb	r3, [r7, #13]
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <CRC16+0x50>)
 80022f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022fc:	89fb      	ldrh	r3, [r7, #14]
 80022fe:	4053      	eors	r3, r2
 8002300:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	807a      	strh	r2, [r7, #2]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1e7      	bne.n	80022dc <CRC16+0x14>
    }
    return crc;
 800230c:	89fb      	ldrh	r3, [r7, #14]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	0800a128 	.word	0x0800a128

0800231c <updateValues>:

uint8_t updateValues(pzem *pzem)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af02      	add	r7, sp, #8
 8002322:	6078      	str	r0, [r7, #4]
	sendCmd8(pzem, (uint8_t)CMD_RIR, 0x00, 0x0A, (uint16_t)pzem->_addr);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800232a:	b29b      	uxth	r3, r3
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	230a      	movs	r3, #10
 8002330:	2200      	movs	r2, #0
 8002332:	2104      	movs	r1, #4
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff2d 	bl	8002194 <sendCmd8>
//	while(isrPzem);
//	isrPzem = 1;
	if(checkCRC(pzem, 25))
 800233a:	2119      	movs	r1, #25
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff6f 	bl	8002220 <checkCRC>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80bb 	beq.w	80024c0 <updateValues+0x1a4>
	{
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7a1b      	ldrb	r3, [r3, #8]
 800234e:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[4])/10.0;
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	7a52      	ldrb	r2, [r2, #9]
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 8002354:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[4])/10.0;
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f844 	bl	80003e4 <__aeabi_ui2d>
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <updateValues+0x1b0>)
 8002362:	f7fe f9e3 	bl	800072c <__aeabi_ddiv>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fbab 	bl	8000ac8 <__aeabi_d2f>
 8002372:	4602      	mov	r2, r0
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7a9b      	ldrb	r3, [r3, #10]
 800237c:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[6] |
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	7ad2      	ldrb	r2, [r2, #11]
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 8002382:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[7] << 24 |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7b1b      	ldrb	r3, [r3, #12]
 8002388:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[6] |
 800238a:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[8] << 16) / 1000.0;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b5b      	ldrb	r3, [r3, #13]
 8002390:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[7] << 24 |
 8002392:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[8] << 16) / 1000.0;
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f825 	bl	80003e4 <__aeabi_ui2d>
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b4c      	ldr	r3, [pc, #304]	; (80024d0 <updateValues+0x1b4>)
 80023a0:	f7fe f9c4 	bl	800072c <__aeabi_ddiv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fb8c 	bl	8000ac8 <__aeabi_d2f>
 80023b0:	4602      	mov	r2, r0
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	62da      	str	r2, [r3, #44]	; 0x2c

		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7b9b      	ldrb	r3, [r3, #14]
 80023ba:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[10] |
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	7bd2      	ldrb	r2, [r2, #15]
		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 80023c0:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[11] << 24 |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	7c1b      	ldrb	r3, [r3, #16]
 80023c6:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[10] |
 80023c8:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[12] << 16) / 10.0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7c5b      	ldrb	r3, [r3, #17]
 80023ce:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[11] << 24 |
 80023d0:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[12] << 16) / 10.0;
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f806 	bl	80003e4 <__aeabi_ui2d>
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <updateValues+0x1b0>)
 80023de:	f7fe f9a5 	bl	800072c <__aeabi_ddiv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fb6d 	bl	8000ac8 <__aeabi_d2f>
 80023ee:	4602      	mov	r2, r0
		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30

		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7c9b      	ldrb	r3, [r3, #18]
 80023f8:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[14] |
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	7cd2      	ldrb	r2, [r2, #19]
		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 80023fe:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[15] << 24 |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7d1b      	ldrb	r3, [r3, #20]
 8002404:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[14] |
 8002406:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[16] << 16) / 1000.0;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7d5b      	ldrb	r3, [r3, #21]
 800240c:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[15] << 24 |
 800240e:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[16] << 16) / 1000.0;
 8002410:	4618      	mov	r0, r3
 8002412:	f7fd ffe7 	bl	80003e4 <__aeabi_ui2d>
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b2d      	ldr	r3, [pc, #180]	; (80024d0 <updateValues+0x1b4>)
 800241c:	f7fe f986 	bl	800072c <__aeabi_ddiv>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f7fe fb4e 	bl	8000ac8 <__aeabi_d2f>
 800242c:	4602      	mov	r2, r0
		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	635a      	str	r2, [r3, #52]	; 0x34

		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7d9b      	ldrb	r3, [r3, #22]
 8002436:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[18]) / 10.0;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	7dd2      	ldrb	r2, [r2, #23]
		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 800243c:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[18]) / 10.0;
 800243e:	4618      	mov	r0, r3
 8002440:	f7fd ffd0 	bl	80003e4 <__aeabi_ui2d>
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b20      	ldr	r3, [pc, #128]	; (80024cc <updateValues+0x1b0>)
 800244a:	f7fe f96f 	bl	800072c <__aeabi_ddiv>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fb37 	bl	8000ac8 <__aeabi_d2f>
 800245a:	4602      	mov	r2, r0
		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38

		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7e1b      	ldrb	r3, [r3, #24]
 8002464:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[20])/100.0;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	7e52      	ldrb	r2, [r2, #25]
		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 800246a:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[20])/100.0;
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd ffb9 	bl	80003e4 <__aeabi_ui2d>
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <updateValues+0x1b8>)
 8002478:	f7fe f958 	bl	800072c <__aeabi_ddiv>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe fb20 	bl	8000ac8 <__aeabi_d2f>
 8002488:	4602      	mov	r2, r0
		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	63da      	str	r2, [r3, #60]	; 0x3c

		pzem->values.alarms =  ((uint32_t)pzem->rxBuffer[21] << 8 | // Raw alarm value
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7e9b      	ldrb	r3, [r3, #26]
 8002492:	b29b      	uxth	r3, r3
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	b29a      	uxth	r2, r3
								(uint32_t)pzem->rxBuffer[22]);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7edb      	ldrb	r3, [r3, #27]
 800249c:	b29b      	uxth	r3, r3
		pzem->values.alarms =  ((uint32_t)pzem->rxBuffer[21] << 8 | // Raw alarm value
 800249e:	4313      	orrs	r3, r2
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		memset(pzem->rxBuffer,0,sizeof(pzem->rxBuffer));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3305      	adds	r3, #5
 80024ac:	221e      	movs	r2, #30
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 f9ab 	bl	800580c <memset>
		pzem->rxbufferIndex=0;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	711a      	strb	r2, [r3, #4]

		return 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <updateValues+0x1a6>
	}
	return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40240000 	.word	0x40240000
 80024d0:	408f4000 	.word	0x408f4000
 80024d4:	40590000 	.word	0x40590000

080024d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_MspInit+0x5c>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	4a14      	ldr	r2, [pc, #80]	; (8002534 <HAL_MspInit+0x5c>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6193      	str	r3, [r2, #24]
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_MspInit+0x5c>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_MspInit+0x5c>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <HAL_MspInit+0x5c>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	61d3      	str	r3, [r2, #28]
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_MspInit+0x5c>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_MspInit+0x60>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_MspInit+0x60>)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000

0800253c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a15      	ldr	r2, [pc, #84]	; (80025ac <HAL_I2C_MspInit+0x70>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d123      	bne.n	80025a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_I2C_MspInit+0x74>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <HAL_I2C_MspInit+0x74>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_I2C_MspInit+0x74>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002574:	23c0      	movs	r3, #192	; 0xc0
 8002576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002578:	2312      	movs	r3, #18
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4619      	mov	r1, r3
 8002586:	480b      	ldr	r0, [pc, #44]	; (80025b4 <HAL_I2C_MspInit+0x78>)
 8002588:	f000 fc4e 	bl	8002e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_I2C_MspInit+0x74>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_I2C_MspInit+0x74>)
 8002592:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002596:	61d3      	str	r3, [r2, #28]
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_I2C_MspInit+0x74>)
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025a4:	bf00      	nop
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40005400 	.word	0x40005400
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010c00 	.word	0x40010c00

080025b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_SPI_MspInit+0x88>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d12f      	bne.n	8002638 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_SPI_MspInit+0x8c>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a19      	ldr	r2, [pc, #100]	; (8002644 <HAL_SPI_MspInit+0x8c>)
 80025de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_SPI_MspInit+0x8c>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_SPI_MspInit+0x8c>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_SPI_MspInit+0x8c>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_SPI_MspInit+0x8c>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002608:	23a0      	movs	r3, #160	; 0xa0
 800260a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f107 0310 	add.w	r3, r7, #16
 8002618:	4619      	mov	r1, r3
 800261a:	480b      	ldr	r0, [pc, #44]	; (8002648 <HAL_SPI_MspInit+0x90>)
 800261c:	f000 fc04 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002620:	2340      	movs	r3, #64	; 0x40
 8002622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	4619      	mov	r1, r3
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <HAL_SPI_MspInit+0x90>)
 8002634:	f000 fbf8 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40013000 	.word	0x40013000
 8002644:	40021000 	.word	0x40021000
 8002648:	40010800 	.word	0x40010800

0800264c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0318 	add.w	r3, r7, #24
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3b      	ldr	r2, [pc, #236]	; (8002754 <HAL_UART_MspInit+0x108>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d13a      	bne.n	80026e2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_UART_MspInit+0x10c>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a39      	ldr	r2, [pc, #228]	; (8002758 <HAL_UART_MspInit+0x10c>)
 8002672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_UART_MspInit+0x10c>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_UART_MspInit+0x10c>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a33      	ldr	r2, [pc, #204]	; (8002758 <HAL_UART_MspInit+0x10c>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_UART_MspInit+0x10c>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800269c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a6:	2303      	movs	r3, #3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 0318 	add.w	r3, r7, #24
 80026ae:	4619      	mov	r1, r3
 80026b0:	482a      	ldr	r0, [pc, #168]	; (800275c <HAL_UART_MspInit+0x110>)
 80026b2:	f000 fbb9 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 0318 	add.w	r3, r7, #24
 80026c8:	4619      	mov	r1, r3
 80026ca:	4824      	ldr	r0, [pc, #144]	; (800275c <HAL_UART_MspInit+0x110>)
 80026cc:	f000 fbac 	bl	8002e28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2025      	movs	r0, #37	; 0x25
 80026d6:	f000 fac0 	bl	8002c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026da:	2025      	movs	r0, #37	; 0x25
 80026dc:	f000 fad9 	bl	8002c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026e0:	e034      	b.n	800274c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_UART_MspInit+0x114>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d12f      	bne.n	800274c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <HAL_UART_MspInit+0x10c>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_UART_MspInit+0x10c>)
 80026f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f6:	61d3      	str	r3, [r2, #28]
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_UART_MspInit+0x10c>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <HAL_UART_MspInit+0x10c>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_UART_MspInit+0x10c>)
 800270a:	f043 0304 	orr.w	r3, r3, #4
 800270e:	6193      	str	r3, [r2, #24]
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_UART_MspInit+0x10c>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800271c:	2304      	movs	r3, #4
 800271e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002728:	f107 0318 	add.w	r3, r7, #24
 800272c:	4619      	mov	r1, r3
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <HAL_UART_MspInit+0x110>)
 8002730:	f000 fb7a 	bl	8002e28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002734:	2308      	movs	r3, #8
 8002736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002740:	f107 0318 	add.w	r3, r7, #24
 8002744:	4619      	mov	r1, r3
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <HAL_UART_MspInit+0x110>)
 8002748:	f000 fb6e 	bl	8002e28 <HAL_GPIO_Init>
}
 800274c:	bf00      	nop
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40013800 	.word	0x40013800
 8002758:	40021000 	.word	0x40021000
 800275c:	40010800 	.word	0x40010800
 8002760:	40004400 	.word	0x40004400

08002764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <NMI_Handler+0x4>

0800276a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <HardFault_Handler+0x4>

08002770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <MemManage_Handler+0x4>

08002776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <BusFault_Handler+0x4>

0800277c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <UsageFault_Handler+0x4>

08002782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027aa:	f000 f93f 	bl	8002a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <USART1_IRQHandler+0x10>)
 80027ba:	f002 fbd5 	bl	8004f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000328 	.word	0x20000328

080027c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
	return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <_kill>:

int _kill(int pid, int sig)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027e0:	f002 ffea 	bl	80057b8 <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2216      	movs	r2, #22
 80027e8:	601a      	str	r2, [r3, #0]
	return -1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_exit>:

void _exit (int status)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ffe7 	bl	80027d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002808:	e7fe      	b.n	8002808 <_exit+0x12>

0800280a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e00a      	b.n	8002832 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800281c:	f3af 8000 	nop.w
 8002820:	4601      	mov	r1, r0
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	60ba      	str	r2, [r7, #8]
 8002828:	b2ca      	uxtb	r2, r1
 800282a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3301      	adds	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	dbf0      	blt.n	800281c <_read+0x12>
	}

return len;
 800283a:	687b      	ldr	r3, [r7, #4]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e009      	b.n	800286a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	60ba      	str	r2, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3301      	adds	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	429a      	cmp	r2, r3
 8002870:	dbf1      	blt.n	8002856 <_write+0x12>
	}
	return len;
 8002872:	687b      	ldr	r3, [r7, #4]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <_close>:

int _close(int file)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	return -1;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028a2:	605a      	str	r2, [r3, #4]
	return 0;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <_isatty>:

int _isatty(int file)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	return 1;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
	return 0;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <_sbrk+0x5c>)
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <_sbrk+0x60>)
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <_sbrk+0x64>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <_sbrk+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d207      	bcs.n	800291c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800290c:	f002 ff54 	bl	80057b8 <__errno>
 8002910:	4603      	mov	r3, r0
 8002912:	220c      	movs	r2, #12
 8002914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e009      	b.n	8002930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_sbrk+0x64>)
 800292c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20005000 	.word	0x20005000
 800293c:	00000400 	.word	0x00000400
 8002940:	2000049c 	.word	0x2000049c
 8002944:	200004b8 	.word	0x200004b8

08002948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002956:	490d      	ldr	r1, [pc, #52]	; (800298c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800296c:	4c0a      	ldr	r4, [pc, #40]	; (8002998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800297a:	f7ff ffe5 	bl	8002948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297e:	f002 ff21 	bl	80057c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002982:	f7ff f9a9 	bl	8001cd8 <main>
  bx lr
 8002986:	4770      	bx	lr
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002990:	0800a7ec 	.word	0x0800a7ec
  ldr r2, =_sbss
 8002994:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002998:	200004b4 	.word	0x200004b4

0800299c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC1_2_IRQHandler>
	...

080029a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_Init+0x28>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <HAL_Init+0x28>)
 80029aa:	f043 0310 	orr.w	r3, r3, #16
 80029ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b0:	2003      	movs	r0, #3
 80029b2:	f000 f947 	bl	8002c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029b6:	200f      	movs	r0, #15
 80029b8:	f000 f808 	bl	80029cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029bc:	f7ff fd8c 	bl	80024d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000

080029cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_InitTick+0x54>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_InitTick+0x58>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f95f 	bl	8002cae <HAL_SYSTICK_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00e      	b.n	8002a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d80a      	bhi.n	8002a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a00:	2200      	movs	r2, #0
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f000 f927 	bl	8002c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <HAL_InitTick+0x5c>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20000008 	.word	0x20000008
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_IncTick+0x1c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_IncTick+0x20>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <HAL_IncTick+0x20>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	200004a0 	.word	0x200004a0

08002a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return uwTick;
 8002a54:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <HAL_GetTick+0x10>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	200004a0 	.word	0x200004a0

08002a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff fff0 	bl	8002a50 <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d005      	beq.n	8002a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_Delay+0x44>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a8a:	bf00      	nop
 8002a8c:	f7ff ffe0 	bl	8002a50 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f7      	bhi.n	8002a8c <HAL_Delay+0x28>
  {
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000008 	.word	0x20000008

08002aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af8:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <__NVIC_GetPriorityGrouping+0x18>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 0307 	and.w	r3, r3, #7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	db0b      	blt.n	8002b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	4906      	ldr	r1, [pc, #24]	; (8002b44 <__NVIC_EnableIRQ+0x34>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2001      	movs	r0, #1
 8002b32:	fa00 f202 	lsl.w	r2, r0, r2
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	; (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1c3 0307 	rsb	r3, r3, #7
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf28      	it	cs
 8002bba:	2304      	movcs	r3, #4
 8002bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d902      	bls.n	8002bcc <NVIC_EncodePriority+0x30>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b03      	subs	r3, #3
 8002bca:	e000      	b.n	8002bce <NVIC_EncodePriority+0x32>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	4313      	orrs	r3, r2
         );
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c10:	d301      	bcc.n	8002c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00f      	b.n	8002c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <SysTick_Config+0x40>)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1e:	210f      	movs	r1, #15
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	f7ff ff90 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <SysTick_Config+0x40>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <SysTick_Config+0x40>)
 8002c30:	2207      	movs	r2, #7
 8002c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000e010 	.word	0xe000e010

08002c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff2d 	bl	8002aac <__NVIC_SetPriorityGrouping>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c6c:	f7ff ff42 	bl	8002af4 <__NVIC_GetPriorityGrouping>
 8002c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	6978      	ldr	r0, [r7, #20]
 8002c78:	f7ff ff90 	bl	8002b9c <NVIC_EncodePriority>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff5f 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff35 	bl	8002b10 <__NVIC_EnableIRQ>
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff ffa2 	bl	8002c00 <SysTick_Config>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d008      	beq.n	8002cee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2204      	movs	r2, #4
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e020      	b.n	8002d30 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 020e 	bic.w	r2, r2, #14
 8002cfc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	2101      	movs	r1, #1
 8002d18:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
	...

08002d3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d005      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2204      	movs	r2, #4
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e051      	b.n	8002e02 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 020e 	bic.w	r2, r2, #14
 8002d6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a22      	ldr	r2, [pc, #136]	; (8002e0c <HAL_DMA_Abort_IT+0xd0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d029      	beq.n	8002ddc <HAL_DMA_Abort_IT+0xa0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <HAL_DMA_Abort_IT+0xd4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d022      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x9c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <HAL_DMA_Abort_IT+0xd8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d01a      	beq.n	8002dd2 <HAL_DMA_Abort_IT+0x96>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <HAL_DMA_Abort_IT+0xdc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d012      	beq.n	8002dcc <HAL_DMA_Abort_IT+0x90>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_DMA_Abort_IT+0xe0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00a      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x8a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1a      	ldr	r2, [pc, #104]	; (8002e20 <HAL_DMA_Abort_IT+0xe4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d102      	bne.n	8002dc0 <HAL_DMA_Abort_IT+0x84>
 8002dba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dbe:	e00e      	b.n	8002dde <HAL_DMA_Abort_IT+0xa2>
 8002dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc4:	e00b      	b.n	8002dde <HAL_DMA_Abort_IT+0xa2>
 8002dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dca:	e008      	b.n	8002dde <HAL_DMA_Abort_IT+0xa2>
 8002dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd0:	e005      	b.n	8002dde <HAL_DMA_Abort_IT+0xa2>
 8002dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dd6:	e002      	b.n	8002dde <HAL_DMA_Abort_IT+0xa2>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	e000      	b.n	8002dde <HAL_DMA_Abort_IT+0xa2>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <HAL_DMA_Abort_IT+0xe8>)
 8002de0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
    } 
  }
  return status;
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40020008 	.word	0x40020008
 8002e10:	4002001c 	.word	0x4002001c
 8002e14:	40020030 	.word	0x40020030
 8002e18:	40020044 	.word	0x40020044
 8002e1c:	40020058 	.word	0x40020058
 8002e20:	4002006c 	.word	0x4002006c
 8002e24:	40020000 	.word	0x40020000

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b08b      	sub	sp, #44	; 0x2c
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e32:	2300      	movs	r3, #0
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3a:	e169      	b.n	8003110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f040 8158 	bne.w	800310a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a9a      	ldr	r2, [pc, #616]	; (80030c8 <HAL_GPIO_Init+0x2a0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d05e      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e64:	4a98      	ldr	r2, [pc, #608]	; (80030c8 <HAL_GPIO_Init+0x2a0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d875      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e6a:	4a98      	ldr	r2, [pc, #608]	; (80030cc <HAL_GPIO_Init+0x2a4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d058      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e70:	4a96      	ldr	r2, [pc, #600]	; (80030cc <HAL_GPIO_Init+0x2a4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d86f      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e76:	4a96      	ldr	r2, [pc, #600]	; (80030d0 <HAL_GPIO_Init+0x2a8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d052      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e7c:	4a94      	ldr	r2, [pc, #592]	; (80030d0 <HAL_GPIO_Init+0x2a8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d869      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e82:	4a94      	ldr	r2, [pc, #592]	; (80030d4 <HAL_GPIO_Init+0x2ac>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d04c      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e88:	4a92      	ldr	r2, [pc, #584]	; (80030d4 <HAL_GPIO_Init+0x2ac>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d863      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e8e:	4a92      	ldr	r2, [pc, #584]	; (80030d8 <HAL_GPIO_Init+0x2b0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d046      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e94:	4a90      	ldr	r2, [pc, #576]	; (80030d8 <HAL_GPIO_Init+0x2b0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d85d      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e9a:	2b12      	cmp	r3, #18
 8002e9c:	d82a      	bhi.n	8002ef4 <HAL_GPIO_Init+0xcc>
 8002e9e:	2b12      	cmp	r3, #18
 8002ea0:	d859      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <HAL_GPIO_Init+0x80>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002f23 	.word	0x08002f23
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	08002f0f 	.word	0x08002f0f
 8002eb4:	08002f51 	.word	0x08002f51
 8002eb8:	08002f57 	.word	0x08002f57
 8002ebc:	08002f57 	.word	0x08002f57
 8002ec0:	08002f57 	.word	0x08002f57
 8002ec4:	08002f57 	.word	0x08002f57
 8002ec8:	08002f57 	.word	0x08002f57
 8002ecc:	08002f57 	.word	0x08002f57
 8002ed0:	08002f57 	.word	0x08002f57
 8002ed4:	08002f57 	.word	0x08002f57
 8002ed8:	08002f57 	.word	0x08002f57
 8002edc:	08002f57 	.word	0x08002f57
 8002ee0:	08002f57 	.word	0x08002f57
 8002ee4:	08002f57 	.word	0x08002f57
 8002ee8:	08002f57 	.word	0x08002f57
 8002eec:	08002f05 	.word	0x08002f05
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	4a79      	ldr	r2, [pc, #484]	; (80030dc <HAL_GPIO_Init+0x2b4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002efa:	e02c      	b.n	8002f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	623b      	str	r3, [r7, #32]
          break;
 8002f02:	e029      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	623b      	str	r3, [r7, #32]
          break;
 8002f0c:	e024      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	3308      	adds	r3, #8
 8002f14:	623b      	str	r3, [r7, #32]
          break;
 8002f16:	e01f      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	623b      	str	r3, [r7, #32]
          break;
 8002f20:	e01a      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	623b      	str	r3, [r7, #32]
          break;
 8002f2e:	e013      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	611a      	str	r2, [r3, #16]
          break;
 8002f42:	e009      	b.n	8002f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f44:	2308      	movs	r3, #8
 8002f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	615a      	str	r2, [r3, #20]
          break;
 8002f4e:	e003      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f50:	2300      	movs	r3, #0
 8002f52:	623b      	str	r3, [r7, #32]
          break;
 8002f54:	e000      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          break;
 8002f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	d801      	bhi.n	8002f62 <HAL_GPIO_Init+0x13a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	e001      	b.n	8002f66 <HAL_GPIO_Init+0x13e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2bff      	cmp	r3, #255	; 0xff
 8002f6c:	d802      	bhi.n	8002f74 <HAL_GPIO_Init+0x14c>
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	e002      	b.n	8002f7a <HAL_GPIO_Init+0x152>
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	3b08      	subs	r3, #8
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	210f      	movs	r1, #15
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	431a      	orrs	r2, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80b1 	beq.w	800310a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fa8:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	4a4c      	ldr	r2, [pc, #304]	; (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6193      	str	r3, [r2, #24]
 8002fb4:	4b4a      	ldr	r3, [pc, #296]	; (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fc0:	4a48      	ldr	r2, [pc, #288]	; (80030e4 <HAL_GPIO_Init+0x2bc>)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a40      	ldr	r2, [pc, #256]	; (80030e8 <HAL_GPIO_Init+0x2c0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <HAL_GPIO_Init+0x1ec>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3f      	ldr	r2, [pc, #252]	; (80030ec <HAL_GPIO_Init+0x2c4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00d      	beq.n	8003010 <HAL_GPIO_Init+0x1e8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <HAL_GPIO_Init+0x2c8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d007      	beq.n	800300c <HAL_GPIO_Init+0x1e4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3d      	ldr	r2, [pc, #244]	; (80030f4 <HAL_GPIO_Init+0x2cc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_GPIO_Init+0x1e0>
 8003004:	2303      	movs	r3, #3
 8003006:	e006      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003008:	2304      	movs	r3, #4
 800300a:	e004      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 800300c:	2302      	movs	r3, #2
 800300e:	e002      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003014:	2300      	movs	r3, #0
 8003016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003018:	f002 0203 	and.w	r2, r2, #3
 800301c:	0092      	lsls	r2, r2, #2
 800301e:	4093      	lsls	r3, r2
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003026:	492f      	ldr	r1, [pc, #188]	; (80030e4 <HAL_GPIO_Init+0x2bc>)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3302      	adds	r3, #2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	492c      	ldr	r1, [pc, #176]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e006      	b.n	800305c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	43db      	mvns	r3, r3
 8003056:	4928      	ldr	r1, [pc, #160]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003058:	4013      	ands	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003068:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4922      	ldr	r1, [pc, #136]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	43db      	mvns	r3, r3
 800307e:	491e      	ldr	r1, [pc, #120]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003080:	4013      	ands	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	4918      	ldr	r1, [pc, #96]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	608b      	str	r3, [r1, #8]
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800309e:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4914      	ldr	r1, [pc, #80]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d021      	beq.n	80030fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	60cb      	str	r3, [r1, #12]
 80030c4:	e021      	b.n	800310a <HAL_GPIO_Init+0x2e2>
 80030c6:	bf00      	nop
 80030c8:	10320000 	.word	0x10320000
 80030cc:	10310000 	.word	0x10310000
 80030d0:	10220000 	.word	0x10220000
 80030d4:	10210000 	.word	0x10210000
 80030d8:	10120000 	.word	0x10120000
 80030dc:	10110000 	.word	0x10110000
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40010800 	.word	0x40010800
 80030ec:	40010c00 	.word	0x40010c00
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40011400 	.word	0x40011400
 80030f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_GPIO_Init+0x304>)
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	43db      	mvns	r3, r3
 8003104:	4909      	ldr	r1, [pc, #36]	; (800312c <HAL_GPIO_Init+0x304>)
 8003106:	4013      	ands	r3, r2
 8003108:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	3301      	adds	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	f47f ae8e 	bne.w	8002e3c <HAL_GPIO_Init+0x14>
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	372c      	adds	r7, #44	; 0x2c
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	40010400 	.word	0x40010400

08003130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	887b      	ldrh	r3, [r7, #2]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e001      	b.n	8003152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	807b      	strh	r3, [r7, #2]
 800316a:	4613      	mov	r3, r2
 800316c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800316e:	787b      	ldrb	r3, [r7, #1]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003174:	887a      	ldrh	r2, [r7, #2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800317a:	e003      	b.n	8003184 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800317c:	887b      	ldrh	r3, [r7, #2]
 800317e:	041a      	lsls	r2, r3, #16
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	611a      	str	r2, [r3, #16]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
	...

08003190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e12b      	b.n	80033fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff f9c0 	bl	800253c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f4:	f000 ffea 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 80031f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a81      	ldr	r2, [pc, #516]	; (8003404 <HAL_I2C_Init+0x274>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d807      	bhi.n	8003214 <HAL_I2C_Init+0x84>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a80      	ldr	r2, [pc, #512]	; (8003408 <HAL_I2C_Init+0x278>)
 8003208:	4293      	cmp	r3, r2
 800320a:	bf94      	ite	ls
 800320c:	2301      	movls	r3, #1
 800320e:	2300      	movhi	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e006      	b.n	8003222 <HAL_I2C_Init+0x92>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a7d      	ldr	r2, [pc, #500]	; (800340c <HAL_I2C_Init+0x27c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	bf94      	ite	ls
 800321c:	2301      	movls	r3, #1
 800321e:	2300      	movhi	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0e7      	b.n	80033fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a78      	ldr	r2, [pc, #480]	; (8003410 <HAL_I2C_Init+0x280>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0c9b      	lsrs	r3, r3, #18
 8003234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a6a      	ldr	r2, [pc, #424]	; (8003404 <HAL_I2C_Init+0x274>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d802      	bhi.n	8003264 <HAL_I2C_Init+0xd4>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3301      	adds	r3, #1
 8003262:	e009      	b.n	8003278 <HAL_I2C_Init+0xe8>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	4a69      	ldr	r2, [pc, #420]	; (8003414 <HAL_I2C_Init+0x284>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	3301      	adds	r3, #1
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800328a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	495c      	ldr	r1, [pc, #368]	; (8003404 <HAL_I2C_Init+0x274>)
 8003294:	428b      	cmp	r3, r1
 8003296:	d819      	bhi.n	80032cc <HAL_I2C_Init+0x13c>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e59      	subs	r1, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a6:	1c59      	adds	r1, r3, #1
 80032a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032ac:	400b      	ands	r3, r1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_I2C_Init+0x138>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1e59      	subs	r1, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c6:	e051      	b.n	800336c <HAL_I2C_Init+0x1dc>
 80032c8:	2304      	movs	r3, #4
 80032ca:	e04f      	b.n	800336c <HAL_I2C_Init+0x1dc>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d111      	bne.n	80032f8 <HAL_I2C_Init+0x168>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1e58      	subs	r0, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	440b      	add	r3, r1
 80032e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e012      	b.n	800331e <HAL_I2C_Init+0x18e>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	0099      	lsls	r1, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	fbb0 f3f3 	udiv	r3, r0, r3
 800330e:	3301      	adds	r3, #1
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x196>
 8003322:	2301      	movs	r3, #1
 8003324:	e022      	b.n	800336c <HAL_I2C_Init+0x1dc>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10e      	bne.n	800334c <HAL_I2C_Init+0x1bc>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1e58      	subs	r0, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6859      	ldr	r1, [r3, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	440b      	add	r3, r1
 800333c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003340:	3301      	adds	r3, #1
 8003342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334a:	e00f      	b.n	800336c <HAL_I2C_Init+0x1dc>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	0099      	lsls	r1, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	6809      	ldr	r1, [r1, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800339a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6911      	ldr	r1, [r2, #16]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	000186a0 	.word	0x000186a0
 8003408:	001e847f 	.word	0x001e847f
 800340c:	003d08ff 	.word	0x003d08ff
 8003410:	431bde83 	.word	0x431bde83
 8003414:	10624dd3 	.word	0x10624dd3

08003418 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	461a      	mov	r2, r3
 8003424:	460b      	mov	r3, r1
 8003426:	817b      	strh	r3, [r7, #10]
 8003428:	4613      	mov	r3, r2
 800342a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff fb10 	bl	8002a50 <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	f040 80e0 	bne.w	8003600 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2319      	movs	r3, #25
 8003446:	2201      	movs	r2, #1
 8003448:	4970      	ldr	r1, [pc, #448]	; (800360c <HAL_I2C_Master_Transmit+0x1f4>)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f964 	bl	8003718 <I2C_WaitOnFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
 8003458:	e0d3      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_I2C_Master_Transmit+0x50>
 8003464:	2302      	movs	r3, #2
 8003466:	e0cc      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d007      	beq.n	800348e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2221      	movs	r2, #33	; 0x21
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2210      	movs	r2, #16
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	893a      	ldrh	r2, [r7, #8]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a50      	ldr	r2, [pc, #320]	; (8003610 <HAL_I2C_Master_Transmit+0x1f8>)
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d0:	8979      	ldrh	r1, [r7, #10]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f89c 	bl	8003614 <I2C_MasterRequestWrite>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e08d      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034fc:	e066      	b.n	80035cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	6a39      	ldr	r1, [r7, #32]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f9de 	bl	80038c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b04      	cmp	r3, #4
 8003514:	d107      	bne.n	8003526 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003524:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e06b      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	781a      	ldrb	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b04      	cmp	r3, #4
 8003566:	d11b      	bne.n	80035a0 <HAL_I2C_Master_Transmit+0x188>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356c:	2b00      	cmp	r3, #0
 800356e:	d017      	beq.n	80035a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	6a39      	ldr	r1, [r7, #32]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f9ce 	bl	8003946 <I2C_WaitOnBTFFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d107      	bne.n	80035c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e01a      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d194      	bne.n	80034fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	e000      	b.n	8003602 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	00100002 	.word	0x00100002
 8003610:	ffff0000 	.word	0xffff0000

08003614 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d006      	beq.n	800363e <I2C_MasterRequestWrite+0x2a>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d003      	beq.n	800363e <I2C_MasterRequestWrite+0x2a>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800363c:	d108      	bne.n	8003650 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e00b      	b.n	8003668 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	2b12      	cmp	r3, #18
 8003656:	d107      	bne.n	8003668 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f84f 	bl	8003718 <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368e:	d103      	bne.n	8003698 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e035      	b.n	8003708 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a4:	d108      	bne.n	80036b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b4:	611a      	str	r2, [r3, #16]
 80036b6:	e01b      	b.n	80036f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	11db      	asrs	r3, r3, #7
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0306 	and.w	r3, r3, #6
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f063 030f 	orn	r3, r3, #15
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	490e      	ldr	r1, [pc, #56]	; (8003710 <I2C_MasterRequestWrite+0xfc>)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f875 	bl	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e010      	b.n	8003708 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4907      	ldr	r1, [pc, #28]	; (8003714 <I2C_MasterRequestWrite+0x100>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f865 	bl	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	00010008 	.word	0x00010008
 8003714:	00010002 	.word	0x00010002

08003718 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003728:	e025      	b.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d021      	beq.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003732:	f7ff f98d 	bl	8002a50 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d302      	bcc.n	8003748 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f043 0220 	orr.w	r2, r3, #32
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e023      	b.n	80037be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10d      	bne.n	800379c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4013      	ands	r3, r2
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	bf0c      	ite	eq
 8003792:	2301      	moveq	r3, #1
 8003794:	2300      	movne	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	e00c      	b.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d0b6      	beq.n	800372a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037d4:	e051      	b.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e4:	d123      	bne.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e046      	b.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d021      	beq.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7ff f90b 	bl	8002a50 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d116      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e020      	b.n	80038bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d10c      	bne.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e00b      	b.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	43da      	mvns	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d18d      	bne.n	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038d0:	e02d      	b.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f878 	bl	80039c8 <I2C_IsAcknowledgeFailed>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e02d      	b.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d021      	beq.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7ff f8b1 	bl	8002a50 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d302      	bcc.n	8003900 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d116      	bne.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e007      	b.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b80      	cmp	r3, #128	; 0x80
 800393a:	d1ca      	bne.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b084      	sub	sp, #16
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003952:	e02d      	b.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f837 	bl	80039c8 <I2C_IsAcknowledgeFailed>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e02d      	b.n	80039c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d021      	beq.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396c:	f7ff f870 	bl	8002a50 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	429a      	cmp	r2, r3
 800397a:	d302      	bcc.n	8003982 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d116      	bne.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e007      	b.n	80039c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d1ca      	bne.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039de:	d11b      	bne.n	8003a18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f043 0204 	orr.w	r2, r3, #4
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e272      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8087 	beq.w	8003b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a44:	4b92      	ldr	r3, [pc, #584]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d00c      	beq.n	8003a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a50:	4b8f      	ldr	r3, [pc, #572]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d112      	bne.n	8003a82 <HAL_RCC_OscConfig+0x5e>
 8003a5c:	4b8c      	ldr	r3, [pc, #560]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a68:	d10b      	bne.n	8003a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6a:	4b89      	ldr	r3, [pc, #548]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d06c      	beq.n	8003b50 <HAL_RCC_OscConfig+0x12c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d168      	bne.n	8003b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e24c      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x76>
 8003a8c:	4b80      	ldr	r3, [pc, #512]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7f      	ldr	r2, [pc, #508]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e02e      	b.n	8003af8 <HAL_RCC_OscConfig+0xd4>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x98>
 8003aa2:	4b7b      	ldr	r3, [pc, #492]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7a      	ldr	r2, [pc, #488]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b78      	ldr	r3, [pc, #480]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a77      	ldr	r2, [pc, #476]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e01d      	b.n	8003af8 <HAL_RCC_OscConfig+0xd4>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xbc>
 8003ac6:	4b72      	ldr	r3, [pc, #456]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a71      	ldr	r2, [pc, #452]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6e      	ldr	r2, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0xd4>
 8003ae0:	4b6b      	ldr	r3, [pc, #428]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a67      	ldr	r2, [pc, #412]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fe ffa6 	bl	8002a50 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fe ffa2 	bl	8002a50 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e200      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0xe4>
 8003b26:	e014      	b.n	8003b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe ff92 	bl	8002a50 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe ff8e 	bl	8002a50 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e1ec      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x10c>
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d063      	beq.n	8003c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b5e:	4b4c      	ldr	r3, [pc, #304]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b6a:	4b49      	ldr	r3, [pc, #292]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d11c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x18c>
 8003b76:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d116      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	4b43      	ldr	r3, [pc, #268]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_RCC_OscConfig+0x176>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e1c0      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4939      	ldr	r1, [pc, #228]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	e03a      	b.n	8003c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb8:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe ff47 	bl	8002a50 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7fe ff43 	bl	8002a50 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1a1      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4927      	ldr	r1, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfa:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <HAL_RCC_OscConfig+0x270>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe ff26 	bl	8002a50 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fe ff22 	bl	8002a50 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e180      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d03a      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d019      	beq.n	8003c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3a:	4b17      	ldr	r3, [pc, #92]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c40:	f7fe ff06 	bl	8002a50 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c48:	f7fe ff02 	bl	8002a50 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e160      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c66:	2001      	movs	r0, #1
 8003c68:	f000 fad8 	bl	800421c <RCC_Delay>
 8003c6c:	e01c      	b.n	8003ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <HAL_RCC_OscConfig+0x274>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c74:	f7fe feec 	bl	8002a50 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7a:	e00f      	b.n	8003c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c7c:	f7fe fee8 	bl	8002a50 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d908      	bls.n	8003c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e146      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	42420000 	.word	0x42420000
 8003c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c9c:	4b92      	ldr	r3, [pc, #584]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e9      	bne.n	8003c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80a6 	beq.w	8003e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cba:	4b8b      	ldr	r3, [pc, #556]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	4b88      	ldr	r3, [pc, #544]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	4a87      	ldr	r2, [pc, #540]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	61d3      	str	r3, [r2, #28]
 8003cd2:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce2:	4b82      	ldr	r3, [pc, #520]	; (8003eec <HAL_RCC_OscConfig+0x4c8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d118      	bne.n	8003d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cee:	4b7f      	ldr	r3, [pc, #508]	; (8003eec <HAL_RCC_OscConfig+0x4c8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7e      	ldr	r2, [pc, #504]	; (8003eec <HAL_RCC_OscConfig+0x4c8>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fea9 	bl	8002a50 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fe fea5 	bl	8002a50 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e103      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	4b75      	ldr	r3, [pc, #468]	; (8003eec <HAL_RCC_OscConfig+0x4c8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x312>
 8003d28:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	4a6e      	ldr	r2, [pc, #440]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6213      	str	r3, [r2, #32]
 8003d34:	e02d      	b.n	8003d92 <HAL_RCC_OscConfig+0x36e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x334>
 8003d3e:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4a69      	ldr	r2, [pc, #420]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	6213      	str	r3, [r2, #32]
 8003d4a:	4b67      	ldr	r3, [pc, #412]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	4a66      	ldr	r2, [pc, #408]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d50:	f023 0304 	bic.w	r3, r3, #4
 8003d54:	6213      	str	r3, [r2, #32]
 8003d56:	e01c      	b.n	8003d92 <HAL_RCC_OscConfig+0x36e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x356>
 8003d60:	4b61      	ldr	r3, [pc, #388]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4a60      	ldr	r2, [pc, #384]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6213      	str	r3, [r2, #32]
 8003d6c:	4b5e      	ldr	r3, [pc, #376]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	4a5d      	ldr	r2, [pc, #372]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6213      	str	r3, [r2, #32]
 8003d78:	e00b      	b.n	8003d92 <HAL_RCC_OscConfig+0x36e>
 8003d7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6213      	str	r3, [r2, #32]
 8003d86:	4b58      	ldr	r3, [pc, #352]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4a57      	ldr	r2, [pc, #348]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d015      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe fe59 	bl	8002a50 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fe fe55 	bl	8002a50 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0b1      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db8:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ee      	beq.n	8003da2 <HAL_RCC_OscConfig+0x37e>
 8003dc4:	e014      	b.n	8003df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fe fe43 	bl	8002a50 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fe fe3f 	bl	8002a50 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e09b      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de4:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ee      	bne.n	8003dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b3c      	ldr	r3, [pc, #240]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8087 	beq.w	8003f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d061      	beq.n	8003edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d146      	bne.n	8003eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fe fe13 	bl	8002a50 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fe fe0f 	bl	8002a50 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e06d      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e54:	d108      	bne.n	8003e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4921      	ldr	r1, [pc, #132]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e68:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a19      	ldr	r1, [r3, #32]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	430b      	orrs	r3, r1
 8003e7a:	491b      	ldr	r1, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e86:	f7fe fde3 	bl	8002a50 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fe fddf 	bl	8002a50 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e03d      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x46a>
 8003eac:	e035      	b.n	8003f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCC_OscConfig+0x4cc>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fdcc 	bl	8002a50 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fe fdc8 	bl	8002a50 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e026      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x498>
 8003eda:	e01e      	b.n	8003f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e019      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_OscConfig+0x500>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0d0      	b.n	80040de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b6a      	ldr	r3, [pc, #424]	; (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d910      	bls.n	8003f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b67      	ldr	r3, [pc, #412]	; (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 0207 	bic.w	r2, r3, #7
 8003f52:	4965      	ldr	r1, [pc, #404]	; (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b63      	ldr	r3, [pc, #396]	; (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0b8      	b.n	80040de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f84:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a58      	ldr	r2, [pc, #352]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003f8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f9c:	4b53      	ldr	r3, [pc, #332]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a52      	ldr	r2, [pc, #328]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003fa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa8:	4b50      	ldr	r3, [pc, #320]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	494d      	ldr	r1, [pc, #308]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d040      	beq.n	8004048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d115      	bne.n	8004006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e07f      	b.n	80040de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	4b41      	ldr	r3, [pc, #260]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e073      	b.n	80040de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff6:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e06b      	b.n	80040de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004006:	4b39      	ldr	r3, [pc, #228]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f023 0203 	bic.w	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4936      	ldr	r1, [pc, #216]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004018:	f7fe fd1a 	bl	8002a50 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	e00a      	b.n	8004036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004020:	f7fe fd16 	bl	8002a50 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e053      	b.n	80040de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	4b2d      	ldr	r3, [pc, #180]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 020c 	and.w	r2, r3, #12
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	429a      	cmp	r2, r3
 8004046:	d1eb      	bne.n	8004020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004048:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d210      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 0207 	bic.w	r2, r3, #7
 800405e:	4922      	ldr	r1, [pc, #136]	; (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4313      	orrs	r3, r2
 8004064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e032      	b.n	80040de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4916      	ldr	r1, [pc, #88]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	490e      	ldr	r1, [pc, #56]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040b6:	f000 f821 	bl	80040fc <HAL_RCC_GetSysClockFreq>
 80040ba:	4602      	mov	r2, r0
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	490a      	ldr	r1, [pc, #40]	; (80040f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	5ccb      	ldrb	r3, [r1, r3]
 80040ca:	fa22 f303 	lsr.w	r3, r2, r3
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_RCC_ClockConfig+0x1cc>)
 80040d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_RCC_ClockConfig+0x1d0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe fc78 	bl	80029cc <HAL_InitTick>

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40022000 	.word	0x40022000
 80040ec:	40021000 	.word	0x40021000
 80040f0:	0800a328 	.word	0x0800a328
 80040f4:	20000000 	.word	0x20000000
 80040f8:	20000004 	.word	0x20000004

080040fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040fc:	b490      	push	{r4, r7}
 80040fe:	b08a      	sub	sp, #40	; 0x28
 8004100:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004104:	1d3c      	adds	r4, r7, #4
 8004106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800410c:	f240 2301 	movw	r3, #513	; 0x201
 8004110:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61fb      	str	r3, [r7, #28]
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004126:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b04      	cmp	r3, #4
 8004134:	d002      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x40>
 8004136:	2b08      	cmp	r3, #8
 8004138:	d003      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x46>
 800413a:	e02b      	b.n	8004194 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800413c:	4b1c      	ldr	r3, [pc, #112]	; (80041b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800413e:	623b      	str	r3, [r7, #32]
      break;
 8004140:	e02b      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	0c9b      	lsrs	r3, r3, #18
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	3328      	adds	r3, #40	; 0x28
 800414c:	443b      	add	r3, r7
 800414e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004152:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d012      	beq.n	8004184 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	0c5b      	lsrs	r3, r3, #17
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	3328      	adds	r3, #40	; 0x28
 800416a:	443b      	add	r3, r7
 800416c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004170:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004176:	fb03 f202 	mul.w	r2, r3, r2
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	e004      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	623b      	str	r3, [r7, #32]
      break;
 8004192:	e002      	b.n	800419a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004196:	623b      	str	r3, [r7, #32]
      break;
 8004198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800419a:	6a3b      	ldr	r3, [r7, #32]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3728      	adds	r7, #40	; 0x28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc90      	pop	{r4, r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	0800a118 	.word	0x0800a118
 80041ac:	40021000 	.word	0x40021000
 80041b0:	007a1200 	.word	0x007a1200
 80041b4:	003d0900 	.word	0x003d0900

080041b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041bc:	4b02      	ldr	r3, [pc, #8]	; (80041c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	20000000 	.word	0x20000000

080041cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041d0:	f7ff fff2 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	4903      	ldr	r1, [pc, #12]	; (80041f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e2:	5ccb      	ldrb	r3, [r1, r3]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40021000 	.word	0x40021000
 80041f0:	0800a338 	.word	0x0800a338

080041f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041f8:	f7ff ffde 	bl	80041b8 <HAL_RCC_GetHCLKFreq>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	0adb      	lsrs	r3, r3, #11
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	4903      	ldr	r1, [pc, #12]	; (8004218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800420a:	5ccb      	ldrb	r3, [r1, r3]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	0800a338 	.word	0x0800a338

0800421c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <RCC_Delay+0x34>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <RCC_Delay+0x38>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0a5b      	lsrs	r3, r3, #9
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	fb02 f303 	mul.w	r3, r2, r3
 8004236:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004238:	bf00      	nop
  }
  while (Delay --);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	60fa      	str	r2, [r7, #12]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f9      	bne.n	8004238 <RCC_Delay+0x1c>
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	20000000 	.word	0x20000000
 8004254:	10624dd3 	.word	0x10624dd3

08004258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e076      	b.n	8004358 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800427a:	d009      	beq.n	8004290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
 8004282:	e005      	b.n	8004290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fe f984 	bl	80025b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	ea42 0103 	orr.w	r1, r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	0c1a      	lsrs	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f002 0204 	and.w	r2, r2, #4
 8004336:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69da      	ldr	r2, [r3, #28]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004346:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_SPI_Transmit+0x22>
 800437e:	2302      	movs	r3, #2
 8004380:	e126      	b.n	80045d0 <HAL_SPI_Transmit+0x270>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800438a:	f7fe fb61 	bl	8002a50 <HAL_GetTick>
 800438e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d002      	beq.n	80043a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
 80043a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043a4:	e10b      	b.n	80045be <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_SPI_Transmit+0x52>
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043b6:	e102      	b.n	80045be <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2203      	movs	r2, #3
 80043bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fe:	d10f      	bne.n	8004420 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800441e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d007      	beq.n	800443e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800443c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004446:	d14b      	bne.n	80044e0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_SPI_Transmit+0xf6>
 8004450:	8afb      	ldrh	r3, [r7, #22]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d13e      	bne.n	80044d4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	881a      	ldrh	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	1c9a      	adds	r2, r3, #2
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800447a:	e02b      	b.n	80044d4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b02      	cmp	r3, #2
 8004488:	d112      	bne.n	80044b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	881a      	ldrh	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	1c9a      	adds	r2, r3, #2
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80044ae:	e011      	b.n	80044d4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b0:	f7fe face 	bl	8002a50 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d803      	bhi.n	80044c8 <HAL_SPI_Transmit+0x168>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d102      	bne.n	80044ce <HAL_SPI_Transmit+0x16e>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044d2:	e074      	b.n	80045be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1ce      	bne.n	800447c <HAL_SPI_Transmit+0x11c>
 80044de:	e04c      	b.n	800457a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <HAL_SPI_Transmit+0x18e>
 80044e8:	8afb      	ldrh	r3, [r7, #22]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d140      	bne.n	8004570 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	7812      	ldrb	r2, [r2, #0]
 80044fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004514:	e02c      	b.n	8004570 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b02      	cmp	r3, #2
 8004522:	d113      	bne.n	800454c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	7812      	ldrb	r2, [r2, #0]
 8004530:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	86da      	strh	r2, [r3, #54]	; 0x36
 800454a:	e011      	b.n	8004570 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800454c:	f7fe fa80 	bl	8002a50 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d803      	bhi.n	8004564 <HAL_SPI_Transmit+0x204>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d102      	bne.n	800456a <HAL_SPI_Transmit+0x20a>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800456e:	e026      	b.n	80045be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004574:	b29b      	uxth	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1cd      	bne.n	8004516 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	6839      	ldr	r1, [r7, #0]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 fbc4 	bl	8004d0c <SPI_EndRxTxTransaction>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10a      	bne.n	80045ae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77fb      	strb	r3, [r7, #31]
 80045ba:	e000      	b.n	80045be <HAL_SPI_Transmit+0x25e>
  }

error:
 80045bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f4:	d112      	bne.n	800461c <HAL_SPI_Receive+0x44>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10e      	bne.n	800461c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2204      	movs	r2, #4
 8004602:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	4613      	mov	r3, r2
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f8f1 	bl	80047fa <HAL_SPI_TransmitReceive>
 8004618:	4603      	mov	r3, r0
 800461a:	e0ea      	b.n	80047f2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_SPI_Receive+0x52>
 8004626:	2302      	movs	r3, #2
 8004628:	e0e3      	b.n	80047f2 <HAL_SPI_Receive+0x21a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004632:	f7fe fa0d 	bl	8002a50 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d002      	beq.n	800464a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004644:	2302      	movs	r3, #2
 8004646:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004648:	e0ca      	b.n	80047e0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <HAL_SPI_Receive+0x7e>
 8004650:	88fb      	ldrh	r3, [r7, #6]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d102      	bne.n	800465c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800465a:	e0c1      	b.n	80047e0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2204      	movs	r2, #4
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a2:	d10f      	bne.n	80046c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d007      	beq.n	80046e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d162      	bne.n	80047b0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046ea:	e02e      	b.n	800474a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d115      	bne.n	8004726 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f103 020c 	add.w	r2, r3, #12
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004724:	e011      	b.n	800474a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004726:	f7fe f993 	bl	8002a50 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d803      	bhi.n	800473e <HAL_SPI_Receive+0x166>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473c:	d102      	bne.n	8004744 <HAL_SPI_Receive+0x16c>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004748:	e04a      	b.n	80047e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1cb      	bne.n	80046ec <HAL_SPI_Receive+0x114>
 8004754:	e031      	b.n	80047ba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	d113      	bne.n	800478c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	b292      	uxth	r2, r2
 8004770:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	1c9a      	adds	r2, r3, #2
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	87da      	strh	r2, [r3, #62]	; 0x3e
 800478a:	e011      	b.n	80047b0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800478c:	f7fe f960 	bl	8002a50 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d803      	bhi.n	80047a4 <HAL_SPI_Receive+0x1cc>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_Receive+0x1d2>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047ae:	e017      	b.n	80047e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1cd      	bne.n	8004756 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	6839      	ldr	r1, [r7, #0]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fa52 	bl	8004c68 <SPI_EndRxTransaction>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	75fb      	strb	r3, [r7, #23]
 80047dc:	e000      	b.n	80047e0 <HAL_SPI_Receive+0x208>
  }

error :
 80047de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b08c      	sub	sp, #48	; 0x30
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004808:	2301      	movs	r3, #1
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_SPI_TransmitReceive+0x26>
 800481c:	2302      	movs	r3, #2
 800481e:	e18a      	b.n	8004b36 <HAL_SPI_TransmitReceive+0x33c>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004828:	f7fe f912 	bl	8002a50 <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800483e:	887b      	ldrh	r3, [r7, #2]
 8004840:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004846:	2b01      	cmp	r3, #1
 8004848:	d00f      	beq.n	800486a <HAL_SPI_TransmitReceive+0x70>
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004850:	d107      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x68>
 800485a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800485e:	2b04      	cmp	r3, #4
 8004860:	d003      	beq.n	800486a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004862:	2302      	movs	r3, #2
 8004864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004868:	e15b      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_SPI_TransmitReceive+0x82>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SPI_TransmitReceive+0x82>
 8004876:	887b      	ldrh	r3, [r7, #2]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d103      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004882:	e14e      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b04      	cmp	r3, #4
 800488e:	d003      	beq.n	8004898 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2205      	movs	r2, #5
 8004894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	887a      	ldrh	r2, [r7, #2]
 80048ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	887a      	ldrh	r2, [r7, #2]
 80048ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d007      	beq.n	80048ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f4:	d178      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_TransmitReceive+0x10a>
 80048fe:	8b7b      	ldrh	r3, [r7, #26]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d166      	bne.n	80049d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004928:	e053      	b.n	80049d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d11b      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x176>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x176>
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	2b01      	cmp	r3, #1
 8004946:	d113      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	881a      	ldrh	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	1c9a      	adds	r2, r3, #2
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d119      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x1b8>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d014      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	b292      	uxth	r2, r2
 8004994:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	1c9a      	adds	r2, r3, #2
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049ae:	2301      	movs	r3, #1
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049b2:	f7fe f84d 	bl	8002a50 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049be:	429a      	cmp	r2, r3
 80049c0:	d807      	bhi.n	80049d2 <HAL_SPI_TransmitReceive+0x1d8>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d003      	beq.n	80049d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049d0:	e0a7      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1a6      	bne.n	800492a <HAL_SPI_TransmitReceive+0x130>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1a1      	bne.n	800492a <HAL_SPI_TransmitReceive+0x130>
 80049e6:	e07c      	b.n	8004ae2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x1fc>
 80049f0:	8b7b      	ldrh	r3, [r7, #26]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d16b      	bne.n	8004ace <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a1c:	e057      	b.n	8004ace <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d11c      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x26c>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d017      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x26c>
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d114      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d119      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x2ae>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d014      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aa8:	f7fd ffd2 	bl	8002a50 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d803      	bhi.n	8004ac0 <HAL_SPI_TransmitReceive+0x2c6>
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d102      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0x2cc>
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004acc:	e029      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1a2      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x224>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d19d      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f910 	bl	8004d0c <SPI_EndRxTxTransaction>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d006      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004afe:	e010      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	e000      	b.n	8004b22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3730      	adds	r7, #48	; 0x30
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4c:	b2db      	uxtb	r3, r3
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b68:	f7fd ff72 	bl	8002a50 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	4413      	add	r3, r2
 8004b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b78:	f7fd ff6a 	bl	8002a50 <HAL_GetTick>
 8004b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7e:	4b39      	ldr	r3, [pc, #228]	; (8004c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	015b      	lsls	r3, r3, #5
 8004b84:	0d1b      	lsrs	r3, r3, #20
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8e:	e054      	b.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b96:	d050      	beq.n	8004c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b98:	f7fd ff5a 	bl	8002a50 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d902      	bls.n	8004bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d13d      	bne.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc6:	d111      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d004      	beq.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bda:	d107      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf4:	d10f      	bne.n	8004c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e017      	b.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	bf0c      	ite	eq
 8004c4a:	2301      	moveq	r3, #1
 8004c4c:	2300      	movne	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d19b      	bne.n	8004b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000000 	.word	0x20000000

08004c68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7c:	d111      	bne.n	8004ca2 <SPI_EndRxTransaction+0x3a>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c86:	d004      	beq.n	8004c92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c90:	d107      	bne.n	8004ca2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004caa:	d117      	bne.n	8004cdc <SPI_EndRxTransaction+0x74>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb4:	d112      	bne.n	8004cdc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ff49 	bl	8004b58 <SPI_WaitFlagStateUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01a      	beq.n	8004d02 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e013      	b.n	8004d04 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff ff36 	bl	8004b58 <SPI_WaitFlagStateUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e000      	b.n	8004d04 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2180      	movs	r1, #128	; 0x80
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff18 	bl	8004b58 <SPI_WaitFlagStateUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e000      	b.n	8004d40 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e03f      	b.n	8004dda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fd fc6c 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2224      	movs	r2, #36	; 0x24
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fc85 	bl	800569c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b08a      	sub	sp, #40	; 0x28
 8004de6:	af02      	add	r7, sp, #8
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d17c      	bne.n	8004efc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <HAL_UART_Transmit+0x2c>
 8004e08:	88fb      	ldrh	r3, [r7, #6]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e075      	b.n	8004efe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_UART_Transmit+0x3e>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e06e      	b.n	8004efe <HAL_UART_Transmit+0x11c>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2221      	movs	r2, #33	; 0x21
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e36:	f7fd fe0b 	bl	8002a50 <HAL_GetTick>
 8004e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	88fa      	ldrh	r2, [r7, #6]
 8004e40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	88fa      	ldrh	r2, [r7, #6]
 8004e46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e50:	d108      	bne.n	8004e64 <HAL_UART_Transmit+0x82>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e003      	b.n	8004e6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e74:	e02a      	b.n	8004ecc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2180      	movs	r1, #128	; 0x80
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 fa38 	bl	80052f6 <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e036      	b.n	8004efe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	e007      	b.n	8004ebe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1cf      	bne.n	8004e76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2140      	movs	r1, #64	; 0x40
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fa08 	bl	80052f6 <UART_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e006      	b.n	8004efe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e000      	b.n	8004efe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
  }
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3720      	adds	r7, #32
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	4613      	mov	r3, r2
 8004f12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	d11d      	bne.n	8004f5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_UART_Receive_IT+0x26>
 8004f26:	88fb      	ldrh	r3, [r7, #6]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e016      	b.n	8004f5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Receive_IT+0x38>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e00f      	b.n	8004f5e <HAL_UART_Receive_IT+0x58>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004f4c:	88fb      	ldrh	r3, [r7, #6]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 fa19 	bl	800538a <UART_Start_Receive_IT>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	e000      	b.n	8004f5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_UART_IRQHandler+0x52>
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fac9 	bl	800554a <UART_Receive_IT>
      return;
 8004fb8:	e17b      	b.n	80052b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80b1 	beq.w	8005124 <HAL_UART_IRQHandler+0x1bc>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d105      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x70>
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 80a6 	beq.w	8005124 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x90>
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f043 0201 	orr.w	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_UART_IRQHandler+0xb0>
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	f043 0202 	orr.w	r2, r3, #2
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_UART_IRQHandler+0xd0>
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005030:	f043 0204 	orr.w	r2, r3, #4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00f      	beq.n	8005062 <HAL_UART_IRQHandler+0xfa>
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_UART_IRQHandler+0xee>
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f043 0208 	orr.w	r2, r3, #8
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 811e 	beq.w	80052a8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_UART_IRQHandler+0x11e>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fa62 	bl	800554a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <HAL_UART_IRQHandler+0x146>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d031      	beq.n	8005112 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f9a4 	bl	80053fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d023      	beq.n	800510a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d013      	beq.n	8005102 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050de:	4a76      	ldr	r2, [pc, #472]	; (80052b8 <HAL_UART_IRQHandler+0x350>)
 80050e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd fe28 	bl	8002d3c <HAL_DMA_Abort_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	e00e      	b.n	8005120 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f8e3 	bl	80052ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005108:	e00a      	b.n	8005120 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f8df 	bl	80052ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	e006      	b.n	8005120 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f8db 	bl	80052ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800511e:	e0c3      	b.n	80052a8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005120:	bf00      	nop
    return;
 8005122:	e0c1      	b.n	80052a8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	2b01      	cmp	r3, #1
 800512a:	f040 80a1 	bne.w	8005270 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 809b 	beq.w	8005270 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 8095 	beq.w	8005270 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d04e      	beq.n	8005208 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005174:	8a3b      	ldrh	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 8098 	beq.w	80052ac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005180:	8a3a      	ldrh	r2, [r7, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	f080 8092 	bcs.w	80052ac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8a3a      	ldrh	r2, [r7, #16]
 800518c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b20      	cmp	r3, #32
 8005196:	d02b      	beq.n	80051f0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051a6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0210 	bic.w	r2, r2, #16
 80051e4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fd fd6b 	bl	8002cc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f86d 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005206:	e051      	b.n	80052ac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005210:	b29b      	uxth	r3, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d047      	beq.n	80052b0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005220:	8a7b      	ldrh	r3, [r7, #18]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d044      	beq.n	80052b0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005234:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0201 	bic.w	r2, r2, #1
 8005244:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0210 	bic.w	r2, r2, #16
 8005262:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005264:	8a7b      	ldrh	r3, [r7, #18]
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f839 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800526e:	e01f      	b.n	80052b0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005276:	2b00      	cmp	r3, #0
 8005278:	d008      	beq.n	800528c <HAL_UART_IRQHandler+0x324>
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8f9 	bl	800547c <UART_Transmit_IT>
    return;
 800528a:	e012      	b.n	80052b2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00d      	beq.n	80052b2 <HAL_UART_IRQHandler+0x34a>
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f93a 	bl	800551a <UART_EndTransmit_IT>
    return;
 80052a6:	e004      	b.n	80052b2 <HAL_UART_IRQHandler+0x34a>
    return;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80052b0:	bf00      	nop
  }
}
 80052b2:	3728      	adds	r7, #40	; 0x28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	08005455 	.word	0x08005455

080052bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr

080052f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4613      	mov	r3, r2
 8005304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005306:	e02c      	b.n	8005362 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d028      	beq.n	8005362 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <UART_WaitOnFlagUntilTimeout+0x30>
 8005316:	f7fd fb9b 	bl	8002a50 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	429a      	cmp	r2, r3
 8005324:	d21d      	bcs.n	8005362 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005334:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e00f      	b.n	8005382 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4013      	ands	r3, r2
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	429a      	cmp	r2, r3
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	461a      	mov	r2, r3
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	429a      	cmp	r2, r3
 800537e:	d0c3      	beq.n	8005308 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	60f8      	str	r0, [r7, #12]
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	4613      	mov	r3, r2
 8005396:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	88fa      	ldrh	r2, [r7, #6]
 80053a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2222      	movs	r2, #34	; 0x22
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ce:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695a      	ldr	r2, [r3, #20]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0220 	orr.w	r2, r2, #32
 80053ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005412:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	2b01      	cmp	r3, #1
 800542a:	d107      	bne.n	800543c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0210 	bic.w	r2, r2, #16
 800543a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff ff2d 	bl	80052ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b21      	cmp	r3, #33	; 0x21
 800548e:	d13e      	bne.n	800550e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d114      	bne.n	80054c4 <UART_Transmit_IT+0x48>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d110      	bne.n	80054c4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	1c9a      	adds	r2, r3, #2
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	621a      	str	r2, [r3, #32]
 80054c2:	e008      	b.n	80054d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	1c59      	adds	r1, r3, #1
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6211      	str	r1, [r2, #32]
 80054ce:	781a      	ldrb	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29b      	uxth	r3, r3
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4619      	mov	r1, r3
 80054e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10f      	bne.n	800550a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005508:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e000      	b.n	8005510 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
  }
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005530:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff febe 	bl	80052bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b22      	cmp	r3, #34	; 0x22
 800555c:	f040 8099 	bne.w	8005692 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d117      	bne.n	800559a <UART_Receive_IT+0x50>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d113      	bne.n	800559a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005588:	b29a      	uxth	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	1c9a      	adds	r2, r3, #2
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	629a      	str	r2, [r3, #40]	; 0x28
 8005598:	e026      	b.n	80055e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ac:	d007      	beq.n	80055be <UART_Receive_IT+0x74>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10a      	bne.n	80055cc <UART_Receive_IT+0x82>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e008      	b.n	80055de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4619      	mov	r1, r3
 80055f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d148      	bne.n	800568e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0220 	bic.w	r2, r2, #32
 800560a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800561a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0201 	bic.w	r2, r2, #1
 800562a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	2b01      	cmp	r3, #1
 800563a:	d123      	bne.n	8005684 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0210 	bic.w	r2, r2, #16
 8005650:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0310 	and.w	r3, r3, #16
 800565c:	2b10      	cmp	r3, #16
 800565e:	d10a      	bne.n	8005676 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800567a:	4619      	mov	r1, r3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff fe2f 	bl	80052e0 <HAL_UARTEx_RxEventCallback>
 8005682:	e002      	b.n	800568a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fc fd31 	bl	80020ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e002      	b.n	8005694 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	e000      	b.n	8005694 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005692:	2302      	movs	r3, #2
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	431a      	orrs	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80056d6:	f023 030c 	bic.w	r3, r3, #12
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6812      	ldr	r2, [r2, #0]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	430b      	orrs	r3, r1
 80056e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2c      	ldr	r2, [pc, #176]	; (80057b0 <UART_SetConfig+0x114>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d103      	bne.n	800570c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005704:	f7fe fd76 	bl	80041f4 <HAL_RCC_GetPCLK2Freq>
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	e002      	b.n	8005712 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fe fd5e 	bl	80041cc <HAL_RCC_GetPCLK1Freq>
 8005710:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	009a      	lsls	r2, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <UART_SetConfig+0x118>)
 800572a:	fba2 2303 	umull	r2, r3, r2, r3
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	0119      	lsls	r1, r3, #4
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009a      	lsls	r2, r3, #2
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	fbb2 f2f3 	udiv	r2, r2, r3
 8005748:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <UART_SetConfig+0x118>)
 800574a:	fba3 0302 	umull	r0, r3, r3, r2
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2064      	movs	r0, #100	; 0x64
 8005752:	fb00 f303 	mul.w	r3, r0, r3
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	3332      	adds	r3, #50	; 0x32
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <UART_SetConfig+0x118>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005768:	4419      	add	r1, r3
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	009a      	lsls	r2, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <UART_SetConfig+0x118>)
 8005782:	fba3 0302 	umull	r0, r3, r3, r2
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	2064      	movs	r0, #100	; 0x64
 800578a:	fb00 f303 	mul.w	r3, r0, r3
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	3332      	adds	r3, #50	; 0x32
 8005794:	4a07      	ldr	r2, [pc, #28]	; (80057b4 <UART_SetConfig+0x118>)
 8005796:	fba2 2303 	umull	r2, r3, r2, r3
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	f003 020f 	and.w	r2, r3, #15
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	440a      	add	r2, r1
 80057a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40013800 	.word	0x40013800
 80057b4:	51eb851f 	.word	0x51eb851f

080057b8 <__errno>:
 80057b8:	4b01      	ldr	r3, [pc, #4]	; (80057c0 <__errno+0x8>)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	2000000c 	.word	0x2000000c

080057c4 <__libc_init_array>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	2600      	movs	r6, #0
 80057c8:	4d0c      	ldr	r5, [pc, #48]	; (80057fc <__libc_init_array+0x38>)
 80057ca:	4c0d      	ldr	r4, [pc, #52]	; (8005800 <__libc_init_array+0x3c>)
 80057cc:	1b64      	subs	r4, r4, r5
 80057ce:	10a4      	asrs	r4, r4, #2
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d109      	bne.n	80057e8 <__libc_init_array+0x24>
 80057d4:	f004 fc52 	bl	800a07c <_init>
 80057d8:	2600      	movs	r6, #0
 80057da:	4d0a      	ldr	r5, [pc, #40]	; (8005804 <__libc_init_array+0x40>)
 80057dc:	4c0a      	ldr	r4, [pc, #40]	; (8005808 <__libc_init_array+0x44>)
 80057de:	1b64      	subs	r4, r4, r5
 80057e0:	10a4      	asrs	r4, r4, #2
 80057e2:	42a6      	cmp	r6, r4
 80057e4:	d105      	bne.n	80057f2 <__libc_init_array+0x2e>
 80057e6:	bd70      	pop	{r4, r5, r6, pc}
 80057e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ec:	4798      	blx	r3
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7ee      	b.n	80057d0 <__libc_init_array+0xc>
 80057f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f6:	4798      	blx	r3
 80057f8:	3601      	adds	r6, #1
 80057fa:	e7f2      	b.n	80057e2 <__libc_init_array+0x1e>
 80057fc:	0800a7e4 	.word	0x0800a7e4
 8005800:	0800a7e4 	.word	0x0800a7e4
 8005804:	0800a7e4 	.word	0x0800a7e4
 8005808:	0800a7e8 	.word	0x0800a7e8

0800580c <memset>:
 800580c:	4603      	mov	r3, r0
 800580e:	4402      	add	r2, r0
 8005810:	4293      	cmp	r3, r2
 8005812:	d100      	bne.n	8005816 <memset+0xa>
 8005814:	4770      	bx	lr
 8005816:	f803 1b01 	strb.w	r1, [r3], #1
 800581a:	e7f9      	b.n	8005810 <memset+0x4>

0800581c <__cvt>:
 800581c:	2b00      	cmp	r3, #0
 800581e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005822:	461f      	mov	r7, r3
 8005824:	bfbb      	ittet	lt
 8005826:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800582a:	461f      	movlt	r7, r3
 800582c:	2300      	movge	r3, #0
 800582e:	232d      	movlt	r3, #45	; 0x2d
 8005830:	b088      	sub	sp, #32
 8005832:	4614      	mov	r4, r2
 8005834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005836:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005838:	7013      	strb	r3, [r2, #0]
 800583a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800583c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005840:	f023 0820 	bic.w	r8, r3, #32
 8005844:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005848:	d005      	beq.n	8005856 <__cvt+0x3a>
 800584a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800584e:	d100      	bne.n	8005852 <__cvt+0x36>
 8005850:	3501      	adds	r5, #1
 8005852:	2302      	movs	r3, #2
 8005854:	e000      	b.n	8005858 <__cvt+0x3c>
 8005856:	2303      	movs	r3, #3
 8005858:	aa07      	add	r2, sp, #28
 800585a:	9204      	str	r2, [sp, #16]
 800585c:	aa06      	add	r2, sp, #24
 800585e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005862:	e9cd 3500 	strd	r3, r5, [sp]
 8005866:	4622      	mov	r2, r4
 8005868:	463b      	mov	r3, r7
 800586a:	f001 fd85 	bl	8007378 <_dtoa_r>
 800586e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005872:	4606      	mov	r6, r0
 8005874:	d102      	bne.n	800587c <__cvt+0x60>
 8005876:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005878:	07db      	lsls	r3, r3, #31
 800587a:	d522      	bpl.n	80058c2 <__cvt+0xa6>
 800587c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005880:	eb06 0905 	add.w	r9, r6, r5
 8005884:	d110      	bne.n	80058a8 <__cvt+0x8c>
 8005886:	7833      	ldrb	r3, [r6, #0]
 8005888:	2b30      	cmp	r3, #48	; 0x30
 800588a:	d10a      	bne.n	80058a2 <__cvt+0x86>
 800588c:	2200      	movs	r2, #0
 800588e:	2300      	movs	r3, #0
 8005890:	4620      	mov	r0, r4
 8005892:	4639      	mov	r1, r7
 8005894:	f7fb f888 	bl	80009a8 <__aeabi_dcmpeq>
 8005898:	b918      	cbnz	r0, 80058a2 <__cvt+0x86>
 800589a:	f1c5 0501 	rsb	r5, r5, #1
 800589e:	f8ca 5000 	str.w	r5, [sl]
 80058a2:	f8da 3000 	ldr.w	r3, [sl]
 80058a6:	4499      	add	r9, r3
 80058a8:	2200      	movs	r2, #0
 80058aa:	2300      	movs	r3, #0
 80058ac:	4620      	mov	r0, r4
 80058ae:	4639      	mov	r1, r7
 80058b0:	f7fb f87a 	bl	80009a8 <__aeabi_dcmpeq>
 80058b4:	b108      	cbz	r0, 80058ba <__cvt+0x9e>
 80058b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80058ba:	2230      	movs	r2, #48	; 0x30
 80058bc:	9b07      	ldr	r3, [sp, #28]
 80058be:	454b      	cmp	r3, r9
 80058c0:	d307      	bcc.n	80058d2 <__cvt+0xb6>
 80058c2:	4630      	mov	r0, r6
 80058c4:	9b07      	ldr	r3, [sp, #28]
 80058c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80058c8:	1b9b      	subs	r3, r3, r6
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	b008      	add	sp, #32
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	9107      	str	r1, [sp, #28]
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e7f0      	b.n	80058bc <__cvt+0xa0>

080058da <__exponent>:
 80058da:	4603      	mov	r3, r0
 80058dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058de:	2900      	cmp	r1, #0
 80058e0:	f803 2b02 	strb.w	r2, [r3], #2
 80058e4:	bfb6      	itet	lt
 80058e6:	222d      	movlt	r2, #45	; 0x2d
 80058e8:	222b      	movge	r2, #43	; 0x2b
 80058ea:	4249      	neglt	r1, r1
 80058ec:	2909      	cmp	r1, #9
 80058ee:	7042      	strb	r2, [r0, #1]
 80058f0:	dd2b      	ble.n	800594a <__exponent+0x70>
 80058f2:	f10d 0407 	add.w	r4, sp, #7
 80058f6:	46a4      	mov	ip, r4
 80058f8:	270a      	movs	r7, #10
 80058fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80058fe:	460a      	mov	r2, r1
 8005900:	46a6      	mov	lr, r4
 8005902:	fb07 1516 	mls	r5, r7, r6, r1
 8005906:	2a63      	cmp	r2, #99	; 0x63
 8005908:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800590c:	4631      	mov	r1, r6
 800590e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005912:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005916:	dcf0      	bgt.n	80058fa <__exponent+0x20>
 8005918:	3130      	adds	r1, #48	; 0x30
 800591a:	f1ae 0502 	sub.w	r5, lr, #2
 800591e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005922:	4629      	mov	r1, r5
 8005924:	1c44      	adds	r4, r0, #1
 8005926:	4561      	cmp	r1, ip
 8005928:	d30a      	bcc.n	8005940 <__exponent+0x66>
 800592a:	f10d 0209 	add.w	r2, sp, #9
 800592e:	eba2 020e 	sub.w	r2, r2, lr
 8005932:	4565      	cmp	r5, ip
 8005934:	bf88      	it	hi
 8005936:	2200      	movhi	r2, #0
 8005938:	4413      	add	r3, r2
 800593a:	1a18      	subs	r0, r3, r0
 800593c:	b003      	add	sp, #12
 800593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005940:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005944:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005948:	e7ed      	b.n	8005926 <__exponent+0x4c>
 800594a:	2330      	movs	r3, #48	; 0x30
 800594c:	3130      	adds	r1, #48	; 0x30
 800594e:	7083      	strb	r3, [r0, #2]
 8005950:	70c1      	strb	r1, [r0, #3]
 8005952:	1d03      	adds	r3, r0, #4
 8005954:	e7f1      	b.n	800593a <__exponent+0x60>
	...

08005958 <_printf_float>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	b091      	sub	sp, #68	; 0x44
 800595e:	460c      	mov	r4, r1
 8005960:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005964:	4616      	mov	r6, r2
 8005966:	461f      	mov	r7, r3
 8005968:	4605      	mov	r5, r0
 800596a:	f002 fe59 	bl	8008620 <_localeconv_r>
 800596e:	6803      	ldr	r3, [r0, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	9309      	str	r3, [sp, #36]	; 0x24
 8005974:	f7fa fbec 	bl	8000150 <strlen>
 8005978:	2300      	movs	r3, #0
 800597a:	930e      	str	r3, [sp, #56]	; 0x38
 800597c:	f8d8 3000 	ldr.w	r3, [r8]
 8005980:	900a      	str	r0, [sp, #40]	; 0x28
 8005982:	3307      	adds	r3, #7
 8005984:	f023 0307 	bic.w	r3, r3, #7
 8005988:	f103 0208 	add.w	r2, r3, #8
 800598c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005990:	f8d4 b000 	ldr.w	fp, [r4]
 8005994:	f8c8 2000 	str.w	r2, [r8]
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059a0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80059a4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80059a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80059aa:	f04f 32ff 	mov.w	r2, #4294967295
 80059ae:	4640      	mov	r0, r8
 80059b0:	4b9c      	ldr	r3, [pc, #624]	; (8005c24 <_printf_float+0x2cc>)
 80059b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059b4:	f7fb f82a 	bl	8000a0c <__aeabi_dcmpun>
 80059b8:	bb70      	cbnz	r0, 8005a18 <_printf_float+0xc0>
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295
 80059be:	4640      	mov	r0, r8
 80059c0:	4b98      	ldr	r3, [pc, #608]	; (8005c24 <_printf_float+0x2cc>)
 80059c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059c4:	f7fb f804 	bl	80009d0 <__aeabi_dcmple>
 80059c8:	bb30      	cbnz	r0, 8005a18 <_printf_float+0xc0>
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	4640      	mov	r0, r8
 80059d0:	4651      	mov	r1, sl
 80059d2:	f7fa fff3 	bl	80009bc <__aeabi_dcmplt>
 80059d6:	b110      	cbz	r0, 80059de <_printf_float+0x86>
 80059d8:	232d      	movs	r3, #45	; 0x2d
 80059da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059de:	4b92      	ldr	r3, [pc, #584]	; (8005c28 <_printf_float+0x2d0>)
 80059e0:	4892      	ldr	r0, [pc, #584]	; (8005c2c <_printf_float+0x2d4>)
 80059e2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80059e6:	bf94      	ite	ls
 80059e8:	4698      	movls	r8, r3
 80059ea:	4680      	movhi	r8, r0
 80059ec:	2303      	movs	r3, #3
 80059ee:	f04f 0a00 	mov.w	sl, #0
 80059f2:	6123      	str	r3, [r4, #16]
 80059f4:	f02b 0304 	bic.w	r3, fp, #4
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	4633      	mov	r3, r6
 80059fc:	4621      	mov	r1, r4
 80059fe:	4628      	mov	r0, r5
 8005a00:	9700      	str	r7, [sp, #0]
 8005a02:	aa0f      	add	r2, sp, #60	; 0x3c
 8005a04:	f000 f9d4 	bl	8005db0 <_printf_common>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	f040 8090 	bne.w	8005b2e <_printf_float+0x1d6>
 8005a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a12:	b011      	add	sp, #68	; 0x44
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	4642      	mov	r2, r8
 8005a1a:	4653      	mov	r3, sl
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4651      	mov	r1, sl
 8005a20:	f7fa fff4 	bl	8000a0c <__aeabi_dcmpun>
 8005a24:	b148      	cbz	r0, 8005a3a <_printf_float+0xe2>
 8005a26:	f1ba 0f00 	cmp.w	sl, #0
 8005a2a:	bfb8      	it	lt
 8005a2c:	232d      	movlt	r3, #45	; 0x2d
 8005a2e:	4880      	ldr	r0, [pc, #512]	; (8005c30 <_printf_float+0x2d8>)
 8005a30:	bfb8      	it	lt
 8005a32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a36:	4b7f      	ldr	r3, [pc, #508]	; (8005c34 <_printf_float+0x2dc>)
 8005a38:	e7d3      	b.n	80059e2 <_printf_float+0x8a>
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	d142      	bne.n	8005aca <_printf_float+0x172>
 8005a44:	2306      	movs	r3, #6
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	9206      	str	r2, [sp, #24]
 8005a4c:	aa0e      	add	r2, sp, #56	; 0x38
 8005a4e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005a52:	aa0d      	add	r2, sp, #52	; 0x34
 8005a54:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005a5e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a62:	6023      	str	r3, [r4, #0]
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	4642      	mov	r2, r8
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	4653      	mov	r3, sl
 8005a6e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005a70:	f7ff fed4 	bl	800581c <__cvt>
 8005a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a76:	4680      	mov	r8, r0
 8005a78:	2947      	cmp	r1, #71	; 0x47
 8005a7a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a7c:	d108      	bne.n	8005a90 <_printf_float+0x138>
 8005a7e:	1cc8      	adds	r0, r1, #3
 8005a80:	db02      	blt.n	8005a88 <_printf_float+0x130>
 8005a82:	6863      	ldr	r3, [r4, #4]
 8005a84:	4299      	cmp	r1, r3
 8005a86:	dd40      	ble.n	8005b0a <_printf_float+0x1b2>
 8005a88:	f1a9 0902 	sub.w	r9, r9, #2
 8005a8c:	fa5f f989 	uxtb.w	r9, r9
 8005a90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a94:	d81f      	bhi.n	8005ad6 <_printf_float+0x17e>
 8005a96:	464a      	mov	r2, r9
 8005a98:	3901      	subs	r1, #1
 8005a9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a9e:	910d      	str	r1, [sp, #52]	; 0x34
 8005aa0:	f7ff ff1b 	bl	80058da <__exponent>
 8005aa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aa6:	4682      	mov	sl, r0
 8005aa8:	1813      	adds	r3, r2, r0
 8005aaa:	2a01      	cmp	r2, #1
 8005aac:	6123      	str	r3, [r4, #16]
 8005aae:	dc02      	bgt.n	8005ab6 <_printf_float+0x15e>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	07d2      	lsls	r2, r2, #31
 8005ab4:	d501      	bpl.n	8005aba <_printf_float+0x162>
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d09b      	beq.n	80059fa <_printf_float+0xa2>
 8005ac2:	232d      	movs	r3, #45	; 0x2d
 8005ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac8:	e797      	b.n	80059fa <_printf_float+0xa2>
 8005aca:	2947      	cmp	r1, #71	; 0x47
 8005acc:	d1bc      	bne.n	8005a48 <_printf_float+0xf0>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1ba      	bne.n	8005a48 <_printf_float+0xf0>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e7b7      	b.n	8005a46 <_printf_float+0xee>
 8005ad6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005ada:	d118      	bne.n	8005b0e <_printf_float+0x1b6>
 8005adc:	2900      	cmp	r1, #0
 8005ade:	6863      	ldr	r3, [r4, #4]
 8005ae0:	dd0b      	ble.n	8005afa <_printf_float+0x1a2>
 8005ae2:	6121      	str	r1, [r4, #16]
 8005ae4:	b913      	cbnz	r3, 8005aec <_printf_float+0x194>
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	07d0      	lsls	r0, r2, #31
 8005aea:	d502      	bpl.n	8005af2 <_printf_float+0x19a>
 8005aec:	3301      	adds	r3, #1
 8005aee:	440b      	add	r3, r1
 8005af0:	6123      	str	r3, [r4, #16]
 8005af2:	f04f 0a00 	mov.w	sl, #0
 8005af6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005af8:	e7df      	b.n	8005aba <_printf_float+0x162>
 8005afa:	b913      	cbnz	r3, 8005b02 <_printf_float+0x1aa>
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	07d2      	lsls	r2, r2, #31
 8005b00:	d501      	bpl.n	8005b06 <_printf_float+0x1ae>
 8005b02:	3302      	adds	r3, #2
 8005b04:	e7f4      	b.n	8005af0 <_printf_float+0x198>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e7f2      	b.n	8005af0 <_printf_float+0x198>
 8005b0a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b10:	4299      	cmp	r1, r3
 8005b12:	db05      	blt.n	8005b20 <_printf_float+0x1c8>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	6121      	str	r1, [r4, #16]
 8005b18:	07d8      	lsls	r0, r3, #31
 8005b1a:	d5ea      	bpl.n	8005af2 <_printf_float+0x19a>
 8005b1c:	1c4b      	adds	r3, r1, #1
 8005b1e:	e7e7      	b.n	8005af0 <_printf_float+0x198>
 8005b20:	2900      	cmp	r1, #0
 8005b22:	bfcc      	ite	gt
 8005b24:	2201      	movgt	r2, #1
 8005b26:	f1c1 0202 	rsble	r2, r1, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	e7e0      	b.n	8005af0 <_printf_float+0x198>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	055a      	lsls	r2, r3, #21
 8005b32:	d407      	bmi.n	8005b44 <_printf_float+0x1ec>
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	4642      	mov	r2, r8
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d12b      	bne.n	8005b9a <_printf_float+0x242>
 8005b42:	e764      	b.n	8005a0e <_printf_float+0xb6>
 8005b44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b48:	f240 80dd 	bls.w	8005d06 <_printf_float+0x3ae>
 8005b4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b50:	2200      	movs	r2, #0
 8005b52:	2300      	movs	r3, #0
 8005b54:	f7fa ff28 	bl	80009a8 <__aeabi_dcmpeq>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d033      	beq.n	8005bc4 <_printf_float+0x26c>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	4631      	mov	r1, r6
 8005b60:	4628      	mov	r0, r5
 8005b62:	4a35      	ldr	r2, [pc, #212]	; (8005c38 <_printf_float+0x2e0>)
 8005b64:	47b8      	blx	r7
 8005b66:	3001      	adds	r0, #1
 8005b68:	f43f af51 	beq.w	8005a0e <_printf_float+0xb6>
 8005b6c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b70:	429a      	cmp	r2, r3
 8005b72:	db02      	blt.n	8005b7a <_printf_float+0x222>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	07d8      	lsls	r0, r3, #31
 8005b78:	d50f      	bpl.n	8005b9a <_printf_float+0x242>
 8005b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	f43f af42 	beq.w	8005a0e <_printf_float+0xb6>
 8005b8a:	f04f 0800 	mov.w	r8, #0
 8005b8e:	f104 091a 	add.w	r9, r4, #26
 8005b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b94:	3b01      	subs	r3, #1
 8005b96:	4543      	cmp	r3, r8
 8005b98:	dc09      	bgt.n	8005bae <_printf_float+0x256>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	079b      	lsls	r3, r3, #30
 8005b9e:	f100 8102 	bmi.w	8005da6 <_printf_float+0x44e>
 8005ba2:	68e0      	ldr	r0, [r4, #12]
 8005ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ba6:	4298      	cmp	r0, r3
 8005ba8:	bfb8      	it	lt
 8005baa:	4618      	movlt	r0, r3
 8005bac:	e731      	b.n	8005a12 <_printf_float+0xba>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	464a      	mov	r2, r9
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b8      	blx	r7
 8005bb8:	3001      	adds	r0, #1
 8005bba:	f43f af28 	beq.w	8005a0e <_printf_float+0xb6>
 8005bbe:	f108 0801 	add.w	r8, r8, #1
 8005bc2:	e7e6      	b.n	8005b92 <_printf_float+0x23a>
 8005bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dc38      	bgt.n	8005c3c <_printf_float+0x2e4>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	4a19      	ldr	r2, [pc, #100]	; (8005c38 <_printf_float+0x2e0>)
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f43f af1a 	beq.w	8005a0e <_printf_float+0xb6>
 8005bda:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d102      	bne.n	8005be8 <_printf_float+0x290>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	07d9      	lsls	r1, r3, #31
 8005be6:	d5d8      	bpl.n	8005b9a <_printf_float+0x242>
 8005be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f af0b 	beq.w	8005a0e <_printf_float+0xb6>
 8005bf8:	f04f 0900 	mov.w	r9, #0
 8005bfc:	f104 0a1a 	add.w	sl, r4, #26
 8005c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c02:	425b      	negs	r3, r3
 8005c04:	454b      	cmp	r3, r9
 8005c06:	dc01      	bgt.n	8005c0c <_printf_float+0x2b4>
 8005c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c0a:	e794      	b.n	8005b36 <_printf_float+0x1de>
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	4652      	mov	r2, sl
 8005c10:	4631      	mov	r1, r6
 8005c12:	4628      	mov	r0, r5
 8005c14:	47b8      	blx	r7
 8005c16:	3001      	adds	r0, #1
 8005c18:	f43f aef9 	beq.w	8005a0e <_printf_float+0xb6>
 8005c1c:	f109 0901 	add.w	r9, r9, #1
 8005c20:	e7ee      	b.n	8005c00 <_printf_float+0x2a8>
 8005c22:	bf00      	nop
 8005c24:	7fefffff 	.word	0x7fefffff
 8005c28:	0800a344 	.word	0x0800a344
 8005c2c:	0800a348 	.word	0x0800a348
 8005c30:	0800a350 	.word	0x0800a350
 8005c34:	0800a34c 	.word	0x0800a34c
 8005c38:	0800a354 	.word	0x0800a354
 8005c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c40:	429a      	cmp	r2, r3
 8005c42:	bfa8      	it	ge
 8005c44:	461a      	movge	r2, r3
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	4691      	mov	r9, r2
 8005c4a:	dc37      	bgt.n	8005cbc <_printf_float+0x364>
 8005c4c:	f04f 0b00 	mov.w	fp, #0
 8005c50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c54:	f104 021a 	add.w	r2, r4, #26
 8005c58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005c5c:	ebaa 0309 	sub.w	r3, sl, r9
 8005c60:	455b      	cmp	r3, fp
 8005c62:	dc33      	bgt.n	8005ccc <_printf_float+0x374>
 8005c64:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	db3b      	blt.n	8005ce4 <_printf_float+0x38c>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	07da      	lsls	r2, r3, #31
 8005c70:	d438      	bmi.n	8005ce4 <_printf_float+0x38c>
 8005c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c76:	eba3 020a 	sub.w	r2, r3, sl
 8005c7a:	eba3 0901 	sub.w	r9, r3, r1
 8005c7e:	4591      	cmp	r9, r2
 8005c80:	bfa8      	it	ge
 8005c82:	4691      	movge	r9, r2
 8005c84:	f1b9 0f00 	cmp.w	r9, #0
 8005c88:	dc34      	bgt.n	8005cf4 <_printf_float+0x39c>
 8005c8a:	f04f 0800 	mov.w	r8, #0
 8005c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c92:	f104 0a1a 	add.w	sl, r4, #26
 8005c96:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	eba3 0309 	sub.w	r3, r3, r9
 8005ca0:	4543      	cmp	r3, r8
 8005ca2:	f77f af7a 	ble.w	8005b9a <_printf_float+0x242>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	4652      	mov	r2, sl
 8005caa:	4631      	mov	r1, r6
 8005cac:	4628      	mov	r0, r5
 8005cae:	47b8      	blx	r7
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	f43f aeac 	beq.w	8005a0e <_printf_float+0xb6>
 8005cb6:	f108 0801 	add.w	r8, r8, #1
 8005cba:	e7ec      	b.n	8005c96 <_printf_float+0x33e>
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	4631      	mov	r1, r6
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d1c0      	bne.n	8005c4c <_printf_float+0x2f4>
 8005cca:	e6a0      	b.n	8005a0e <_printf_float+0xb6>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f43f ae99 	beq.w	8005a0e <_printf_float+0xb6>
 8005cdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cde:	f10b 0b01 	add.w	fp, fp, #1
 8005ce2:	e7b9      	b.n	8005c58 <_printf_float+0x300>
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d1bf      	bne.n	8005c72 <_printf_float+0x31a>
 8005cf2:	e68c      	b.n	8005a0e <_printf_float+0xb6>
 8005cf4:	464b      	mov	r3, r9
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	eb08 020a 	add.w	r2, r8, sl
 8005cfe:	47b8      	blx	r7
 8005d00:	3001      	adds	r0, #1
 8005d02:	d1c2      	bne.n	8005c8a <_printf_float+0x332>
 8005d04:	e683      	b.n	8005a0e <_printf_float+0xb6>
 8005d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d08:	2a01      	cmp	r2, #1
 8005d0a:	dc01      	bgt.n	8005d10 <_printf_float+0x3b8>
 8005d0c:	07db      	lsls	r3, r3, #31
 8005d0e:	d537      	bpl.n	8005d80 <_printf_float+0x428>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4642      	mov	r2, r8
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f43f ae77 	beq.w	8005a0e <_printf_float+0xb6>
 8005d20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f ae6f 	beq.w	8005a0e <_printf_float+0xb6>
 8005d30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d34:	2200      	movs	r2, #0
 8005d36:	2300      	movs	r3, #0
 8005d38:	f7fa fe36 	bl	80009a8 <__aeabi_dcmpeq>
 8005d3c:	b9d8      	cbnz	r0, 8005d76 <_printf_float+0x41e>
 8005d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d40:	f108 0201 	add.w	r2, r8, #1
 8005d44:	3b01      	subs	r3, #1
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d10e      	bne.n	8005d6e <_printf_float+0x416>
 8005d50:	e65d      	b.n	8005a0e <_printf_float+0xb6>
 8005d52:	2301      	movs	r3, #1
 8005d54:	464a      	mov	r2, r9
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	f43f ae56 	beq.w	8005a0e <_printf_float+0xb6>
 8005d62:	f108 0801 	add.w	r8, r8, #1
 8005d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	4543      	cmp	r3, r8
 8005d6c:	dcf1      	bgt.n	8005d52 <_printf_float+0x3fa>
 8005d6e:	4653      	mov	r3, sl
 8005d70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d74:	e6e0      	b.n	8005b38 <_printf_float+0x1e0>
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	f104 091a 	add.w	r9, r4, #26
 8005d7e:	e7f2      	b.n	8005d66 <_printf_float+0x40e>
 8005d80:	2301      	movs	r3, #1
 8005d82:	4642      	mov	r2, r8
 8005d84:	e7df      	b.n	8005d46 <_printf_float+0x3ee>
 8005d86:	2301      	movs	r3, #1
 8005d88:	464a      	mov	r2, r9
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f ae3c 	beq.w	8005a0e <_printf_float+0xb6>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005d9e:	1a5b      	subs	r3, r3, r1
 8005da0:	4543      	cmp	r3, r8
 8005da2:	dcf0      	bgt.n	8005d86 <_printf_float+0x42e>
 8005da4:	e6fd      	b.n	8005ba2 <_printf_float+0x24a>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	f104 0919 	add.w	r9, r4, #25
 8005dae:	e7f4      	b.n	8005d9a <_printf_float+0x442>

08005db0 <_printf_common>:
 8005db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	4616      	mov	r6, r2
 8005db6:	4699      	mov	r9, r3
 8005db8:	688a      	ldr	r2, [r1, #8]
 8005dba:	690b      	ldr	r3, [r1, #16]
 8005dbc:	4607      	mov	r7, r0
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	bfb8      	it	lt
 8005dc2:	4613      	movlt	r3, r2
 8005dc4:	6033      	str	r3, [r6, #0]
 8005dc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dd0:	b10a      	cbz	r2, 8005dd6 <_printf_common+0x26>
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	6033      	str	r3, [r6, #0]
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	0699      	lsls	r1, r3, #26
 8005dda:	bf42      	ittt	mi
 8005ddc:	6833      	ldrmi	r3, [r6, #0]
 8005dde:	3302      	addmi	r3, #2
 8005de0:	6033      	strmi	r3, [r6, #0]
 8005de2:	6825      	ldr	r5, [r4, #0]
 8005de4:	f015 0506 	ands.w	r5, r5, #6
 8005de8:	d106      	bne.n	8005df8 <_printf_common+0x48>
 8005dea:	f104 0a19 	add.w	sl, r4, #25
 8005dee:	68e3      	ldr	r3, [r4, #12]
 8005df0:	6832      	ldr	r2, [r6, #0]
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	42ab      	cmp	r3, r5
 8005df6:	dc28      	bgt.n	8005e4a <_printf_common+0x9a>
 8005df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dfc:	1e13      	subs	r3, r2, #0
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	bf18      	it	ne
 8005e02:	2301      	movne	r3, #1
 8005e04:	0692      	lsls	r2, r2, #26
 8005e06:	d42d      	bmi.n	8005e64 <_printf_common+0xb4>
 8005e08:	4649      	mov	r1, r9
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e10:	47c0      	blx	r8
 8005e12:	3001      	adds	r0, #1
 8005e14:	d020      	beq.n	8005e58 <_printf_common+0xa8>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	68e5      	ldr	r5, [r4, #12]
 8005e1a:	f003 0306 	and.w	r3, r3, #6
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	bf18      	it	ne
 8005e22:	2500      	movne	r5, #0
 8005e24:	6832      	ldr	r2, [r6, #0]
 8005e26:	f04f 0600 	mov.w	r6, #0
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	bf08      	it	eq
 8005e2e:	1aad      	subeq	r5, r5, r2
 8005e30:	6922      	ldr	r2, [r4, #16]
 8005e32:	bf08      	it	eq
 8005e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	bfc4      	itt	gt
 8005e3c:	1a9b      	subgt	r3, r3, r2
 8005e3e:	18ed      	addgt	r5, r5, r3
 8005e40:	341a      	adds	r4, #26
 8005e42:	42b5      	cmp	r5, r6
 8005e44:	d11a      	bne.n	8005e7c <_printf_common+0xcc>
 8005e46:	2000      	movs	r0, #0
 8005e48:	e008      	b.n	8005e5c <_printf_common+0xac>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4652      	mov	r2, sl
 8005e4e:	4649      	mov	r1, r9
 8005e50:	4638      	mov	r0, r7
 8005e52:	47c0      	blx	r8
 8005e54:	3001      	adds	r0, #1
 8005e56:	d103      	bne.n	8005e60 <_printf_common+0xb0>
 8005e58:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e60:	3501      	adds	r5, #1
 8005e62:	e7c4      	b.n	8005dee <_printf_common+0x3e>
 8005e64:	2030      	movs	r0, #48	; 0x30
 8005e66:	18e1      	adds	r1, r4, r3
 8005e68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e72:	4422      	add	r2, r4
 8005e74:	3302      	adds	r3, #2
 8005e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e7a:	e7c5      	b.n	8005e08 <_printf_common+0x58>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4622      	mov	r2, r4
 8005e80:	4649      	mov	r1, r9
 8005e82:	4638      	mov	r0, r7
 8005e84:	47c0      	blx	r8
 8005e86:	3001      	adds	r0, #1
 8005e88:	d0e6      	beq.n	8005e58 <_printf_common+0xa8>
 8005e8a:	3601      	adds	r6, #1
 8005e8c:	e7d9      	b.n	8005e42 <_printf_common+0x92>
	...

08005e90 <_printf_i>:
 8005e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	7e0f      	ldrb	r7, [r1, #24]
 8005e96:	4691      	mov	r9, r2
 8005e98:	2f78      	cmp	r7, #120	; 0x78
 8005e9a:	4680      	mov	r8, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	469a      	mov	sl, r3
 8005ea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ea6:	d807      	bhi.n	8005eb8 <_printf_i+0x28>
 8005ea8:	2f62      	cmp	r7, #98	; 0x62
 8005eaa:	d80a      	bhi.n	8005ec2 <_printf_i+0x32>
 8005eac:	2f00      	cmp	r7, #0
 8005eae:	f000 80d9 	beq.w	8006064 <_printf_i+0x1d4>
 8005eb2:	2f58      	cmp	r7, #88	; 0x58
 8005eb4:	f000 80a4 	beq.w	8006000 <_printf_i+0x170>
 8005eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ec0:	e03a      	b.n	8005f38 <_printf_i+0xa8>
 8005ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ec6:	2b15      	cmp	r3, #21
 8005ec8:	d8f6      	bhi.n	8005eb8 <_printf_i+0x28>
 8005eca:	a101      	add	r1, pc, #4	; (adr r1, 8005ed0 <_printf_i+0x40>)
 8005ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ed0:	08005f29 	.word	0x08005f29
 8005ed4:	08005f3d 	.word	0x08005f3d
 8005ed8:	08005eb9 	.word	0x08005eb9
 8005edc:	08005eb9 	.word	0x08005eb9
 8005ee0:	08005eb9 	.word	0x08005eb9
 8005ee4:	08005eb9 	.word	0x08005eb9
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005eb9 	.word	0x08005eb9
 8005ef0:	08005eb9 	.word	0x08005eb9
 8005ef4:	08005eb9 	.word	0x08005eb9
 8005ef8:	08005eb9 	.word	0x08005eb9
 8005efc:	0800604b 	.word	0x0800604b
 8005f00:	08005f6d 	.word	0x08005f6d
 8005f04:	0800602d 	.word	0x0800602d
 8005f08:	08005eb9 	.word	0x08005eb9
 8005f0c:	08005eb9 	.word	0x08005eb9
 8005f10:	0800606d 	.word	0x0800606d
 8005f14:	08005eb9 	.word	0x08005eb9
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	08005eb9 	.word	0x08005eb9
 8005f20:	08005eb9 	.word	0x08005eb9
 8005f24:	08006035 	.word	0x08006035
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	602a      	str	r2, [r5, #0]
 8005f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0a4      	b.n	8006086 <_printf_i+0x1f6>
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	6829      	ldr	r1, [r5, #0]
 8005f40:	0606      	lsls	r6, r0, #24
 8005f42:	f101 0304 	add.w	r3, r1, #4
 8005f46:	d50a      	bpl.n	8005f5e <_printf_i+0xce>
 8005f48:	680e      	ldr	r6, [r1, #0]
 8005f4a:	602b      	str	r3, [r5, #0]
 8005f4c:	2e00      	cmp	r6, #0
 8005f4e:	da03      	bge.n	8005f58 <_printf_i+0xc8>
 8005f50:	232d      	movs	r3, #45	; 0x2d
 8005f52:	4276      	negs	r6, r6
 8005f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f58:	230a      	movs	r3, #10
 8005f5a:	485e      	ldr	r0, [pc, #376]	; (80060d4 <_printf_i+0x244>)
 8005f5c:	e019      	b.n	8005f92 <_printf_i+0x102>
 8005f5e:	680e      	ldr	r6, [r1, #0]
 8005f60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f64:	602b      	str	r3, [r5, #0]
 8005f66:	bf18      	it	ne
 8005f68:	b236      	sxthne	r6, r6
 8005f6a:	e7ef      	b.n	8005f4c <_printf_i+0xbc>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	6820      	ldr	r0, [r4, #0]
 8005f70:	1d19      	adds	r1, r3, #4
 8005f72:	6029      	str	r1, [r5, #0]
 8005f74:	0601      	lsls	r1, r0, #24
 8005f76:	d501      	bpl.n	8005f7c <_printf_i+0xec>
 8005f78:	681e      	ldr	r6, [r3, #0]
 8005f7a:	e002      	b.n	8005f82 <_printf_i+0xf2>
 8005f7c:	0646      	lsls	r6, r0, #25
 8005f7e:	d5fb      	bpl.n	8005f78 <_printf_i+0xe8>
 8005f80:	881e      	ldrh	r6, [r3, #0]
 8005f82:	2f6f      	cmp	r7, #111	; 0x6f
 8005f84:	bf0c      	ite	eq
 8005f86:	2308      	moveq	r3, #8
 8005f88:	230a      	movne	r3, #10
 8005f8a:	4852      	ldr	r0, [pc, #328]	; (80060d4 <_printf_i+0x244>)
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f92:	6865      	ldr	r5, [r4, #4]
 8005f94:	2d00      	cmp	r5, #0
 8005f96:	bfa8      	it	ge
 8005f98:	6821      	ldrge	r1, [r4, #0]
 8005f9a:	60a5      	str	r5, [r4, #8]
 8005f9c:	bfa4      	itt	ge
 8005f9e:	f021 0104 	bicge.w	r1, r1, #4
 8005fa2:	6021      	strge	r1, [r4, #0]
 8005fa4:	b90e      	cbnz	r6, 8005faa <_printf_i+0x11a>
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	d04d      	beq.n	8006046 <_printf_i+0x1b6>
 8005faa:	4615      	mov	r5, r2
 8005fac:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fb0:	fb03 6711 	mls	r7, r3, r1, r6
 8005fb4:	5dc7      	ldrb	r7, [r0, r7]
 8005fb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fba:	4637      	mov	r7, r6
 8005fbc:	42bb      	cmp	r3, r7
 8005fbe:	460e      	mov	r6, r1
 8005fc0:	d9f4      	bls.n	8005fac <_printf_i+0x11c>
 8005fc2:	2b08      	cmp	r3, #8
 8005fc4:	d10b      	bne.n	8005fde <_printf_i+0x14e>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	07de      	lsls	r6, r3, #31
 8005fca:	d508      	bpl.n	8005fde <_printf_i+0x14e>
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	6861      	ldr	r1, [r4, #4]
 8005fd0:	4299      	cmp	r1, r3
 8005fd2:	bfde      	ittt	le
 8005fd4:	2330      	movle	r3, #48	; 0x30
 8005fd6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005fde:	1b52      	subs	r2, r2, r5
 8005fe0:	6122      	str	r2, [r4, #16]
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	f8cd a000 	str.w	sl, [sp]
 8005fec:	aa03      	add	r2, sp, #12
 8005fee:	f7ff fedf 	bl	8005db0 <_printf_common>
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d14c      	bne.n	8006090 <_printf_i+0x200>
 8005ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffa:	b004      	add	sp, #16
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	4834      	ldr	r0, [pc, #208]	; (80060d4 <_printf_i+0x244>)
 8006002:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006006:	6829      	ldr	r1, [r5, #0]
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	f851 6b04 	ldr.w	r6, [r1], #4
 800600e:	6029      	str	r1, [r5, #0]
 8006010:	061d      	lsls	r5, r3, #24
 8006012:	d514      	bpl.n	800603e <_printf_i+0x1ae>
 8006014:	07df      	lsls	r7, r3, #31
 8006016:	bf44      	itt	mi
 8006018:	f043 0320 	orrmi.w	r3, r3, #32
 800601c:	6023      	strmi	r3, [r4, #0]
 800601e:	b91e      	cbnz	r6, 8006028 <_printf_i+0x198>
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	f023 0320 	bic.w	r3, r3, #32
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	2310      	movs	r3, #16
 800602a:	e7af      	b.n	8005f8c <_printf_i+0xfc>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	f043 0320 	orr.w	r3, r3, #32
 8006032:	6023      	str	r3, [r4, #0]
 8006034:	2378      	movs	r3, #120	; 0x78
 8006036:	4828      	ldr	r0, [pc, #160]	; (80060d8 <_printf_i+0x248>)
 8006038:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800603c:	e7e3      	b.n	8006006 <_printf_i+0x176>
 800603e:	0659      	lsls	r1, r3, #25
 8006040:	bf48      	it	mi
 8006042:	b2b6      	uxthmi	r6, r6
 8006044:	e7e6      	b.n	8006014 <_printf_i+0x184>
 8006046:	4615      	mov	r5, r2
 8006048:	e7bb      	b.n	8005fc2 <_printf_i+0x132>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	6826      	ldr	r6, [r4, #0]
 800604e:	1d18      	adds	r0, r3, #4
 8006050:	6961      	ldr	r1, [r4, #20]
 8006052:	6028      	str	r0, [r5, #0]
 8006054:	0635      	lsls	r5, r6, #24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	d501      	bpl.n	800605e <_printf_i+0x1ce>
 800605a:	6019      	str	r1, [r3, #0]
 800605c:	e002      	b.n	8006064 <_printf_i+0x1d4>
 800605e:	0670      	lsls	r0, r6, #25
 8006060:	d5fb      	bpl.n	800605a <_printf_i+0x1ca>
 8006062:	8019      	strh	r1, [r3, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	4615      	mov	r5, r2
 8006068:	6123      	str	r3, [r4, #16]
 800606a:	e7ba      	b.n	8005fe2 <_printf_i+0x152>
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	2100      	movs	r1, #0
 8006070:	1d1a      	adds	r2, r3, #4
 8006072:	602a      	str	r2, [r5, #0]
 8006074:	681d      	ldr	r5, [r3, #0]
 8006076:	6862      	ldr	r2, [r4, #4]
 8006078:	4628      	mov	r0, r5
 800607a:	f002 faef 	bl	800865c <memchr>
 800607e:	b108      	cbz	r0, 8006084 <_printf_i+0x1f4>
 8006080:	1b40      	subs	r0, r0, r5
 8006082:	6060      	str	r0, [r4, #4]
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	2300      	movs	r3, #0
 800608a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800608e:	e7a8      	b.n	8005fe2 <_printf_i+0x152>
 8006090:	462a      	mov	r2, r5
 8006092:	4649      	mov	r1, r9
 8006094:	4640      	mov	r0, r8
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	47d0      	blx	sl
 800609a:	3001      	adds	r0, #1
 800609c:	d0ab      	beq.n	8005ff6 <_printf_i+0x166>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	079b      	lsls	r3, r3, #30
 80060a2:	d413      	bmi.n	80060cc <_printf_i+0x23c>
 80060a4:	68e0      	ldr	r0, [r4, #12]
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	4298      	cmp	r0, r3
 80060aa:	bfb8      	it	lt
 80060ac:	4618      	movlt	r0, r3
 80060ae:	e7a4      	b.n	8005ffa <_printf_i+0x16a>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4632      	mov	r2, r6
 80060b4:	4649      	mov	r1, r9
 80060b6:	4640      	mov	r0, r8
 80060b8:	47d0      	blx	sl
 80060ba:	3001      	adds	r0, #1
 80060bc:	d09b      	beq.n	8005ff6 <_printf_i+0x166>
 80060be:	3501      	adds	r5, #1
 80060c0:	68e3      	ldr	r3, [r4, #12]
 80060c2:	9903      	ldr	r1, [sp, #12]
 80060c4:	1a5b      	subs	r3, r3, r1
 80060c6:	42ab      	cmp	r3, r5
 80060c8:	dcf2      	bgt.n	80060b0 <_printf_i+0x220>
 80060ca:	e7eb      	b.n	80060a4 <_printf_i+0x214>
 80060cc:	2500      	movs	r5, #0
 80060ce:	f104 0619 	add.w	r6, r4, #25
 80060d2:	e7f5      	b.n	80060c0 <_printf_i+0x230>
 80060d4:	0800a356 	.word	0x0800a356
 80060d8:	0800a367 	.word	0x0800a367

080060dc <_scanf_float>:
 80060dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	b087      	sub	sp, #28
 80060e2:	9303      	str	r3, [sp, #12]
 80060e4:	688b      	ldr	r3, [r1, #8]
 80060e6:	4617      	mov	r7, r2
 80060e8:	1e5a      	subs	r2, r3, #1
 80060ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80060ee:	bf85      	ittet	hi
 80060f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80060f4:	195b      	addhi	r3, r3, r5
 80060f6:	2300      	movls	r3, #0
 80060f8:	9302      	strhi	r3, [sp, #8]
 80060fa:	bf88      	it	hi
 80060fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006100:	468b      	mov	fp, r1
 8006102:	f04f 0500 	mov.w	r5, #0
 8006106:	bf8c      	ite	hi
 8006108:	608b      	strhi	r3, [r1, #8]
 800610a:	9302      	strls	r3, [sp, #8]
 800610c:	680b      	ldr	r3, [r1, #0]
 800610e:	4680      	mov	r8, r0
 8006110:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006114:	f84b 3b1c 	str.w	r3, [fp], #28
 8006118:	460c      	mov	r4, r1
 800611a:	465e      	mov	r6, fp
 800611c:	46aa      	mov	sl, r5
 800611e:	46a9      	mov	r9, r5
 8006120:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006124:	9501      	str	r5, [sp, #4]
 8006126:	68a2      	ldr	r2, [r4, #8]
 8006128:	b152      	cbz	r2, 8006140 <_scanf_float+0x64>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b4e      	cmp	r3, #78	; 0x4e
 8006130:	d864      	bhi.n	80061fc <_scanf_float+0x120>
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d83c      	bhi.n	80061b0 <_scanf_float+0xd4>
 8006136:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800613a:	b2c8      	uxtb	r0, r1
 800613c:	280e      	cmp	r0, #14
 800613e:	d93a      	bls.n	80061b6 <_scanf_float+0xda>
 8006140:	f1b9 0f00 	cmp.w	r9, #0
 8006144:	d003      	beq.n	800614e <_scanf_float+0x72>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006152:	f1ba 0f01 	cmp.w	sl, #1
 8006156:	f200 8113 	bhi.w	8006380 <_scanf_float+0x2a4>
 800615a:	455e      	cmp	r6, fp
 800615c:	f200 8105 	bhi.w	800636a <_scanf_float+0x28e>
 8006160:	2501      	movs	r5, #1
 8006162:	4628      	mov	r0, r5
 8006164:	b007      	add	sp, #28
 8006166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800616e:	2a0d      	cmp	r2, #13
 8006170:	d8e6      	bhi.n	8006140 <_scanf_float+0x64>
 8006172:	a101      	add	r1, pc, #4	; (adr r1, 8006178 <_scanf_float+0x9c>)
 8006174:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006178:	080062b7 	.word	0x080062b7
 800617c:	08006141 	.word	0x08006141
 8006180:	08006141 	.word	0x08006141
 8006184:	08006141 	.word	0x08006141
 8006188:	08006317 	.word	0x08006317
 800618c:	080062ef 	.word	0x080062ef
 8006190:	08006141 	.word	0x08006141
 8006194:	08006141 	.word	0x08006141
 8006198:	080062c5 	.word	0x080062c5
 800619c:	08006141 	.word	0x08006141
 80061a0:	08006141 	.word	0x08006141
 80061a4:	08006141 	.word	0x08006141
 80061a8:	08006141 	.word	0x08006141
 80061ac:	0800627d 	.word	0x0800627d
 80061b0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061b4:	e7db      	b.n	800616e <_scanf_float+0x92>
 80061b6:	290e      	cmp	r1, #14
 80061b8:	d8c2      	bhi.n	8006140 <_scanf_float+0x64>
 80061ba:	a001      	add	r0, pc, #4	; (adr r0, 80061c0 <_scanf_float+0xe4>)
 80061bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061c0:	0800626f 	.word	0x0800626f
 80061c4:	08006141 	.word	0x08006141
 80061c8:	0800626f 	.word	0x0800626f
 80061cc:	08006303 	.word	0x08006303
 80061d0:	08006141 	.word	0x08006141
 80061d4:	0800621d 	.word	0x0800621d
 80061d8:	08006259 	.word	0x08006259
 80061dc:	08006259 	.word	0x08006259
 80061e0:	08006259 	.word	0x08006259
 80061e4:	08006259 	.word	0x08006259
 80061e8:	08006259 	.word	0x08006259
 80061ec:	08006259 	.word	0x08006259
 80061f0:	08006259 	.word	0x08006259
 80061f4:	08006259 	.word	0x08006259
 80061f8:	08006259 	.word	0x08006259
 80061fc:	2b6e      	cmp	r3, #110	; 0x6e
 80061fe:	d809      	bhi.n	8006214 <_scanf_float+0x138>
 8006200:	2b60      	cmp	r3, #96	; 0x60
 8006202:	d8b2      	bhi.n	800616a <_scanf_float+0x8e>
 8006204:	2b54      	cmp	r3, #84	; 0x54
 8006206:	d077      	beq.n	80062f8 <_scanf_float+0x21c>
 8006208:	2b59      	cmp	r3, #89	; 0x59
 800620a:	d199      	bne.n	8006140 <_scanf_float+0x64>
 800620c:	2d07      	cmp	r5, #7
 800620e:	d197      	bne.n	8006140 <_scanf_float+0x64>
 8006210:	2508      	movs	r5, #8
 8006212:	e029      	b.n	8006268 <_scanf_float+0x18c>
 8006214:	2b74      	cmp	r3, #116	; 0x74
 8006216:	d06f      	beq.n	80062f8 <_scanf_float+0x21c>
 8006218:	2b79      	cmp	r3, #121	; 0x79
 800621a:	e7f6      	b.n	800620a <_scanf_float+0x12e>
 800621c:	6821      	ldr	r1, [r4, #0]
 800621e:	05c8      	lsls	r0, r1, #23
 8006220:	d51a      	bpl.n	8006258 <_scanf_float+0x17c>
 8006222:	9b02      	ldr	r3, [sp, #8]
 8006224:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006228:	6021      	str	r1, [r4, #0]
 800622a:	f109 0901 	add.w	r9, r9, #1
 800622e:	b11b      	cbz	r3, 8006238 <_scanf_float+0x15c>
 8006230:	3b01      	subs	r3, #1
 8006232:	3201      	adds	r2, #1
 8006234:	9302      	str	r3, [sp, #8]
 8006236:	60a2      	str	r2, [r4, #8]
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	3b01      	subs	r3, #1
 800623c:	60a3      	str	r3, [r4, #8]
 800623e:	6923      	ldr	r3, [r4, #16]
 8006240:	3301      	adds	r3, #1
 8006242:	6123      	str	r3, [r4, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3b01      	subs	r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	f340 8084 	ble.w	8006358 <_scanf_float+0x27c>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	3301      	adds	r3, #1
 8006254:	603b      	str	r3, [r7, #0]
 8006256:	e766      	b.n	8006126 <_scanf_float+0x4a>
 8006258:	eb1a 0f05 	cmn.w	sl, r5
 800625c:	f47f af70 	bne.w	8006140 <_scanf_float+0x64>
 8006260:	6822      	ldr	r2, [r4, #0]
 8006262:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006266:	6022      	str	r2, [r4, #0]
 8006268:	f806 3b01 	strb.w	r3, [r6], #1
 800626c:	e7e4      	b.n	8006238 <_scanf_float+0x15c>
 800626e:	6822      	ldr	r2, [r4, #0]
 8006270:	0610      	lsls	r0, r2, #24
 8006272:	f57f af65 	bpl.w	8006140 <_scanf_float+0x64>
 8006276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800627a:	e7f4      	b.n	8006266 <_scanf_float+0x18a>
 800627c:	f1ba 0f00 	cmp.w	sl, #0
 8006280:	d10e      	bne.n	80062a0 <_scanf_float+0x1c4>
 8006282:	f1b9 0f00 	cmp.w	r9, #0
 8006286:	d10e      	bne.n	80062a6 <_scanf_float+0x1ca>
 8006288:	6822      	ldr	r2, [r4, #0]
 800628a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800628e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006292:	d108      	bne.n	80062a6 <_scanf_float+0x1ca>
 8006294:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006298:	f04f 0a01 	mov.w	sl, #1
 800629c:	6022      	str	r2, [r4, #0]
 800629e:	e7e3      	b.n	8006268 <_scanf_float+0x18c>
 80062a0:	f1ba 0f02 	cmp.w	sl, #2
 80062a4:	d055      	beq.n	8006352 <_scanf_float+0x276>
 80062a6:	2d01      	cmp	r5, #1
 80062a8:	d002      	beq.n	80062b0 <_scanf_float+0x1d4>
 80062aa:	2d04      	cmp	r5, #4
 80062ac:	f47f af48 	bne.w	8006140 <_scanf_float+0x64>
 80062b0:	3501      	adds	r5, #1
 80062b2:	b2ed      	uxtb	r5, r5
 80062b4:	e7d8      	b.n	8006268 <_scanf_float+0x18c>
 80062b6:	f1ba 0f01 	cmp.w	sl, #1
 80062ba:	f47f af41 	bne.w	8006140 <_scanf_float+0x64>
 80062be:	f04f 0a02 	mov.w	sl, #2
 80062c2:	e7d1      	b.n	8006268 <_scanf_float+0x18c>
 80062c4:	b97d      	cbnz	r5, 80062e6 <_scanf_float+0x20a>
 80062c6:	f1b9 0f00 	cmp.w	r9, #0
 80062ca:	f47f af3c 	bne.w	8006146 <_scanf_float+0x6a>
 80062ce:	6822      	ldr	r2, [r4, #0]
 80062d0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062d4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062d8:	f47f af39 	bne.w	800614e <_scanf_float+0x72>
 80062dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062e0:	2501      	movs	r5, #1
 80062e2:	6022      	str	r2, [r4, #0]
 80062e4:	e7c0      	b.n	8006268 <_scanf_float+0x18c>
 80062e6:	2d03      	cmp	r5, #3
 80062e8:	d0e2      	beq.n	80062b0 <_scanf_float+0x1d4>
 80062ea:	2d05      	cmp	r5, #5
 80062ec:	e7de      	b.n	80062ac <_scanf_float+0x1d0>
 80062ee:	2d02      	cmp	r5, #2
 80062f0:	f47f af26 	bne.w	8006140 <_scanf_float+0x64>
 80062f4:	2503      	movs	r5, #3
 80062f6:	e7b7      	b.n	8006268 <_scanf_float+0x18c>
 80062f8:	2d06      	cmp	r5, #6
 80062fa:	f47f af21 	bne.w	8006140 <_scanf_float+0x64>
 80062fe:	2507      	movs	r5, #7
 8006300:	e7b2      	b.n	8006268 <_scanf_float+0x18c>
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	0591      	lsls	r1, r2, #22
 8006306:	f57f af1b 	bpl.w	8006140 <_scanf_float+0x64>
 800630a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800630e:	6022      	str	r2, [r4, #0]
 8006310:	f8cd 9004 	str.w	r9, [sp, #4]
 8006314:	e7a8      	b.n	8006268 <_scanf_float+0x18c>
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800631c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006320:	d006      	beq.n	8006330 <_scanf_float+0x254>
 8006322:	0550      	lsls	r0, r2, #21
 8006324:	f57f af0c 	bpl.w	8006140 <_scanf_float+0x64>
 8006328:	f1b9 0f00 	cmp.w	r9, #0
 800632c:	f43f af0f 	beq.w	800614e <_scanf_float+0x72>
 8006330:	0591      	lsls	r1, r2, #22
 8006332:	bf58      	it	pl
 8006334:	9901      	ldrpl	r1, [sp, #4]
 8006336:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800633a:	bf58      	it	pl
 800633c:	eba9 0101 	subpl.w	r1, r9, r1
 8006340:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006344:	f04f 0900 	mov.w	r9, #0
 8006348:	bf58      	it	pl
 800634a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800634e:	6022      	str	r2, [r4, #0]
 8006350:	e78a      	b.n	8006268 <_scanf_float+0x18c>
 8006352:	f04f 0a03 	mov.w	sl, #3
 8006356:	e787      	b.n	8006268 <_scanf_float+0x18c>
 8006358:	4639      	mov	r1, r7
 800635a:	4640      	mov	r0, r8
 800635c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006360:	4798      	blx	r3
 8006362:	2800      	cmp	r0, #0
 8006364:	f43f aedf 	beq.w	8006126 <_scanf_float+0x4a>
 8006368:	e6ea      	b.n	8006140 <_scanf_float+0x64>
 800636a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800636e:	463a      	mov	r2, r7
 8006370:	4640      	mov	r0, r8
 8006372:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006376:	4798      	blx	r3
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	3b01      	subs	r3, #1
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	e6ec      	b.n	800615a <_scanf_float+0x7e>
 8006380:	1e6b      	subs	r3, r5, #1
 8006382:	2b06      	cmp	r3, #6
 8006384:	d825      	bhi.n	80063d2 <_scanf_float+0x2f6>
 8006386:	2d02      	cmp	r5, #2
 8006388:	d836      	bhi.n	80063f8 <_scanf_float+0x31c>
 800638a:	455e      	cmp	r6, fp
 800638c:	f67f aee8 	bls.w	8006160 <_scanf_float+0x84>
 8006390:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006394:	463a      	mov	r2, r7
 8006396:	4640      	mov	r0, r8
 8006398:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800639c:	4798      	blx	r3
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	3b01      	subs	r3, #1
 80063a2:	6123      	str	r3, [r4, #16]
 80063a4:	e7f1      	b.n	800638a <_scanf_float+0x2ae>
 80063a6:	9802      	ldr	r0, [sp, #8]
 80063a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063b0:	463a      	mov	r2, r7
 80063b2:	9002      	str	r0, [sp, #8]
 80063b4:	4640      	mov	r0, r8
 80063b6:	4798      	blx	r3
 80063b8:	6923      	ldr	r3, [r4, #16]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	6123      	str	r3, [r4, #16]
 80063be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063c2:	fa5f fa8a 	uxtb.w	sl, sl
 80063c6:	f1ba 0f02 	cmp.w	sl, #2
 80063ca:	d1ec      	bne.n	80063a6 <_scanf_float+0x2ca>
 80063cc:	3d03      	subs	r5, #3
 80063ce:	b2ed      	uxtb	r5, r5
 80063d0:	1b76      	subs	r6, r6, r5
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	05da      	lsls	r2, r3, #23
 80063d6:	d52f      	bpl.n	8006438 <_scanf_float+0x35c>
 80063d8:	055b      	lsls	r3, r3, #21
 80063da:	d510      	bpl.n	80063fe <_scanf_float+0x322>
 80063dc:	455e      	cmp	r6, fp
 80063de:	f67f aebf 	bls.w	8006160 <_scanf_float+0x84>
 80063e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063e6:	463a      	mov	r2, r7
 80063e8:	4640      	mov	r0, r8
 80063ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063ee:	4798      	blx	r3
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	e7f1      	b.n	80063dc <_scanf_float+0x300>
 80063f8:	46aa      	mov	sl, r5
 80063fa:	9602      	str	r6, [sp, #8]
 80063fc:	e7df      	b.n	80063be <_scanf_float+0x2e2>
 80063fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	2965      	cmp	r1, #101	; 0x65
 8006406:	f103 33ff 	add.w	r3, r3, #4294967295
 800640a:	f106 35ff 	add.w	r5, r6, #4294967295
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	d00c      	beq.n	800642c <_scanf_float+0x350>
 8006412:	2945      	cmp	r1, #69	; 0x45
 8006414:	d00a      	beq.n	800642c <_scanf_float+0x350>
 8006416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800641a:	463a      	mov	r2, r7
 800641c:	4640      	mov	r0, r8
 800641e:	4798      	blx	r3
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006426:	3b01      	subs	r3, #1
 8006428:	1eb5      	subs	r5, r6, #2
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	463a      	mov	r2, r7
 800642e:	4640      	mov	r0, r8
 8006430:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006434:	4798      	blx	r3
 8006436:	462e      	mov	r6, r5
 8006438:	6825      	ldr	r5, [r4, #0]
 800643a:	f015 0510 	ands.w	r5, r5, #16
 800643e:	d155      	bne.n	80064ec <_scanf_float+0x410>
 8006440:	7035      	strb	r5, [r6, #0]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644c:	d11b      	bne.n	8006486 <_scanf_float+0x3aa>
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	454b      	cmp	r3, r9
 8006452:	eba3 0209 	sub.w	r2, r3, r9
 8006456:	d123      	bne.n	80064a0 <_scanf_float+0x3c4>
 8006458:	2200      	movs	r2, #0
 800645a:	4659      	mov	r1, fp
 800645c:	4640      	mov	r0, r8
 800645e:	f000 fe7b 	bl	8007158 <_strtod_r>
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	f012 0f02 	tst.w	r2, #2
 800646a:	4606      	mov	r6, r0
 800646c:	460f      	mov	r7, r1
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	d021      	beq.n	80064b6 <_scanf_float+0x3da>
 8006472:	1d1a      	adds	r2, r3, #4
 8006474:	9903      	ldr	r1, [sp, #12]
 8006476:	600a      	str	r2, [r1, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	e9c3 6700 	strd	r6, r7, [r3]
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60e3      	str	r3, [r4, #12]
 8006484:	e66d      	b.n	8006162 <_scanf_float+0x86>
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d0e5      	beq.n	8006458 <_scanf_float+0x37c>
 800648c:	9905      	ldr	r1, [sp, #20]
 800648e:	230a      	movs	r3, #10
 8006490:	462a      	mov	r2, r5
 8006492:	4640      	mov	r0, r8
 8006494:	3101      	adds	r1, #1
 8006496:	f000 fee1 	bl	800725c <_strtol_r>
 800649a:	9b04      	ldr	r3, [sp, #16]
 800649c:	9e05      	ldr	r6, [sp, #20]
 800649e:	1ac2      	subs	r2, r0, r3
 80064a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064a4:	429e      	cmp	r6, r3
 80064a6:	bf28      	it	cs
 80064a8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064ac:	4630      	mov	r0, r6
 80064ae:	4910      	ldr	r1, [pc, #64]	; (80064f0 <_scanf_float+0x414>)
 80064b0:	f000 f826 	bl	8006500 <siprintf>
 80064b4:	e7d0      	b.n	8006458 <_scanf_float+0x37c>
 80064b6:	f012 0f04 	tst.w	r2, #4
 80064ba:	f103 0204 	add.w	r2, r3, #4
 80064be:	d1d9      	bne.n	8006474 <_scanf_float+0x398>
 80064c0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80064c4:	f8cc 2000 	str.w	r2, [ip]
 80064c8:	f8d3 8000 	ldr.w	r8, [r3]
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	f7fa fa9c 	bl	8000a0c <__aeabi_dcmpun>
 80064d4:	b128      	cbz	r0, 80064e2 <_scanf_float+0x406>
 80064d6:	4807      	ldr	r0, [pc, #28]	; (80064f4 <_scanf_float+0x418>)
 80064d8:	f000 f80e 	bl	80064f8 <nanf>
 80064dc:	f8c8 0000 	str.w	r0, [r8]
 80064e0:	e7cd      	b.n	800647e <_scanf_float+0x3a2>
 80064e2:	4630      	mov	r0, r6
 80064e4:	4639      	mov	r1, r7
 80064e6:	f7fa faef 	bl	8000ac8 <__aeabi_d2f>
 80064ea:	e7f7      	b.n	80064dc <_scanf_float+0x400>
 80064ec:	2500      	movs	r5, #0
 80064ee:	e638      	b.n	8006162 <_scanf_float+0x86>
 80064f0:	0800a378 	.word	0x0800a378
 80064f4:	0800a780 	.word	0x0800a780

080064f8 <nanf>:
 80064f8:	4800      	ldr	r0, [pc, #0]	; (80064fc <nanf+0x4>)
 80064fa:	4770      	bx	lr
 80064fc:	7fc00000 	.word	0x7fc00000

08006500 <siprintf>:
 8006500:	b40e      	push	{r1, r2, r3}
 8006502:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006506:	b500      	push	{lr}
 8006508:	b09c      	sub	sp, #112	; 0x70
 800650a:	ab1d      	add	r3, sp, #116	; 0x74
 800650c:	9002      	str	r0, [sp, #8]
 800650e:	9006      	str	r0, [sp, #24]
 8006510:	9107      	str	r1, [sp, #28]
 8006512:	9104      	str	r1, [sp, #16]
 8006514:	4808      	ldr	r0, [pc, #32]	; (8006538 <siprintf+0x38>)
 8006516:	4909      	ldr	r1, [pc, #36]	; (800653c <siprintf+0x3c>)
 8006518:	f853 2b04 	ldr.w	r2, [r3], #4
 800651c:	9105      	str	r1, [sp, #20]
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	a902      	add	r1, sp, #8
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	f002 feba 	bl	800929c <_svfiprintf_r>
 8006528:	2200      	movs	r2, #0
 800652a:	9b02      	ldr	r3, [sp, #8]
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	b01c      	add	sp, #112	; 0x70
 8006530:	f85d eb04 	ldr.w	lr, [sp], #4
 8006534:	b003      	add	sp, #12
 8006536:	4770      	bx	lr
 8006538:	2000000c 	.word	0x2000000c
 800653c:	ffff0208 	.word	0xffff0208

08006540 <sulp>:
 8006540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006544:	460f      	mov	r7, r1
 8006546:	4690      	mov	r8, r2
 8006548:	f002 fc14 	bl	8008d74 <__ulp>
 800654c:	4604      	mov	r4, r0
 800654e:	460d      	mov	r5, r1
 8006550:	f1b8 0f00 	cmp.w	r8, #0
 8006554:	d011      	beq.n	800657a <sulp+0x3a>
 8006556:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800655a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800655e:	2b00      	cmp	r3, #0
 8006560:	dd0b      	ble.n	800657a <sulp+0x3a>
 8006562:	2400      	movs	r4, #0
 8006564:	051b      	lsls	r3, r3, #20
 8006566:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800656a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800656e:	4622      	mov	r2, r4
 8006570:	462b      	mov	r3, r5
 8006572:	f7f9 ffb1 	bl	80004d8 <__aeabi_dmul>
 8006576:	4604      	mov	r4, r0
 8006578:	460d      	mov	r5, r1
 800657a:	4620      	mov	r0, r4
 800657c:	4629      	mov	r1, r5
 800657e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006582:	0000      	movs	r0, r0
 8006584:	0000      	movs	r0, r0
	...

08006588 <_strtod_l>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	469b      	mov	fp, r3
 800658e:	2300      	movs	r3, #0
 8006590:	b09f      	sub	sp, #124	; 0x7c
 8006592:	931a      	str	r3, [sp, #104]	; 0x68
 8006594:	4b9e      	ldr	r3, [pc, #632]	; (8006810 <_strtod_l+0x288>)
 8006596:	4682      	mov	sl, r0
 8006598:	681f      	ldr	r7, [r3, #0]
 800659a:	460e      	mov	r6, r1
 800659c:	4638      	mov	r0, r7
 800659e:	9215      	str	r2, [sp, #84]	; 0x54
 80065a0:	f7f9 fdd6 	bl	8000150 <strlen>
 80065a4:	f04f 0800 	mov.w	r8, #0
 80065a8:	4604      	mov	r4, r0
 80065aa:	f04f 0900 	mov.w	r9, #0
 80065ae:	9619      	str	r6, [sp, #100]	; 0x64
 80065b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	2a2b      	cmp	r2, #43	; 0x2b
 80065b6:	d04c      	beq.n	8006652 <_strtod_l+0xca>
 80065b8:	d83a      	bhi.n	8006630 <_strtod_l+0xa8>
 80065ba:	2a0d      	cmp	r2, #13
 80065bc:	d833      	bhi.n	8006626 <_strtod_l+0x9e>
 80065be:	2a08      	cmp	r2, #8
 80065c0:	d833      	bhi.n	800662a <_strtod_l+0xa2>
 80065c2:	2a00      	cmp	r2, #0
 80065c4:	d03d      	beq.n	8006642 <_strtod_l+0xba>
 80065c6:	2300      	movs	r3, #0
 80065c8:	930a      	str	r3, [sp, #40]	; 0x28
 80065ca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80065cc:	782b      	ldrb	r3, [r5, #0]
 80065ce:	2b30      	cmp	r3, #48	; 0x30
 80065d0:	f040 80aa 	bne.w	8006728 <_strtod_l+0x1a0>
 80065d4:	786b      	ldrb	r3, [r5, #1]
 80065d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80065da:	2b58      	cmp	r3, #88	; 0x58
 80065dc:	d166      	bne.n	80066ac <_strtod_l+0x124>
 80065de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e0:	4650      	mov	r0, sl
 80065e2:	9301      	str	r3, [sp, #4]
 80065e4:	ab1a      	add	r3, sp, #104	; 0x68
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	4a8a      	ldr	r2, [pc, #552]	; (8006814 <_strtod_l+0x28c>)
 80065ea:	f8cd b008 	str.w	fp, [sp, #8]
 80065ee:	ab1b      	add	r3, sp, #108	; 0x6c
 80065f0:	a919      	add	r1, sp, #100	; 0x64
 80065f2:	f001 fd17 	bl	8008024 <__gethex>
 80065f6:	f010 0607 	ands.w	r6, r0, #7
 80065fa:	4604      	mov	r4, r0
 80065fc:	d005      	beq.n	800660a <_strtod_l+0x82>
 80065fe:	2e06      	cmp	r6, #6
 8006600:	d129      	bne.n	8006656 <_strtod_l+0xce>
 8006602:	2300      	movs	r3, #0
 8006604:	3501      	adds	r5, #1
 8006606:	9519      	str	r5, [sp, #100]	; 0x64
 8006608:	930a      	str	r3, [sp, #40]	; 0x28
 800660a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800660c:	2b00      	cmp	r3, #0
 800660e:	f040 858a 	bne.w	8007126 <_strtod_l+0xb9e>
 8006612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006614:	b1d3      	cbz	r3, 800664c <_strtod_l+0xc4>
 8006616:	4642      	mov	r2, r8
 8006618:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800661c:	4610      	mov	r0, r2
 800661e:	4619      	mov	r1, r3
 8006620:	b01f      	add	sp, #124	; 0x7c
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	2a20      	cmp	r2, #32
 8006628:	d1cd      	bne.n	80065c6 <_strtod_l+0x3e>
 800662a:	3301      	adds	r3, #1
 800662c:	9319      	str	r3, [sp, #100]	; 0x64
 800662e:	e7bf      	b.n	80065b0 <_strtod_l+0x28>
 8006630:	2a2d      	cmp	r2, #45	; 0x2d
 8006632:	d1c8      	bne.n	80065c6 <_strtod_l+0x3e>
 8006634:	2201      	movs	r2, #1
 8006636:	920a      	str	r2, [sp, #40]	; 0x28
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	9219      	str	r2, [sp, #100]	; 0x64
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1c3      	bne.n	80065ca <_strtod_l+0x42>
 8006642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006644:	9619      	str	r6, [sp, #100]	; 0x64
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 856b 	bne.w	8007122 <_strtod_l+0xb9a>
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	e7e4      	b.n	800661c <_strtod_l+0x94>
 8006652:	2200      	movs	r2, #0
 8006654:	e7ef      	b.n	8006636 <_strtod_l+0xae>
 8006656:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006658:	b13a      	cbz	r2, 800666a <_strtod_l+0xe2>
 800665a:	2135      	movs	r1, #53	; 0x35
 800665c:	a81c      	add	r0, sp, #112	; 0x70
 800665e:	f002 fc8d 	bl	8008f7c <__copybits>
 8006662:	4650      	mov	r0, sl
 8006664:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006666:	f002 f855 	bl	8008714 <_Bfree>
 800666a:	3e01      	subs	r6, #1
 800666c:	2e04      	cmp	r6, #4
 800666e:	d806      	bhi.n	800667e <_strtod_l+0xf6>
 8006670:	e8df f006 	tbb	[pc, r6]
 8006674:	1714030a 	.word	0x1714030a
 8006678:	0a          	.byte	0x0a
 8006679:	00          	.byte	0x00
 800667a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800667e:	0721      	lsls	r1, r4, #28
 8006680:	d5c3      	bpl.n	800660a <_strtod_l+0x82>
 8006682:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006686:	e7c0      	b.n	800660a <_strtod_l+0x82>
 8006688:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800668a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800668e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006692:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006696:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800669a:	e7f0      	b.n	800667e <_strtod_l+0xf6>
 800669c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006818 <_strtod_l+0x290>
 80066a0:	e7ed      	b.n	800667e <_strtod_l+0xf6>
 80066a2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80066a6:	f04f 38ff 	mov.w	r8, #4294967295
 80066aa:	e7e8      	b.n	800667e <_strtod_l+0xf6>
 80066ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	9219      	str	r2, [sp, #100]	; 0x64
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	2b30      	cmp	r3, #48	; 0x30
 80066b6:	d0f9      	beq.n	80066ac <_strtod_l+0x124>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0a6      	beq.n	800660a <_strtod_l+0x82>
 80066bc:	2301      	movs	r3, #1
 80066be:	9307      	str	r3, [sp, #28]
 80066c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066c2:	220a      	movs	r2, #10
 80066c4:	9308      	str	r3, [sp, #32]
 80066c6:	2300      	movs	r3, #0
 80066c8:	469b      	mov	fp, r3
 80066ca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80066ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 80066d0:	7805      	ldrb	r5, [r0, #0]
 80066d2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80066d6:	b2d9      	uxtb	r1, r3
 80066d8:	2909      	cmp	r1, #9
 80066da:	d927      	bls.n	800672c <_strtod_l+0x1a4>
 80066dc:	4622      	mov	r2, r4
 80066de:	4639      	mov	r1, r7
 80066e0:	f002 fef2 	bl	80094c8 <strncmp>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d033      	beq.n	8006750 <_strtod_l+0x1c8>
 80066e8:	2000      	movs	r0, #0
 80066ea:	462a      	mov	r2, r5
 80066ec:	465c      	mov	r4, fp
 80066ee:	4603      	mov	r3, r0
 80066f0:	9004      	str	r0, [sp, #16]
 80066f2:	2a65      	cmp	r2, #101	; 0x65
 80066f4:	d001      	beq.n	80066fa <_strtod_l+0x172>
 80066f6:	2a45      	cmp	r2, #69	; 0x45
 80066f8:	d114      	bne.n	8006724 <_strtod_l+0x19c>
 80066fa:	b91c      	cbnz	r4, 8006704 <_strtod_l+0x17c>
 80066fc:	9a07      	ldr	r2, [sp, #28]
 80066fe:	4302      	orrs	r2, r0
 8006700:	d09f      	beq.n	8006642 <_strtod_l+0xba>
 8006702:	2400      	movs	r4, #0
 8006704:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006706:	1c72      	adds	r2, r6, #1
 8006708:	9219      	str	r2, [sp, #100]	; 0x64
 800670a:	7872      	ldrb	r2, [r6, #1]
 800670c:	2a2b      	cmp	r2, #43	; 0x2b
 800670e:	d079      	beq.n	8006804 <_strtod_l+0x27c>
 8006710:	2a2d      	cmp	r2, #45	; 0x2d
 8006712:	f000 8083 	beq.w	800681c <_strtod_l+0x294>
 8006716:	2700      	movs	r7, #0
 8006718:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800671c:	2909      	cmp	r1, #9
 800671e:	f240 8083 	bls.w	8006828 <_strtod_l+0x2a0>
 8006722:	9619      	str	r6, [sp, #100]	; 0x64
 8006724:	2500      	movs	r5, #0
 8006726:	e09f      	b.n	8006868 <_strtod_l+0x2e0>
 8006728:	2300      	movs	r3, #0
 800672a:	e7c8      	b.n	80066be <_strtod_l+0x136>
 800672c:	f1bb 0f08 	cmp.w	fp, #8
 8006730:	bfd5      	itete	le
 8006732:	9906      	ldrle	r1, [sp, #24]
 8006734:	9905      	ldrgt	r1, [sp, #20]
 8006736:	fb02 3301 	mlale	r3, r2, r1, r3
 800673a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800673e:	f100 0001 	add.w	r0, r0, #1
 8006742:	bfd4      	ite	le
 8006744:	9306      	strle	r3, [sp, #24]
 8006746:	9305      	strgt	r3, [sp, #20]
 8006748:	f10b 0b01 	add.w	fp, fp, #1
 800674c:	9019      	str	r0, [sp, #100]	; 0x64
 800674e:	e7be      	b.n	80066ce <_strtod_l+0x146>
 8006750:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006752:	191a      	adds	r2, r3, r4
 8006754:	9219      	str	r2, [sp, #100]	; 0x64
 8006756:	5d1a      	ldrb	r2, [r3, r4]
 8006758:	f1bb 0f00 	cmp.w	fp, #0
 800675c:	d036      	beq.n	80067cc <_strtod_l+0x244>
 800675e:	465c      	mov	r4, fp
 8006760:	9004      	str	r0, [sp, #16]
 8006762:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006766:	2b09      	cmp	r3, #9
 8006768:	d912      	bls.n	8006790 <_strtod_l+0x208>
 800676a:	2301      	movs	r3, #1
 800676c:	e7c1      	b.n	80066f2 <_strtod_l+0x16a>
 800676e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006770:	3001      	adds	r0, #1
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	9219      	str	r2, [sp, #100]	; 0x64
 8006776:	785a      	ldrb	r2, [r3, #1]
 8006778:	2a30      	cmp	r2, #48	; 0x30
 800677a:	d0f8      	beq.n	800676e <_strtod_l+0x1e6>
 800677c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006780:	2b08      	cmp	r3, #8
 8006782:	f200 84d5 	bhi.w	8007130 <_strtod_l+0xba8>
 8006786:	9004      	str	r0, [sp, #16]
 8006788:	2000      	movs	r0, #0
 800678a:	4604      	mov	r4, r0
 800678c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800678e:	9308      	str	r3, [sp, #32]
 8006790:	3a30      	subs	r2, #48	; 0x30
 8006792:	f100 0301 	add.w	r3, r0, #1
 8006796:	d013      	beq.n	80067c0 <_strtod_l+0x238>
 8006798:	9904      	ldr	r1, [sp, #16]
 800679a:	1905      	adds	r5, r0, r4
 800679c:	4419      	add	r1, r3
 800679e:	9104      	str	r1, [sp, #16]
 80067a0:	4623      	mov	r3, r4
 80067a2:	210a      	movs	r1, #10
 80067a4:	42ab      	cmp	r3, r5
 80067a6:	d113      	bne.n	80067d0 <_strtod_l+0x248>
 80067a8:	1823      	adds	r3, r4, r0
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	f104 0401 	add.w	r4, r4, #1
 80067b0:	4404      	add	r4, r0
 80067b2:	dc1b      	bgt.n	80067ec <_strtod_l+0x264>
 80067b4:	230a      	movs	r3, #10
 80067b6:	9906      	ldr	r1, [sp, #24]
 80067b8:	fb03 2301 	mla	r3, r3, r1, r2
 80067bc:	9306      	str	r3, [sp, #24]
 80067be:	2300      	movs	r3, #0
 80067c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067c2:	4618      	mov	r0, r3
 80067c4:	1c51      	adds	r1, r2, #1
 80067c6:	9119      	str	r1, [sp, #100]	; 0x64
 80067c8:	7852      	ldrb	r2, [r2, #1]
 80067ca:	e7ca      	b.n	8006762 <_strtod_l+0x1da>
 80067cc:	4658      	mov	r0, fp
 80067ce:	e7d3      	b.n	8006778 <_strtod_l+0x1f0>
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	dc04      	bgt.n	80067de <_strtod_l+0x256>
 80067d4:	9f06      	ldr	r7, [sp, #24]
 80067d6:	434f      	muls	r7, r1
 80067d8:	9706      	str	r7, [sp, #24]
 80067da:	3301      	adds	r3, #1
 80067dc:	e7e2      	b.n	80067a4 <_strtod_l+0x21c>
 80067de:	1c5f      	adds	r7, r3, #1
 80067e0:	2f10      	cmp	r7, #16
 80067e2:	bfde      	ittt	le
 80067e4:	9f05      	ldrle	r7, [sp, #20]
 80067e6:	434f      	mulle	r7, r1
 80067e8:	9705      	strle	r7, [sp, #20]
 80067ea:	e7f6      	b.n	80067da <_strtod_l+0x252>
 80067ec:	2c10      	cmp	r4, #16
 80067ee:	bfdf      	itttt	le
 80067f0:	230a      	movle	r3, #10
 80067f2:	9905      	ldrle	r1, [sp, #20]
 80067f4:	fb03 2301 	mlale	r3, r3, r1, r2
 80067f8:	9305      	strle	r3, [sp, #20]
 80067fa:	e7e0      	b.n	80067be <_strtod_l+0x236>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9304      	str	r3, [sp, #16]
 8006800:	2301      	movs	r3, #1
 8006802:	e77b      	b.n	80066fc <_strtod_l+0x174>
 8006804:	2700      	movs	r7, #0
 8006806:	1cb2      	adds	r2, r6, #2
 8006808:	9219      	str	r2, [sp, #100]	; 0x64
 800680a:	78b2      	ldrb	r2, [r6, #2]
 800680c:	e784      	b.n	8006718 <_strtod_l+0x190>
 800680e:	bf00      	nop
 8006810:	0800a5c8 	.word	0x0800a5c8
 8006814:	0800a380 	.word	0x0800a380
 8006818:	7ff00000 	.word	0x7ff00000
 800681c:	2701      	movs	r7, #1
 800681e:	e7f2      	b.n	8006806 <_strtod_l+0x27e>
 8006820:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006822:	1c51      	adds	r1, r2, #1
 8006824:	9119      	str	r1, [sp, #100]	; 0x64
 8006826:	7852      	ldrb	r2, [r2, #1]
 8006828:	2a30      	cmp	r2, #48	; 0x30
 800682a:	d0f9      	beq.n	8006820 <_strtod_l+0x298>
 800682c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006830:	2908      	cmp	r1, #8
 8006832:	f63f af77 	bhi.w	8006724 <_strtod_l+0x19c>
 8006836:	f04f 0e0a 	mov.w	lr, #10
 800683a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800683e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006840:	9209      	str	r2, [sp, #36]	; 0x24
 8006842:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006844:	1c51      	adds	r1, r2, #1
 8006846:	9119      	str	r1, [sp, #100]	; 0x64
 8006848:	7852      	ldrb	r2, [r2, #1]
 800684a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800684e:	2d09      	cmp	r5, #9
 8006850:	d935      	bls.n	80068be <_strtod_l+0x336>
 8006852:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006854:	1b49      	subs	r1, r1, r5
 8006856:	2908      	cmp	r1, #8
 8006858:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800685c:	dc02      	bgt.n	8006864 <_strtod_l+0x2dc>
 800685e:	4565      	cmp	r5, ip
 8006860:	bfa8      	it	ge
 8006862:	4665      	movge	r5, ip
 8006864:	b107      	cbz	r7, 8006868 <_strtod_l+0x2e0>
 8006866:	426d      	negs	r5, r5
 8006868:	2c00      	cmp	r4, #0
 800686a:	d14c      	bne.n	8006906 <_strtod_l+0x37e>
 800686c:	9907      	ldr	r1, [sp, #28]
 800686e:	4301      	orrs	r1, r0
 8006870:	f47f aecb 	bne.w	800660a <_strtod_l+0x82>
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f aee4 	bne.w	8006642 <_strtod_l+0xba>
 800687a:	2a69      	cmp	r2, #105	; 0x69
 800687c:	d026      	beq.n	80068cc <_strtod_l+0x344>
 800687e:	dc23      	bgt.n	80068c8 <_strtod_l+0x340>
 8006880:	2a49      	cmp	r2, #73	; 0x49
 8006882:	d023      	beq.n	80068cc <_strtod_l+0x344>
 8006884:	2a4e      	cmp	r2, #78	; 0x4e
 8006886:	f47f aedc 	bne.w	8006642 <_strtod_l+0xba>
 800688a:	499d      	ldr	r1, [pc, #628]	; (8006b00 <_strtod_l+0x578>)
 800688c:	a819      	add	r0, sp, #100	; 0x64
 800688e:	f001 fe17 	bl	80084c0 <__match>
 8006892:	2800      	cmp	r0, #0
 8006894:	f43f aed5 	beq.w	8006642 <_strtod_l+0xba>
 8006898:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b28      	cmp	r3, #40	; 0x28
 800689e:	d12c      	bne.n	80068fa <_strtod_l+0x372>
 80068a0:	4998      	ldr	r1, [pc, #608]	; (8006b04 <_strtod_l+0x57c>)
 80068a2:	aa1c      	add	r2, sp, #112	; 0x70
 80068a4:	a819      	add	r0, sp, #100	; 0x64
 80068a6:	f001 fe1f 	bl	80084e8 <__hexnan>
 80068aa:	2805      	cmp	r0, #5
 80068ac:	d125      	bne.n	80068fa <_strtod_l+0x372>
 80068ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80068b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80068b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80068bc:	e6a5      	b.n	800660a <_strtod_l+0x82>
 80068be:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80068c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80068c6:	e7bc      	b.n	8006842 <_strtod_l+0x2ba>
 80068c8:	2a6e      	cmp	r2, #110	; 0x6e
 80068ca:	e7dc      	b.n	8006886 <_strtod_l+0x2fe>
 80068cc:	498e      	ldr	r1, [pc, #568]	; (8006b08 <_strtod_l+0x580>)
 80068ce:	a819      	add	r0, sp, #100	; 0x64
 80068d0:	f001 fdf6 	bl	80084c0 <__match>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f43f aeb4 	beq.w	8006642 <_strtod_l+0xba>
 80068da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068dc:	498b      	ldr	r1, [pc, #556]	; (8006b0c <_strtod_l+0x584>)
 80068de:	3b01      	subs	r3, #1
 80068e0:	a819      	add	r0, sp, #100	; 0x64
 80068e2:	9319      	str	r3, [sp, #100]	; 0x64
 80068e4:	f001 fdec 	bl	80084c0 <__match>
 80068e8:	b910      	cbnz	r0, 80068f0 <_strtod_l+0x368>
 80068ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068ec:	3301      	adds	r3, #1
 80068ee:	9319      	str	r3, [sp, #100]	; 0x64
 80068f0:	f04f 0800 	mov.w	r8, #0
 80068f4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8006b10 <_strtod_l+0x588>
 80068f8:	e687      	b.n	800660a <_strtod_l+0x82>
 80068fa:	4886      	ldr	r0, [pc, #536]	; (8006b14 <_strtod_l+0x58c>)
 80068fc:	f002 fdce 	bl	800949c <nan>
 8006900:	4680      	mov	r8, r0
 8006902:	4689      	mov	r9, r1
 8006904:	e681      	b.n	800660a <_strtod_l+0x82>
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	f1bb 0f00 	cmp.w	fp, #0
 800690c:	bf08      	it	eq
 800690e:	46a3      	moveq	fp, r4
 8006910:	1aeb      	subs	r3, r5, r3
 8006912:	2c10      	cmp	r4, #16
 8006914:	9806      	ldr	r0, [sp, #24]
 8006916:	4626      	mov	r6, r4
 8006918:	9307      	str	r3, [sp, #28]
 800691a:	bfa8      	it	ge
 800691c:	2610      	movge	r6, #16
 800691e:	f7f9 fd61 	bl	80003e4 <__aeabi_ui2d>
 8006922:	2c09      	cmp	r4, #9
 8006924:	4680      	mov	r8, r0
 8006926:	4689      	mov	r9, r1
 8006928:	dd13      	ble.n	8006952 <_strtod_l+0x3ca>
 800692a:	4b7b      	ldr	r3, [pc, #492]	; (8006b18 <_strtod_l+0x590>)
 800692c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006930:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006934:	f7f9 fdd0 	bl	80004d8 <__aeabi_dmul>
 8006938:	4680      	mov	r8, r0
 800693a:	9805      	ldr	r0, [sp, #20]
 800693c:	4689      	mov	r9, r1
 800693e:	f7f9 fd51 	bl	80003e4 <__aeabi_ui2d>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4640      	mov	r0, r8
 8006948:	4649      	mov	r1, r9
 800694a:	f7f9 fc0f 	bl	800016c <__adddf3>
 800694e:	4680      	mov	r8, r0
 8006950:	4689      	mov	r9, r1
 8006952:	2c0f      	cmp	r4, #15
 8006954:	dc36      	bgt.n	80069c4 <_strtod_l+0x43c>
 8006956:	9b07      	ldr	r3, [sp, #28]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f43f ae56 	beq.w	800660a <_strtod_l+0x82>
 800695e:	dd22      	ble.n	80069a6 <_strtod_l+0x41e>
 8006960:	2b16      	cmp	r3, #22
 8006962:	dc09      	bgt.n	8006978 <_strtod_l+0x3f0>
 8006964:	496c      	ldr	r1, [pc, #432]	; (8006b18 <_strtod_l+0x590>)
 8006966:	4642      	mov	r2, r8
 8006968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800696c:	464b      	mov	r3, r9
 800696e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006972:	f7f9 fdb1 	bl	80004d8 <__aeabi_dmul>
 8006976:	e7c3      	b.n	8006900 <_strtod_l+0x378>
 8006978:	9a07      	ldr	r2, [sp, #28]
 800697a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800697e:	4293      	cmp	r3, r2
 8006980:	db20      	blt.n	80069c4 <_strtod_l+0x43c>
 8006982:	4d65      	ldr	r5, [pc, #404]	; (8006b18 <_strtod_l+0x590>)
 8006984:	f1c4 040f 	rsb	r4, r4, #15
 8006988:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800698c:	4642      	mov	r2, r8
 800698e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006992:	464b      	mov	r3, r9
 8006994:	f7f9 fda0 	bl	80004d8 <__aeabi_dmul>
 8006998:	9b07      	ldr	r3, [sp, #28]
 800699a:	1b1c      	subs	r4, r3, r4
 800699c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80069a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069a4:	e7e5      	b.n	8006972 <_strtod_l+0x3ea>
 80069a6:	9b07      	ldr	r3, [sp, #28]
 80069a8:	3316      	adds	r3, #22
 80069aa:	db0b      	blt.n	80069c4 <_strtod_l+0x43c>
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	4640      	mov	r0, r8
 80069b0:	1b5d      	subs	r5, r3, r5
 80069b2:	4b59      	ldr	r3, [pc, #356]	; (8006b18 <_strtod_l+0x590>)
 80069b4:	4649      	mov	r1, r9
 80069b6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80069ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069be:	f7f9 feb5 	bl	800072c <__aeabi_ddiv>
 80069c2:	e79d      	b.n	8006900 <_strtod_l+0x378>
 80069c4:	9b07      	ldr	r3, [sp, #28]
 80069c6:	1ba6      	subs	r6, r4, r6
 80069c8:	441e      	add	r6, r3
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	dd74      	ble.n	8006ab8 <_strtod_l+0x530>
 80069ce:	f016 030f 	ands.w	r3, r6, #15
 80069d2:	d00a      	beq.n	80069ea <_strtod_l+0x462>
 80069d4:	4950      	ldr	r1, [pc, #320]	; (8006b18 <_strtod_l+0x590>)
 80069d6:	4642      	mov	r2, r8
 80069d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e0:	464b      	mov	r3, r9
 80069e2:	f7f9 fd79 	bl	80004d8 <__aeabi_dmul>
 80069e6:	4680      	mov	r8, r0
 80069e8:	4689      	mov	r9, r1
 80069ea:	f036 060f 	bics.w	r6, r6, #15
 80069ee:	d052      	beq.n	8006a96 <_strtod_l+0x50e>
 80069f0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80069f4:	dd27      	ble.n	8006a46 <_strtod_l+0x4be>
 80069f6:	f04f 0b00 	mov.w	fp, #0
 80069fa:	f8cd b010 	str.w	fp, [sp, #16]
 80069fe:	f8cd b020 	str.w	fp, [sp, #32]
 8006a02:	f8cd b018 	str.w	fp, [sp, #24]
 8006a06:	2322      	movs	r3, #34	; 0x22
 8006a08:	f04f 0800 	mov.w	r8, #0
 8006a0c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8006b10 <_strtod_l+0x588>
 8006a10:	f8ca 3000 	str.w	r3, [sl]
 8006a14:	9b08      	ldr	r3, [sp, #32]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f adf7 	beq.w	800660a <_strtod_l+0x82>
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a20:	f001 fe78 	bl	8008714 <_Bfree>
 8006a24:	4650      	mov	r0, sl
 8006a26:	9906      	ldr	r1, [sp, #24]
 8006a28:	f001 fe74 	bl	8008714 <_Bfree>
 8006a2c:	4650      	mov	r0, sl
 8006a2e:	9904      	ldr	r1, [sp, #16]
 8006a30:	f001 fe70 	bl	8008714 <_Bfree>
 8006a34:	4650      	mov	r0, sl
 8006a36:	9908      	ldr	r1, [sp, #32]
 8006a38:	f001 fe6c 	bl	8008714 <_Bfree>
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	4650      	mov	r0, sl
 8006a40:	f001 fe68 	bl	8008714 <_Bfree>
 8006a44:	e5e1      	b.n	800660a <_strtod_l+0x82>
 8006a46:	4b35      	ldr	r3, [pc, #212]	; (8006b1c <_strtod_l+0x594>)
 8006a48:	4640      	mov	r0, r8
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4649      	mov	r1, r9
 8006a50:	461f      	mov	r7, r3
 8006a52:	1136      	asrs	r6, r6, #4
 8006a54:	2e01      	cmp	r6, #1
 8006a56:	dc21      	bgt.n	8006a9c <_strtod_l+0x514>
 8006a58:	b10b      	cbz	r3, 8006a5e <_strtod_l+0x4d6>
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	4689      	mov	r9, r1
 8006a5e:	4b2f      	ldr	r3, [pc, #188]	; (8006b1c <_strtod_l+0x594>)
 8006a60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006a68:	4642      	mov	r2, r8
 8006a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a6e:	464b      	mov	r3, r9
 8006a70:	f7f9 fd32 	bl	80004d8 <__aeabi_dmul>
 8006a74:	4b26      	ldr	r3, [pc, #152]	; (8006b10 <_strtod_l+0x588>)
 8006a76:	460a      	mov	r2, r1
 8006a78:	400b      	ands	r3, r1
 8006a7a:	4929      	ldr	r1, [pc, #164]	; (8006b20 <_strtod_l+0x598>)
 8006a7c:	4680      	mov	r8, r0
 8006a7e:	428b      	cmp	r3, r1
 8006a80:	d8b9      	bhi.n	80069f6 <_strtod_l+0x46e>
 8006a82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a86:	428b      	cmp	r3, r1
 8006a88:	bf86      	itte	hi
 8006a8a:	f04f 38ff 	movhi.w	r8, #4294967295
 8006a8e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006b24 <_strtod_l+0x59c>
 8006a92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006a96:	2300      	movs	r3, #0
 8006a98:	9305      	str	r3, [sp, #20]
 8006a9a:	e07f      	b.n	8006b9c <_strtod_l+0x614>
 8006a9c:	07f2      	lsls	r2, r6, #31
 8006a9e:	d505      	bpl.n	8006aac <_strtod_l+0x524>
 8006aa0:	9b05      	ldr	r3, [sp, #20]
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f7f9 fd17 	bl	80004d8 <__aeabi_dmul>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	9a05      	ldr	r2, [sp, #20]
 8006aae:	3701      	adds	r7, #1
 8006ab0:	3208      	adds	r2, #8
 8006ab2:	1076      	asrs	r6, r6, #1
 8006ab4:	9205      	str	r2, [sp, #20]
 8006ab6:	e7cd      	b.n	8006a54 <_strtod_l+0x4cc>
 8006ab8:	d0ed      	beq.n	8006a96 <_strtod_l+0x50e>
 8006aba:	4276      	negs	r6, r6
 8006abc:	f016 020f 	ands.w	r2, r6, #15
 8006ac0:	d00a      	beq.n	8006ad8 <_strtod_l+0x550>
 8006ac2:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <_strtod_l+0x590>)
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aca:	4649      	mov	r1, r9
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f7f9 fe2c 	bl	800072c <__aeabi_ddiv>
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	4689      	mov	r9, r1
 8006ad8:	1136      	asrs	r6, r6, #4
 8006ada:	d0dc      	beq.n	8006a96 <_strtod_l+0x50e>
 8006adc:	2e1f      	cmp	r6, #31
 8006ade:	dd23      	ble.n	8006b28 <_strtod_l+0x5a0>
 8006ae0:	f04f 0b00 	mov.w	fp, #0
 8006ae4:	f8cd b010 	str.w	fp, [sp, #16]
 8006ae8:	f8cd b020 	str.w	fp, [sp, #32]
 8006aec:	f8cd b018 	str.w	fp, [sp, #24]
 8006af0:	2322      	movs	r3, #34	; 0x22
 8006af2:	f04f 0800 	mov.w	r8, #0
 8006af6:	f04f 0900 	mov.w	r9, #0
 8006afa:	f8ca 3000 	str.w	r3, [sl]
 8006afe:	e789      	b.n	8006a14 <_strtod_l+0x48c>
 8006b00:	0800a351 	.word	0x0800a351
 8006b04:	0800a394 	.word	0x0800a394
 8006b08:	0800a349 	.word	0x0800a349
 8006b0c:	0800a4d4 	.word	0x0800a4d4
 8006b10:	7ff00000 	.word	0x7ff00000
 8006b14:	0800a780 	.word	0x0800a780
 8006b18:	0800a660 	.word	0x0800a660
 8006b1c:	0800a638 	.word	0x0800a638
 8006b20:	7ca00000 	.word	0x7ca00000
 8006b24:	7fefffff 	.word	0x7fefffff
 8006b28:	f016 0310 	ands.w	r3, r6, #16
 8006b2c:	bf18      	it	ne
 8006b2e:	236a      	movne	r3, #106	; 0x6a
 8006b30:	4640      	mov	r0, r8
 8006b32:	9305      	str	r3, [sp, #20]
 8006b34:	4649      	mov	r1, r9
 8006b36:	2300      	movs	r3, #0
 8006b38:	4fb0      	ldr	r7, [pc, #704]	; (8006dfc <_strtod_l+0x874>)
 8006b3a:	07f2      	lsls	r2, r6, #31
 8006b3c:	d504      	bpl.n	8006b48 <_strtod_l+0x5c0>
 8006b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b42:	f7f9 fcc9 	bl	80004d8 <__aeabi_dmul>
 8006b46:	2301      	movs	r3, #1
 8006b48:	1076      	asrs	r6, r6, #1
 8006b4a:	f107 0708 	add.w	r7, r7, #8
 8006b4e:	d1f4      	bne.n	8006b3a <_strtod_l+0x5b2>
 8006b50:	b10b      	cbz	r3, 8006b56 <_strtod_l+0x5ce>
 8006b52:	4680      	mov	r8, r0
 8006b54:	4689      	mov	r9, r1
 8006b56:	9b05      	ldr	r3, [sp, #20]
 8006b58:	b1c3      	cbz	r3, 8006b8c <_strtod_l+0x604>
 8006b5a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006b5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	4649      	mov	r1, r9
 8006b66:	dd11      	ble.n	8006b8c <_strtod_l+0x604>
 8006b68:	2b1f      	cmp	r3, #31
 8006b6a:	f340 8127 	ble.w	8006dbc <_strtod_l+0x834>
 8006b6e:	2b34      	cmp	r3, #52	; 0x34
 8006b70:	bfd8      	it	le
 8006b72:	f04f 33ff 	movle.w	r3, #4294967295
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	bfcf      	iteee	gt
 8006b7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b84:	fa03 f202 	lslle.w	r2, r3, r2
 8006b88:	ea02 0901 	andle.w	r9, r2, r1
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2300      	movs	r3, #0
 8006b90:	4640      	mov	r0, r8
 8006b92:	4649      	mov	r1, r9
 8006b94:	f7f9 ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	d1a1      	bne.n	8006ae0 <_strtod_l+0x558>
 8006b9c:	9b06      	ldr	r3, [sp, #24]
 8006b9e:	465a      	mov	r2, fp
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4623      	mov	r3, r4
 8006ba6:	9908      	ldr	r1, [sp, #32]
 8006ba8:	f001 fe1c 	bl	80087e4 <__s2b>
 8006bac:	9008      	str	r0, [sp, #32]
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f43f af21 	beq.w	80069f6 <_strtod_l+0x46e>
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	f04f 0b00 	mov.w	fp, #0
 8006bba:	1b5d      	subs	r5, r3, r5
 8006bbc:	9b07      	ldr	r3, [sp, #28]
 8006bbe:	f8cd b010 	str.w	fp, [sp, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bfb4      	ite	lt
 8006bc6:	462b      	movlt	r3, r5
 8006bc8:	2300      	movge	r3, #0
 8006bca:	930e      	str	r3, [sp, #56]	; 0x38
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006bd2:	9314      	str	r3, [sp, #80]	; 0x50
 8006bd4:	9b08      	ldr	r3, [sp, #32]
 8006bd6:	4650      	mov	r0, sl
 8006bd8:	6859      	ldr	r1, [r3, #4]
 8006bda:	f001 fd5b 	bl	8008694 <_Balloc>
 8006bde:	9006      	str	r0, [sp, #24]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f43f af10 	beq.w	8006a06 <_strtod_l+0x47e>
 8006be6:	9b08      	ldr	r3, [sp, #32]
 8006be8:	300c      	adds	r0, #12
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	f103 010c 	add.w	r1, r3, #12
 8006bf0:	3202      	adds	r2, #2
 8006bf2:	0092      	lsls	r2, r2, #2
 8006bf4:	f001 fd40 	bl	8008678 <memcpy>
 8006bf8:	ab1c      	add	r3, sp, #112	; 0x70
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	ab1b      	add	r3, sp, #108	; 0x6c
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	4642      	mov	r2, r8
 8006c02:	464b      	mov	r3, r9
 8006c04:	4650      	mov	r0, sl
 8006c06:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006c0a:	f002 f92d 	bl	8008e68 <__d2b>
 8006c0e:	901a      	str	r0, [sp, #104]	; 0x68
 8006c10:	2800      	cmp	r0, #0
 8006c12:	f43f aef8 	beq.w	8006a06 <_strtod_l+0x47e>
 8006c16:	2101      	movs	r1, #1
 8006c18:	4650      	mov	r0, sl
 8006c1a:	f001 fe7b 	bl	8008914 <__i2b>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	9004      	str	r0, [sp, #16]
 8006c22:	2800      	cmp	r0, #0
 8006c24:	f43f aeef 	beq.w	8006a06 <_strtod_l+0x47e>
 8006c28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006c2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c2c:	2d00      	cmp	r5, #0
 8006c2e:	bfab      	itete	ge
 8006c30:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006c32:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006c34:	18ee      	addge	r6, r5, r3
 8006c36:	1b5c      	sublt	r4, r3, r5
 8006c38:	9b05      	ldr	r3, [sp, #20]
 8006c3a:	bfa8      	it	ge
 8006c3c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006c3e:	eba5 0503 	sub.w	r5, r5, r3
 8006c42:	4415      	add	r5, r2
 8006c44:	4b6e      	ldr	r3, [pc, #440]	; (8006e00 <_strtod_l+0x878>)
 8006c46:	f105 35ff 	add.w	r5, r5, #4294967295
 8006c4a:	bfb8      	it	lt
 8006c4c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006c4e:	429d      	cmp	r5, r3
 8006c50:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c54:	f280 80c4 	bge.w	8006de0 <_strtod_l+0x858>
 8006c58:	1b5b      	subs	r3, r3, r5
 8006c5a:	2b1f      	cmp	r3, #31
 8006c5c:	f04f 0701 	mov.w	r7, #1
 8006c60:	eba2 0203 	sub.w	r2, r2, r3
 8006c64:	f300 80b1 	bgt.w	8006dca <_strtod_l+0x842>
 8006c68:	2500      	movs	r5, #0
 8006c6a:	fa07 f303 	lsl.w	r3, r7, r3
 8006c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c70:	18b7      	adds	r7, r6, r2
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	42be      	cmp	r6, r7
 8006c76:	4414      	add	r4, r2
 8006c78:	441c      	add	r4, r3
 8006c7a:	4633      	mov	r3, r6
 8006c7c:	bfa8      	it	ge
 8006c7e:	463b      	movge	r3, r7
 8006c80:	42a3      	cmp	r3, r4
 8006c82:	bfa8      	it	ge
 8006c84:	4623      	movge	r3, r4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bfc2      	ittt	gt
 8006c8a:	1aff      	subgt	r7, r7, r3
 8006c8c:	1ae4      	subgt	r4, r4, r3
 8006c8e:	1af6      	subgt	r6, r6, r3
 8006c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	dd17      	ble.n	8006cc6 <_strtod_l+0x73e>
 8006c96:	461a      	mov	r2, r3
 8006c98:	4650      	mov	r0, sl
 8006c9a:	9904      	ldr	r1, [sp, #16]
 8006c9c:	f001 fef8 	bl	8008a90 <__pow5mult>
 8006ca0:	9004      	str	r0, [sp, #16]
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	f43f aeaf 	beq.w	8006a06 <_strtod_l+0x47e>
 8006ca8:	4601      	mov	r1, r0
 8006caa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cac:	4650      	mov	r0, sl
 8006cae:	f001 fe47 	bl	8008940 <__multiply>
 8006cb2:	9009      	str	r0, [sp, #36]	; 0x24
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f43f aea6 	beq.w	8006a06 <_strtod_l+0x47e>
 8006cba:	4650      	mov	r0, sl
 8006cbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006cbe:	f001 fd29 	bl	8008714 <_Bfree>
 8006cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc6:	2f00      	cmp	r7, #0
 8006cc8:	f300 808e 	bgt.w	8006de8 <_strtod_l+0x860>
 8006ccc:	9b07      	ldr	r3, [sp, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	dd08      	ble.n	8006ce4 <_strtod_l+0x75c>
 8006cd2:	4650      	mov	r0, sl
 8006cd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006cd6:	9906      	ldr	r1, [sp, #24]
 8006cd8:	f001 feda 	bl	8008a90 <__pow5mult>
 8006cdc:	9006      	str	r0, [sp, #24]
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f43f ae91 	beq.w	8006a06 <_strtod_l+0x47e>
 8006ce4:	2c00      	cmp	r4, #0
 8006ce6:	dd08      	ble.n	8006cfa <_strtod_l+0x772>
 8006ce8:	4622      	mov	r2, r4
 8006cea:	4650      	mov	r0, sl
 8006cec:	9906      	ldr	r1, [sp, #24]
 8006cee:	f001 ff29 	bl	8008b44 <__lshift>
 8006cf2:	9006      	str	r0, [sp, #24]
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	f43f ae86 	beq.w	8006a06 <_strtod_l+0x47e>
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	dd08      	ble.n	8006d10 <_strtod_l+0x788>
 8006cfe:	4632      	mov	r2, r6
 8006d00:	4650      	mov	r0, sl
 8006d02:	9904      	ldr	r1, [sp, #16]
 8006d04:	f001 ff1e 	bl	8008b44 <__lshift>
 8006d08:	9004      	str	r0, [sp, #16]
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f43f ae7b 	beq.w	8006a06 <_strtod_l+0x47e>
 8006d10:	4650      	mov	r0, sl
 8006d12:	9a06      	ldr	r2, [sp, #24]
 8006d14:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d16:	f001 ffa1 	bl	8008c5c <__mdiff>
 8006d1a:	4683      	mov	fp, r0
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f43f ae72 	beq.w	8006a06 <_strtod_l+0x47e>
 8006d22:	2400      	movs	r4, #0
 8006d24:	68c3      	ldr	r3, [r0, #12]
 8006d26:	9904      	ldr	r1, [sp, #16]
 8006d28:	60c4      	str	r4, [r0, #12]
 8006d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d2c:	f001 ff7a 	bl	8008c24 <__mcmp>
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	da6b      	bge.n	8006e0c <_strtod_l+0x884>
 8006d34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d36:	ea53 0308 	orrs.w	r3, r3, r8
 8006d3a:	f040 8091 	bne.w	8006e60 <_strtod_l+0x8d8>
 8006d3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 808c 	bne.w	8006e60 <_strtod_l+0x8d8>
 8006d48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d4c:	0d1b      	lsrs	r3, r3, #20
 8006d4e:	051b      	lsls	r3, r3, #20
 8006d50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d54:	f240 8084 	bls.w	8006e60 <_strtod_l+0x8d8>
 8006d58:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006d5c:	b91b      	cbnz	r3, 8006d66 <_strtod_l+0x7de>
 8006d5e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	dd7c      	ble.n	8006e60 <_strtod_l+0x8d8>
 8006d66:	4659      	mov	r1, fp
 8006d68:	2201      	movs	r2, #1
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	f001 feea 	bl	8008b44 <__lshift>
 8006d70:	9904      	ldr	r1, [sp, #16]
 8006d72:	4683      	mov	fp, r0
 8006d74:	f001 ff56 	bl	8008c24 <__mcmp>
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	dd71      	ble.n	8006e60 <_strtod_l+0x8d8>
 8006d7c:	9905      	ldr	r1, [sp, #20]
 8006d7e:	464b      	mov	r3, r9
 8006d80:	4a20      	ldr	r2, [pc, #128]	; (8006e04 <_strtod_l+0x87c>)
 8006d82:	2900      	cmp	r1, #0
 8006d84:	f000 808c 	beq.w	8006ea0 <_strtod_l+0x918>
 8006d88:	ea02 0109 	and.w	r1, r2, r9
 8006d8c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d90:	f300 8086 	bgt.w	8006ea0 <_strtod_l+0x918>
 8006d94:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d98:	f77f aeaa 	ble.w	8006af0 <_strtod_l+0x568>
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	4649      	mov	r1, r9
 8006da0:	4b19      	ldr	r3, [pc, #100]	; (8006e08 <_strtod_l+0x880>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	f7f9 fb98 	bl	80004d8 <__aeabi_dmul>
 8006da8:	460b      	mov	r3, r1
 8006daa:	4303      	orrs	r3, r0
 8006dac:	bf08      	it	eq
 8006dae:	2322      	moveq	r3, #34	; 0x22
 8006db0:	4680      	mov	r8, r0
 8006db2:	4689      	mov	r9, r1
 8006db4:	bf08      	it	eq
 8006db6:	f8ca 3000 	streq.w	r3, [sl]
 8006dba:	e62f      	b.n	8006a1c <_strtod_l+0x494>
 8006dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc4:	ea03 0808 	and.w	r8, r3, r8
 8006dc8:	e6e0      	b.n	8006b8c <_strtod_l+0x604>
 8006dca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006dce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006dd2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006dd6:	35e2      	adds	r5, #226	; 0xe2
 8006dd8:	fa07 f505 	lsl.w	r5, r7, r5
 8006ddc:	970f      	str	r7, [sp, #60]	; 0x3c
 8006dde:	e747      	b.n	8006c70 <_strtod_l+0x6e8>
 8006de0:	2301      	movs	r3, #1
 8006de2:	2500      	movs	r5, #0
 8006de4:	930f      	str	r3, [sp, #60]	; 0x3c
 8006de6:	e743      	b.n	8006c70 <_strtod_l+0x6e8>
 8006de8:	463a      	mov	r2, r7
 8006dea:	4650      	mov	r0, sl
 8006dec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006dee:	f001 fea9 	bl	8008b44 <__lshift>
 8006df2:	901a      	str	r0, [sp, #104]	; 0x68
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f47f af69 	bne.w	8006ccc <_strtod_l+0x744>
 8006dfa:	e604      	b.n	8006a06 <_strtod_l+0x47e>
 8006dfc:	0800a3a8 	.word	0x0800a3a8
 8006e00:	fffffc02 	.word	0xfffffc02
 8006e04:	7ff00000 	.word	0x7ff00000
 8006e08:	39500000 	.word	0x39500000
 8006e0c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e10:	d165      	bne.n	8006ede <_strtod_l+0x956>
 8006e12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e18:	b35a      	cbz	r2, 8006e72 <_strtod_l+0x8ea>
 8006e1a:	4a99      	ldr	r2, [pc, #612]	; (8007080 <_strtod_l+0xaf8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d12b      	bne.n	8006e78 <_strtod_l+0x8f0>
 8006e20:	9b05      	ldr	r3, [sp, #20]
 8006e22:	4641      	mov	r1, r8
 8006e24:	b303      	cbz	r3, 8006e68 <_strtod_l+0x8e0>
 8006e26:	464a      	mov	r2, r9
 8006e28:	4b96      	ldr	r3, [pc, #600]	; (8007084 <_strtod_l+0xafc>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e30:	f04f 32ff 	mov.w	r2, #4294967295
 8006e34:	d81b      	bhi.n	8006e6e <_strtod_l+0x8e6>
 8006e36:	0d1b      	lsrs	r3, r3, #20
 8006e38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d119      	bne.n	8006e78 <_strtod_l+0x8f0>
 8006e44:	4b90      	ldr	r3, [pc, #576]	; (8007088 <_strtod_l+0xb00>)
 8006e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d102      	bne.n	8006e52 <_strtod_l+0x8ca>
 8006e4c:	3101      	adds	r1, #1
 8006e4e:	f43f adda 	beq.w	8006a06 <_strtod_l+0x47e>
 8006e52:	f04f 0800 	mov.w	r8, #0
 8006e56:	4b8b      	ldr	r3, [pc, #556]	; (8007084 <_strtod_l+0xafc>)
 8006e58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006e60:	9b05      	ldr	r3, [sp, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d19a      	bne.n	8006d9c <_strtod_l+0x814>
 8006e66:	e5d9      	b.n	8006a1c <_strtod_l+0x494>
 8006e68:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6c:	e7e8      	b.n	8006e40 <_strtod_l+0x8b8>
 8006e6e:	4613      	mov	r3, r2
 8006e70:	e7e6      	b.n	8006e40 <_strtod_l+0x8b8>
 8006e72:	ea53 0308 	orrs.w	r3, r3, r8
 8006e76:	d081      	beq.n	8006d7c <_strtod_l+0x7f4>
 8006e78:	b1e5      	cbz	r5, 8006eb4 <_strtod_l+0x92c>
 8006e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e7c:	421d      	tst	r5, r3
 8006e7e:	d0ef      	beq.n	8006e60 <_strtod_l+0x8d8>
 8006e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	9a05      	ldr	r2, [sp, #20]
 8006e88:	b1c3      	cbz	r3, 8006ebc <_strtod_l+0x934>
 8006e8a:	f7ff fb59 	bl	8006540 <sulp>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e96:	f7f9 f969 	bl	800016c <__adddf3>
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	4689      	mov	r9, r1
 8006e9e:	e7df      	b.n	8006e60 <_strtod_l+0x8d8>
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006ea6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006eaa:	f04f 38ff 	mov.w	r8, #4294967295
 8006eae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006eb2:	e7d5      	b.n	8006e60 <_strtod_l+0x8d8>
 8006eb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eb6:	ea13 0f08 	tst.w	r3, r8
 8006eba:	e7e0      	b.n	8006e7e <_strtod_l+0x8f6>
 8006ebc:	f7ff fb40 	bl	8006540 <sulp>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ec8:	f7f9 f94e 	bl	8000168 <__aeabi_dsub>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2300      	movs	r3, #0
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4689      	mov	r9, r1
 8006ed4:	f7f9 fd68 	bl	80009a8 <__aeabi_dcmpeq>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d0c1      	beq.n	8006e60 <_strtod_l+0x8d8>
 8006edc:	e608      	b.n	8006af0 <_strtod_l+0x568>
 8006ede:	4658      	mov	r0, fp
 8006ee0:	9904      	ldr	r1, [sp, #16]
 8006ee2:	f002 f81d 	bl	8008f20 <__ratio>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006eec:	4606      	mov	r6, r0
 8006eee:	460f      	mov	r7, r1
 8006ef0:	f7f9 fd6e 	bl	80009d0 <__aeabi_dcmple>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d070      	beq.n	8006fda <_strtod_l+0xa52>
 8006ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d042      	beq.n	8006f84 <_strtod_l+0x9fc>
 8006efe:	2600      	movs	r6, #0
 8006f00:	4f62      	ldr	r7, [pc, #392]	; (800708c <_strtod_l+0xb04>)
 8006f02:	4d62      	ldr	r5, [pc, #392]	; (800708c <_strtod_l+0xb04>)
 8006f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f0a:	0d1b      	lsrs	r3, r3, #20
 8006f0c:	051b      	lsls	r3, r3, #20
 8006f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f12:	4b5f      	ldr	r3, [pc, #380]	; (8007090 <_strtod_l+0xb08>)
 8006f14:	429a      	cmp	r2, r3
 8006f16:	f040 80c3 	bne.w	80070a0 <_strtod_l+0xb18>
 8006f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006f22:	4649      	mov	r1, r9
 8006f24:	f001 ff26 	bl	8008d74 <__ulp>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	4639      	mov	r1, r7
 8006f30:	f7f9 fad2 	bl	80004d8 <__aeabi_dmul>
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	f7f9 f918 	bl	800016c <__adddf3>
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4951      	ldr	r1, [pc, #324]	; (8007084 <_strtod_l+0xafc>)
 8006f40:	4a54      	ldr	r2, [pc, #336]	; (8007094 <_strtod_l+0xb0c>)
 8006f42:	4019      	ands	r1, r3
 8006f44:	4291      	cmp	r1, r2
 8006f46:	4680      	mov	r8, r0
 8006f48:	d95d      	bls.n	8007006 <_strtod_l+0xa7e>
 8006f4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f4c:	4b4e      	ldr	r3, [pc, #312]	; (8007088 <_strtod_l+0xb00>)
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d103      	bne.n	8006f5a <_strtod_l+0x9d2>
 8006f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f54:	3301      	adds	r3, #1
 8006f56:	f43f ad56 	beq.w	8006a06 <_strtod_l+0x47e>
 8006f5a:	f04f 38ff 	mov.w	r8, #4294967295
 8006f5e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007088 <_strtod_l+0xb00>
 8006f62:	4650      	mov	r0, sl
 8006f64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f66:	f001 fbd5 	bl	8008714 <_Bfree>
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	9906      	ldr	r1, [sp, #24]
 8006f6e:	f001 fbd1 	bl	8008714 <_Bfree>
 8006f72:	4650      	mov	r0, sl
 8006f74:	9904      	ldr	r1, [sp, #16]
 8006f76:	f001 fbcd 	bl	8008714 <_Bfree>
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	4650      	mov	r0, sl
 8006f7e:	f001 fbc9 	bl	8008714 <_Bfree>
 8006f82:	e627      	b.n	8006bd4 <_strtod_l+0x64c>
 8006f84:	f1b8 0f00 	cmp.w	r8, #0
 8006f88:	d119      	bne.n	8006fbe <_strtod_l+0xa36>
 8006f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f90:	b9e3      	cbnz	r3, 8006fcc <_strtod_l+0xa44>
 8006f92:	2200      	movs	r2, #0
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	4b3c      	ldr	r3, [pc, #240]	; (800708c <_strtod_l+0xb04>)
 8006f9a:	f7f9 fd0f 	bl	80009bc <__aeabi_dcmplt>
 8006f9e:	b9c8      	cbnz	r0, 8006fd4 <_strtod_l+0xa4c>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	4b3c      	ldr	r3, [pc, #240]	; (8007098 <_strtod_l+0xb10>)
 8006fa8:	f7f9 fa96 	bl	80004d8 <__aeabi_dmul>
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006fb4:	9416      	str	r4, [sp, #88]	; 0x58
 8006fb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006fb8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006fbc:	e7a2      	b.n	8006f04 <_strtod_l+0x97c>
 8006fbe:	f1b8 0f01 	cmp.w	r8, #1
 8006fc2:	d103      	bne.n	8006fcc <_strtod_l+0xa44>
 8006fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f43f ad92 	beq.w	8006af0 <_strtod_l+0x568>
 8006fcc:	2600      	movs	r6, #0
 8006fce:	2400      	movs	r4, #0
 8006fd0:	4f32      	ldr	r7, [pc, #200]	; (800709c <_strtod_l+0xb14>)
 8006fd2:	e796      	b.n	8006f02 <_strtod_l+0x97a>
 8006fd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006fd6:	4d30      	ldr	r5, [pc, #192]	; (8007098 <_strtod_l+0xb10>)
 8006fd8:	e7ea      	b.n	8006fb0 <_strtod_l+0xa28>
 8006fda:	4b2f      	ldr	r3, [pc, #188]	; (8007098 <_strtod_l+0xb10>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4630      	mov	r0, r6
 8006fe0:	4639      	mov	r1, r7
 8006fe2:	f7f9 fa79 	bl	80004d8 <__aeabi_dmul>
 8006fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fe8:	4604      	mov	r4, r0
 8006fea:	460d      	mov	r5, r1
 8006fec:	b933      	cbnz	r3, 8006ffc <_strtod_l+0xa74>
 8006fee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ff2:	9010      	str	r0, [sp, #64]	; 0x40
 8006ff4:	9311      	str	r3, [sp, #68]	; 0x44
 8006ff6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ffa:	e783      	b.n	8006f04 <_strtod_l+0x97c>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007004:	e7f7      	b.n	8006ff6 <_strtod_l+0xa6e>
 8007006:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800700a:	9b05      	ldr	r3, [sp, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1a8      	bne.n	8006f62 <_strtod_l+0x9da>
 8007010:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007014:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007016:	0d1b      	lsrs	r3, r3, #20
 8007018:	051b      	lsls	r3, r3, #20
 800701a:	429a      	cmp	r2, r3
 800701c:	d1a1      	bne.n	8006f62 <_strtod_l+0x9da>
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 feaf 	bl	8000d84 <__aeabi_d2lz>
 8007026:	f7f9 fa29 	bl	800047c <__aeabi_l2d>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4620      	mov	r0, r4
 8007030:	4629      	mov	r1, r5
 8007032:	f7f9 f899 	bl	8000168 <__aeabi_dsub>
 8007036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007038:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800703c:	ea43 0308 	orr.w	r3, r3, r8
 8007040:	4313      	orrs	r3, r2
 8007042:	4604      	mov	r4, r0
 8007044:	460d      	mov	r5, r1
 8007046:	d066      	beq.n	8007116 <_strtod_l+0xb8e>
 8007048:	a309      	add	r3, pc, #36	; (adr r3, 8007070 <_strtod_l+0xae8>)
 800704a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704e:	f7f9 fcb5 	bl	80009bc <__aeabi_dcmplt>
 8007052:	2800      	cmp	r0, #0
 8007054:	f47f ace2 	bne.w	8006a1c <_strtod_l+0x494>
 8007058:	a307      	add	r3, pc, #28	; (adr r3, 8007078 <_strtod_l+0xaf0>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	4620      	mov	r0, r4
 8007060:	4629      	mov	r1, r5
 8007062:	f7f9 fcc9 	bl	80009f8 <__aeabi_dcmpgt>
 8007066:	2800      	cmp	r0, #0
 8007068:	f43f af7b 	beq.w	8006f62 <_strtod_l+0x9da>
 800706c:	e4d6      	b.n	8006a1c <_strtod_l+0x494>
 800706e:	bf00      	nop
 8007070:	94a03595 	.word	0x94a03595
 8007074:	3fdfffff 	.word	0x3fdfffff
 8007078:	35afe535 	.word	0x35afe535
 800707c:	3fe00000 	.word	0x3fe00000
 8007080:	000fffff 	.word	0x000fffff
 8007084:	7ff00000 	.word	0x7ff00000
 8007088:	7fefffff 	.word	0x7fefffff
 800708c:	3ff00000 	.word	0x3ff00000
 8007090:	7fe00000 	.word	0x7fe00000
 8007094:	7c9fffff 	.word	0x7c9fffff
 8007098:	3fe00000 	.word	0x3fe00000
 800709c:	bff00000 	.word	0xbff00000
 80070a0:	9b05      	ldr	r3, [sp, #20]
 80070a2:	b313      	cbz	r3, 80070ea <_strtod_l+0xb62>
 80070a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070aa:	d81e      	bhi.n	80070ea <_strtod_l+0xb62>
 80070ac:	a326      	add	r3, pc, #152	; (adr r3, 8007148 <_strtod_l+0xbc0>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	f7f9 fc8b 	bl	80009d0 <__aeabi_dcmple>
 80070ba:	b190      	cbz	r0, 80070e2 <_strtod_l+0xb5a>
 80070bc:	4629      	mov	r1, r5
 80070be:	4620      	mov	r0, r4
 80070c0:	f7f9 fce2 	bl	8000a88 <__aeabi_d2uiz>
 80070c4:	2801      	cmp	r0, #1
 80070c6:	bf38      	it	cc
 80070c8:	2001      	movcc	r0, #1
 80070ca:	f7f9 f98b 	bl	80003e4 <__aeabi_ui2d>
 80070ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	b9d3      	cbnz	r3, 800710c <_strtod_l+0xb84>
 80070d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070da:	9012      	str	r0, [sp, #72]	; 0x48
 80070dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80070de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80070e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80070e8:	1a9f      	subs	r7, r3, r2
 80070ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070ee:	f001 fe41 	bl	8008d74 <__ulp>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4630      	mov	r0, r6
 80070f8:	4639      	mov	r1, r7
 80070fa:	f7f9 f9ed 	bl	80004d8 <__aeabi_dmul>
 80070fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007102:	f7f9 f833 	bl	800016c <__adddf3>
 8007106:	4680      	mov	r8, r0
 8007108:	4689      	mov	r9, r1
 800710a:	e77e      	b.n	800700a <_strtod_l+0xa82>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007114:	e7e3      	b.n	80070de <_strtod_l+0xb56>
 8007116:	a30e      	add	r3, pc, #56	; (adr r3, 8007150 <_strtod_l+0xbc8>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f7f9 fc4e 	bl	80009bc <__aeabi_dcmplt>
 8007120:	e7a1      	b.n	8007066 <_strtod_l+0xade>
 8007122:	2300      	movs	r3, #0
 8007124:	930a      	str	r3, [sp, #40]	; 0x28
 8007126:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007128:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	f7ff ba71 	b.w	8006612 <_strtod_l+0x8a>
 8007130:	2a65      	cmp	r2, #101	; 0x65
 8007132:	f43f ab63 	beq.w	80067fc <_strtod_l+0x274>
 8007136:	2a45      	cmp	r2, #69	; 0x45
 8007138:	f43f ab60 	beq.w	80067fc <_strtod_l+0x274>
 800713c:	2301      	movs	r3, #1
 800713e:	f7ff bb95 	b.w	800686c <_strtod_l+0x2e4>
 8007142:	bf00      	nop
 8007144:	f3af 8000 	nop.w
 8007148:	ffc00000 	.word	0xffc00000
 800714c:	41dfffff 	.word	0x41dfffff
 8007150:	94a03595 	.word	0x94a03595
 8007154:	3fcfffff 	.word	0x3fcfffff

08007158 <_strtod_r>:
 8007158:	4b01      	ldr	r3, [pc, #4]	; (8007160 <_strtod_r+0x8>)
 800715a:	f7ff ba15 	b.w	8006588 <_strtod_l>
 800715e:	bf00      	nop
 8007160:	20000074 	.word	0x20000074

08007164 <_strtol_l.constprop.0>:
 8007164:	2b01      	cmp	r3, #1
 8007166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800716a:	4680      	mov	r8, r0
 800716c:	d001      	beq.n	8007172 <_strtol_l.constprop.0+0xe>
 800716e:	2b24      	cmp	r3, #36	; 0x24
 8007170:	d906      	bls.n	8007180 <_strtol_l.constprop.0+0x1c>
 8007172:	f7fe fb21 	bl	80057b8 <__errno>
 8007176:	2316      	movs	r3, #22
 8007178:	6003      	str	r3, [r0, #0]
 800717a:	2000      	movs	r0, #0
 800717c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007180:	460d      	mov	r5, r1
 8007182:	4f35      	ldr	r7, [pc, #212]	; (8007258 <_strtol_l.constprop.0+0xf4>)
 8007184:	4628      	mov	r0, r5
 8007186:	f815 4b01 	ldrb.w	r4, [r5], #1
 800718a:	5de6      	ldrb	r6, [r4, r7]
 800718c:	f016 0608 	ands.w	r6, r6, #8
 8007190:	d1f8      	bne.n	8007184 <_strtol_l.constprop.0+0x20>
 8007192:	2c2d      	cmp	r4, #45	; 0x2d
 8007194:	d12f      	bne.n	80071f6 <_strtol_l.constprop.0+0x92>
 8007196:	2601      	movs	r6, #1
 8007198:	782c      	ldrb	r4, [r5, #0]
 800719a:	1c85      	adds	r5, r0, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d057      	beq.n	8007250 <_strtol_l.constprop.0+0xec>
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	d109      	bne.n	80071b8 <_strtol_l.constprop.0+0x54>
 80071a4:	2c30      	cmp	r4, #48	; 0x30
 80071a6:	d107      	bne.n	80071b8 <_strtol_l.constprop.0+0x54>
 80071a8:	7828      	ldrb	r0, [r5, #0]
 80071aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80071ae:	2858      	cmp	r0, #88	; 0x58
 80071b0:	d149      	bne.n	8007246 <_strtol_l.constprop.0+0xe2>
 80071b2:	2310      	movs	r3, #16
 80071b4:	786c      	ldrb	r4, [r5, #1]
 80071b6:	3502      	adds	r5, #2
 80071b8:	2700      	movs	r7, #0
 80071ba:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80071be:	f10e 3eff 	add.w	lr, lr, #4294967295
 80071c2:	fbbe f9f3 	udiv	r9, lr, r3
 80071c6:	4638      	mov	r0, r7
 80071c8:	fb03 ea19 	mls	sl, r3, r9, lr
 80071cc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80071d0:	f1bc 0f09 	cmp.w	ip, #9
 80071d4:	d814      	bhi.n	8007200 <_strtol_l.constprop.0+0x9c>
 80071d6:	4664      	mov	r4, ip
 80071d8:	42a3      	cmp	r3, r4
 80071da:	dd22      	ble.n	8007222 <_strtol_l.constprop.0+0xbe>
 80071dc:	2f00      	cmp	r7, #0
 80071de:	db1d      	blt.n	800721c <_strtol_l.constprop.0+0xb8>
 80071e0:	4581      	cmp	r9, r0
 80071e2:	d31b      	bcc.n	800721c <_strtol_l.constprop.0+0xb8>
 80071e4:	d101      	bne.n	80071ea <_strtol_l.constprop.0+0x86>
 80071e6:	45a2      	cmp	sl, r4
 80071e8:	db18      	blt.n	800721c <_strtol_l.constprop.0+0xb8>
 80071ea:	2701      	movs	r7, #1
 80071ec:	fb00 4003 	mla	r0, r0, r3, r4
 80071f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071f4:	e7ea      	b.n	80071cc <_strtol_l.constprop.0+0x68>
 80071f6:	2c2b      	cmp	r4, #43	; 0x2b
 80071f8:	bf04      	itt	eq
 80071fa:	782c      	ldrbeq	r4, [r5, #0]
 80071fc:	1c85      	addeq	r5, r0, #2
 80071fe:	e7cd      	b.n	800719c <_strtol_l.constprop.0+0x38>
 8007200:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007204:	f1bc 0f19 	cmp.w	ip, #25
 8007208:	d801      	bhi.n	800720e <_strtol_l.constprop.0+0xaa>
 800720a:	3c37      	subs	r4, #55	; 0x37
 800720c:	e7e4      	b.n	80071d8 <_strtol_l.constprop.0+0x74>
 800720e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007212:	f1bc 0f19 	cmp.w	ip, #25
 8007216:	d804      	bhi.n	8007222 <_strtol_l.constprop.0+0xbe>
 8007218:	3c57      	subs	r4, #87	; 0x57
 800721a:	e7dd      	b.n	80071d8 <_strtol_l.constprop.0+0x74>
 800721c:	f04f 37ff 	mov.w	r7, #4294967295
 8007220:	e7e6      	b.n	80071f0 <_strtol_l.constprop.0+0x8c>
 8007222:	2f00      	cmp	r7, #0
 8007224:	da07      	bge.n	8007236 <_strtol_l.constprop.0+0xd2>
 8007226:	2322      	movs	r3, #34	; 0x22
 8007228:	4670      	mov	r0, lr
 800722a:	f8c8 3000 	str.w	r3, [r8]
 800722e:	2a00      	cmp	r2, #0
 8007230:	d0a4      	beq.n	800717c <_strtol_l.constprop.0+0x18>
 8007232:	1e69      	subs	r1, r5, #1
 8007234:	e005      	b.n	8007242 <_strtol_l.constprop.0+0xde>
 8007236:	b106      	cbz	r6, 800723a <_strtol_l.constprop.0+0xd6>
 8007238:	4240      	negs	r0, r0
 800723a:	2a00      	cmp	r2, #0
 800723c:	d09e      	beq.n	800717c <_strtol_l.constprop.0+0x18>
 800723e:	2f00      	cmp	r7, #0
 8007240:	d1f7      	bne.n	8007232 <_strtol_l.constprop.0+0xce>
 8007242:	6011      	str	r1, [r2, #0]
 8007244:	e79a      	b.n	800717c <_strtol_l.constprop.0+0x18>
 8007246:	2430      	movs	r4, #48	; 0x30
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1b5      	bne.n	80071b8 <_strtol_l.constprop.0+0x54>
 800724c:	2308      	movs	r3, #8
 800724e:	e7b3      	b.n	80071b8 <_strtol_l.constprop.0+0x54>
 8007250:	2c30      	cmp	r4, #48	; 0x30
 8007252:	d0a9      	beq.n	80071a8 <_strtol_l.constprop.0+0x44>
 8007254:	230a      	movs	r3, #10
 8007256:	e7af      	b.n	80071b8 <_strtol_l.constprop.0+0x54>
 8007258:	0800a3d1 	.word	0x0800a3d1

0800725c <_strtol_r>:
 800725c:	f7ff bf82 	b.w	8007164 <_strtol_l.constprop.0>

08007260 <quorem>:
 8007260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	6903      	ldr	r3, [r0, #16]
 8007266:	690c      	ldr	r4, [r1, #16]
 8007268:	4607      	mov	r7, r0
 800726a:	42a3      	cmp	r3, r4
 800726c:	f2c0 8082 	blt.w	8007374 <quorem+0x114>
 8007270:	3c01      	subs	r4, #1
 8007272:	f100 0514 	add.w	r5, r0, #20
 8007276:	f101 0814 	add.w	r8, r1, #20
 800727a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007288:	3301      	adds	r3, #1
 800728a:	429a      	cmp	r2, r3
 800728c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007290:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007294:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007298:	d331      	bcc.n	80072fe <quorem+0x9e>
 800729a:	f04f 0e00 	mov.w	lr, #0
 800729e:	4640      	mov	r0, r8
 80072a0:	46ac      	mov	ip, r5
 80072a2:	46f2      	mov	sl, lr
 80072a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80072a8:	b293      	uxth	r3, r2
 80072aa:	fb06 e303 	mla	r3, r6, r3, lr
 80072ae:	0c12      	lsrs	r2, r2, #16
 80072b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	fb06 e202 	mla	r2, r6, r2, lr
 80072ba:	ebaa 0303 	sub.w	r3, sl, r3
 80072be:	f8dc a000 	ldr.w	sl, [ip]
 80072c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072c6:	fa1f fa8a 	uxth.w	sl, sl
 80072ca:	4453      	add	r3, sl
 80072cc:	f8dc a000 	ldr.w	sl, [ip]
 80072d0:	b292      	uxth	r2, r2
 80072d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80072d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072da:	b29b      	uxth	r3, r3
 80072dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072e0:	4581      	cmp	r9, r0
 80072e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072e6:	f84c 3b04 	str.w	r3, [ip], #4
 80072ea:	d2db      	bcs.n	80072a4 <quorem+0x44>
 80072ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80072f0:	b92b      	cbnz	r3, 80072fe <quorem+0x9e>
 80072f2:	9b01      	ldr	r3, [sp, #4]
 80072f4:	3b04      	subs	r3, #4
 80072f6:	429d      	cmp	r5, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	d32f      	bcc.n	800735c <quorem+0xfc>
 80072fc:	613c      	str	r4, [r7, #16]
 80072fe:	4638      	mov	r0, r7
 8007300:	f001 fc90 	bl	8008c24 <__mcmp>
 8007304:	2800      	cmp	r0, #0
 8007306:	db25      	blt.n	8007354 <quorem+0xf4>
 8007308:	4628      	mov	r0, r5
 800730a:	f04f 0c00 	mov.w	ip, #0
 800730e:	3601      	adds	r6, #1
 8007310:	f858 1b04 	ldr.w	r1, [r8], #4
 8007314:	f8d0 e000 	ldr.w	lr, [r0]
 8007318:	b28b      	uxth	r3, r1
 800731a:	ebac 0303 	sub.w	r3, ip, r3
 800731e:	fa1f f28e 	uxth.w	r2, lr
 8007322:	4413      	add	r3, r2
 8007324:	0c0a      	lsrs	r2, r1, #16
 8007326:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800732a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800732e:	b29b      	uxth	r3, r3
 8007330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007334:	45c1      	cmp	r9, r8
 8007336:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800733a:	f840 3b04 	str.w	r3, [r0], #4
 800733e:	d2e7      	bcs.n	8007310 <quorem+0xb0>
 8007340:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007344:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007348:	b922      	cbnz	r2, 8007354 <quorem+0xf4>
 800734a:	3b04      	subs	r3, #4
 800734c:	429d      	cmp	r5, r3
 800734e:	461a      	mov	r2, r3
 8007350:	d30a      	bcc.n	8007368 <quorem+0x108>
 8007352:	613c      	str	r4, [r7, #16]
 8007354:	4630      	mov	r0, r6
 8007356:	b003      	add	sp, #12
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	6812      	ldr	r2, [r2, #0]
 800735e:	3b04      	subs	r3, #4
 8007360:	2a00      	cmp	r2, #0
 8007362:	d1cb      	bne.n	80072fc <quorem+0x9c>
 8007364:	3c01      	subs	r4, #1
 8007366:	e7c6      	b.n	80072f6 <quorem+0x96>
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	3b04      	subs	r3, #4
 800736c:	2a00      	cmp	r2, #0
 800736e:	d1f0      	bne.n	8007352 <quorem+0xf2>
 8007370:	3c01      	subs	r4, #1
 8007372:	e7eb      	b.n	800734c <quorem+0xec>
 8007374:	2000      	movs	r0, #0
 8007376:	e7ee      	b.n	8007356 <quorem+0xf6>

08007378 <_dtoa_r>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	4616      	mov	r6, r2
 800737e:	461f      	mov	r7, r3
 8007380:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007382:	b099      	sub	sp, #100	; 0x64
 8007384:	4605      	mov	r5, r0
 8007386:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800738a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800738e:	b974      	cbnz	r4, 80073ae <_dtoa_r+0x36>
 8007390:	2010      	movs	r0, #16
 8007392:	f001 f949 	bl	8008628 <malloc>
 8007396:	4602      	mov	r2, r0
 8007398:	6268      	str	r0, [r5, #36]	; 0x24
 800739a:	b920      	cbnz	r0, 80073a6 <_dtoa_r+0x2e>
 800739c:	21ea      	movs	r1, #234	; 0xea
 800739e:	4ba8      	ldr	r3, [pc, #672]	; (8007640 <_dtoa_r+0x2c8>)
 80073a0:	48a8      	ldr	r0, [pc, #672]	; (8007644 <_dtoa_r+0x2cc>)
 80073a2:	f002 f8b3 	bl	800950c <__assert_func>
 80073a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073aa:	6004      	str	r4, [r0, #0]
 80073ac:	60c4      	str	r4, [r0, #12]
 80073ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073b0:	6819      	ldr	r1, [r3, #0]
 80073b2:	b151      	cbz	r1, 80073ca <_dtoa_r+0x52>
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	2301      	movs	r3, #1
 80073b8:	4093      	lsls	r3, r2
 80073ba:	604a      	str	r2, [r1, #4]
 80073bc:	608b      	str	r3, [r1, #8]
 80073be:	4628      	mov	r0, r5
 80073c0:	f001 f9a8 	bl	8008714 <_Bfree>
 80073c4:	2200      	movs	r2, #0
 80073c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	1e3b      	subs	r3, r7, #0
 80073cc:	bfaf      	iteee	ge
 80073ce:	2300      	movge	r3, #0
 80073d0:	2201      	movlt	r2, #1
 80073d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073d6:	9305      	strlt	r3, [sp, #20]
 80073d8:	bfa8      	it	ge
 80073da:	f8c8 3000 	strge.w	r3, [r8]
 80073de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80073e2:	4b99      	ldr	r3, [pc, #612]	; (8007648 <_dtoa_r+0x2d0>)
 80073e4:	bfb8      	it	lt
 80073e6:	f8c8 2000 	strlt.w	r2, [r8]
 80073ea:	ea33 0309 	bics.w	r3, r3, r9
 80073ee:	d119      	bne.n	8007424 <_dtoa_r+0xac>
 80073f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80073f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073fc:	4333      	orrs	r3, r6
 80073fe:	f000 857f 	beq.w	8007f00 <_dtoa_r+0xb88>
 8007402:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007404:	b953      	cbnz	r3, 800741c <_dtoa_r+0xa4>
 8007406:	4b91      	ldr	r3, [pc, #580]	; (800764c <_dtoa_r+0x2d4>)
 8007408:	e022      	b.n	8007450 <_dtoa_r+0xd8>
 800740a:	4b91      	ldr	r3, [pc, #580]	; (8007650 <_dtoa_r+0x2d8>)
 800740c:	9303      	str	r3, [sp, #12]
 800740e:	3308      	adds	r3, #8
 8007410:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	9803      	ldr	r0, [sp, #12]
 8007416:	b019      	add	sp, #100	; 0x64
 8007418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741c:	4b8b      	ldr	r3, [pc, #556]	; (800764c <_dtoa_r+0x2d4>)
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	3303      	adds	r3, #3
 8007422:	e7f5      	b.n	8007410 <_dtoa_r+0x98>
 8007424:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007428:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800742c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007430:	2200      	movs	r2, #0
 8007432:	2300      	movs	r3, #0
 8007434:	f7f9 fab8 	bl	80009a8 <__aeabi_dcmpeq>
 8007438:	4680      	mov	r8, r0
 800743a:	b158      	cbz	r0, 8007454 <_dtoa_r+0xdc>
 800743c:	2301      	movs	r3, #1
 800743e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8558 	beq.w	8007efa <_dtoa_r+0xb82>
 800744a:	4882      	ldr	r0, [pc, #520]	; (8007654 <_dtoa_r+0x2dc>)
 800744c:	6018      	str	r0, [r3, #0]
 800744e:	1e43      	subs	r3, r0, #1
 8007450:	9303      	str	r3, [sp, #12]
 8007452:	e7df      	b.n	8007414 <_dtoa_r+0x9c>
 8007454:	ab16      	add	r3, sp, #88	; 0x58
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	ab17      	add	r3, sp, #92	; 0x5c
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	4628      	mov	r0, r5
 800745e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007462:	f001 fd01 	bl	8008e68 <__d2b>
 8007466:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800746a:	4683      	mov	fp, r0
 800746c:	2c00      	cmp	r4, #0
 800746e:	d07f      	beq.n	8007570 <_dtoa_r+0x1f8>
 8007470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007476:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800747a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800747e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007482:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007486:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800748a:	2200      	movs	r2, #0
 800748c:	4b72      	ldr	r3, [pc, #456]	; (8007658 <_dtoa_r+0x2e0>)
 800748e:	f7f8 fe6b 	bl	8000168 <__aeabi_dsub>
 8007492:	a365      	add	r3, pc, #404	; (adr r3, 8007628 <_dtoa_r+0x2b0>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f9 f81e 	bl	80004d8 <__aeabi_dmul>
 800749c:	a364      	add	r3, pc, #400	; (adr r3, 8007630 <_dtoa_r+0x2b8>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fe63 	bl	800016c <__adddf3>
 80074a6:	4606      	mov	r6, r0
 80074a8:	4620      	mov	r0, r4
 80074aa:	460f      	mov	r7, r1
 80074ac:	f7f8 ffaa 	bl	8000404 <__aeabi_i2d>
 80074b0:	a361      	add	r3, pc, #388	; (adr r3, 8007638 <_dtoa_r+0x2c0>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f7f9 f80f 	bl	80004d8 <__aeabi_dmul>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4630      	mov	r0, r6
 80074c0:	4639      	mov	r1, r7
 80074c2:	f7f8 fe53 	bl	800016c <__adddf3>
 80074c6:	4606      	mov	r6, r0
 80074c8:	460f      	mov	r7, r1
 80074ca:	f7f9 fab5 	bl	8000a38 <__aeabi_d2iz>
 80074ce:	2200      	movs	r2, #0
 80074d0:	4682      	mov	sl, r0
 80074d2:	2300      	movs	r3, #0
 80074d4:	4630      	mov	r0, r6
 80074d6:	4639      	mov	r1, r7
 80074d8:	f7f9 fa70 	bl	80009bc <__aeabi_dcmplt>
 80074dc:	b148      	cbz	r0, 80074f2 <_dtoa_r+0x17a>
 80074de:	4650      	mov	r0, sl
 80074e0:	f7f8 ff90 	bl	8000404 <__aeabi_i2d>
 80074e4:	4632      	mov	r2, r6
 80074e6:	463b      	mov	r3, r7
 80074e8:	f7f9 fa5e 	bl	80009a8 <__aeabi_dcmpeq>
 80074ec:	b908      	cbnz	r0, 80074f2 <_dtoa_r+0x17a>
 80074ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074f2:	f1ba 0f16 	cmp.w	sl, #22
 80074f6:	d858      	bhi.n	80075aa <_dtoa_r+0x232>
 80074f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074fc:	4b57      	ldr	r3, [pc, #348]	; (800765c <_dtoa_r+0x2e4>)
 80074fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 fa59 	bl	80009bc <__aeabi_dcmplt>
 800750a:	2800      	cmp	r0, #0
 800750c:	d04f      	beq.n	80075ae <_dtoa_r+0x236>
 800750e:	2300      	movs	r3, #0
 8007510:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007514:	930f      	str	r3, [sp, #60]	; 0x3c
 8007516:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007518:	1b1c      	subs	r4, r3, r4
 800751a:	1e63      	subs	r3, r4, #1
 800751c:	9309      	str	r3, [sp, #36]	; 0x24
 800751e:	bf49      	itett	mi
 8007520:	f1c4 0301 	rsbmi	r3, r4, #1
 8007524:	2300      	movpl	r3, #0
 8007526:	9306      	strmi	r3, [sp, #24]
 8007528:	2300      	movmi	r3, #0
 800752a:	bf54      	ite	pl
 800752c:	9306      	strpl	r3, [sp, #24]
 800752e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007530:	f1ba 0f00 	cmp.w	sl, #0
 8007534:	db3d      	blt.n	80075b2 <_dtoa_r+0x23a>
 8007536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007538:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800753c:	4453      	add	r3, sl
 800753e:	9309      	str	r3, [sp, #36]	; 0x24
 8007540:	2300      	movs	r3, #0
 8007542:	930a      	str	r3, [sp, #40]	; 0x28
 8007544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007546:	2b09      	cmp	r3, #9
 8007548:	f200 808c 	bhi.w	8007664 <_dtoa_r+0x2ec>
 800754c:	2b05      	cmp	r3, #5
 800754e:	bfc4      	itt	gt
 8007550:	3b04      	subgt	r3, #4
 8007552:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007556:	bfc8      	it	gt
 8007558:	2400      	movgt	r4, #0
 800755a:	f1a3 0302 	sub.w	r3, r3, #2
 800755e:	bfd8      	it	le
 8007560:	2401      	movle	r4, #1
 8007562:	2b03      	cmp	r3, #3
 8007564:	f200 808a 	bhi.w	800767c <_dtoa_r+0x304>
 8007568:	e8df f003 	tbb	[pc, r3]
 800756c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007570:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007574:	441c      	add	r4, r3
 8007576:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800757a:	2b20      	cmp	r3, #32
 800757c:	bfc3      	ittte	gt
 800757e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007582:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007586:	fa09 f303 	lslgt.w	r3, r9, r3
 800758a:	f1c3 0320 	rsble	r3, r3, #32
 800758e:	bfc6      	itte	gt
 8007590:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007594:	4318      	orrgt	r0, r3
 8007596:	fa06 f003 	lslle.w	r0, r6, r3
 800759a:	f7f8 ff23 	bl	80003e4 <__aeabi_ui2d>
 800759e:	2301      	movs	r3, #1
 80075a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80075a4:	3c01      	subs	r4, #1
 80075a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80075a8:	e76f      	b.n	800748a <_dtoa_r+0x112>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e7b2      	b.n	8007514 <_dtoa_r+0x19c>
 80075ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80075b0:	e7b1      	b.n	8007516 <_dtoa_r+0x19e>
 80075b2:	9b06      	ldr	r3, [sp, #24]
 80075b4:	eba3 030a 	sub.w	r3, r3, sl
 80075b8:	9306      	str	r3, [sp, #24]
 80075ba:	f1ca 0300 	rsb	r3, sl, #0
 80075be:	930a      	str	r3, [sp, #40]	; 0x28
 80075c0:	2300      	movs	r3, #0
 80075c2:	930e      	str	r3, [sp, #56]	; 0x38
 80075c4:	e7be      	b.n	8007544 <_dtoa_r+0x1cc>
 80075c6:	2300      	movs	r3, #0
 80075c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dc58      	bgt.n	8007682 <_dtoa_r+0x30a>
 80075d0:	f04f 0901 	mov.w	r9, #1
 80075d4:	464b      	mov	r3, r9
 80075d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80075da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80075de:	2200      	movs	r2, #0
 80075e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80075e2:	6042      	str	r2, [r0, #4]
 80075e4:	2204      	movs	r2, #4
 80075e6:	f102 0614 	add.w	r6, r2, #20
 80075ea:	429e      	cmp	r6, r3
 80075ec:	6841      	ldr	r1, [r0, #4]
 80075ee:	d94e      	bls.n	800768e <_dtoa_r+0x316>
 80075f0:	4628      	mov	r0, r5
 80075f2:	f001 f84f 	bl	8008694 <_Balloc>
 80075f6:	9003      	str	r0, [sp, #12]
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d14c      	bne.n	8007696 <_dtoa_r+0x31e>
 80075fc:	4602      	mov	r2, r0
 80075fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007602:	4b17      	ldr	r3, [pc, #92]	; (8007660 <_dtoa_r+0x2e8>)
 8007604:	e6cc      	b.n	80073a0 <_dtoa_r+0x28>
 8007606:	2301      	movs	r3, #1
 8007608:	e7de      	b.n	80075c8 <_dtoa_r+0x250>
 800760a:	2300      	movs	r3, #0
 800760c:	930b      	str	r3, [sp, #44]	; 0x2c
 800760e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007610:	eb0a 0903 	add.w	r9, sl, r3
 8007614:	f109 0301 	add.w	r3, r9, #1
 8007618:	2b01      	cmp	r3, #1
 800761a:	9308      	str	r3, [sp, #32]
 800761c:	bfb8      	it	lt
 800761e:	2301      	movlt	r3, #1
 8007620:	e7dd      	b.n	80075de <_dtoa_r+0x266>
 8007622:	2301      	movs	r3, #1
 8007624:	e7f2      	b.n	800760c <_dtoa_r+0x294>
 8007626:	bf00      	nop
 8007628:	636f4361 	.word	0x636f4361
 800762c:	3fd287a7 	.word	0x3fd287a7
 8007630:	8b60c8b3 	.word	0x8b60c8b3
 8007634:	3fc68a28 	.word	0x3fc68a28
 8007638:	509f79fb 	.word	0x509f79fb
 800763c:	3fd34413 	.word	0x3fd34413
 8007640:	0800a4de 	.word	0x0800a4de
 8007644:	0800a4f5 	.word	0x0800a4f5
 8007648:	7ff00000 	.word	0x7ff00000
 800764c:	0800a4da 	.word	0x0800a4da
 8007650:	0800a4d1 	.word	0x0800a4d1
 8007654:	0800a355 	.word	0x0800a355
 8007658:	3ff80000 	.word	0x3ff80000
 800765c:	0800a660 	.word	0x0800a660
 8007660:	0800a550 	.word	0x0800a550
 8007664:	2401      	movs	r4, #1
 8007666:	2300      	movs	r3, #0
 8007668:	940b      	str	r4, [sp, #44]	; 0x2c
 800766a:	9322      	str	r3, [sp, #136]	; 0x88
 800766c:	f04f 39ff 	mov.w	r9, #4294967295
 8007670:	2200      	movs	r2, #0
 8007672:	2312      	movs	r3, #18
 8007674:	f8cd 9020 	str.w	r9, [sp, #32]
 8007678:	9223      	str	r2, [sp, #140]	; 0x8c
 800767a:	e7b0      	b.n	80075de <_dtoa_r+0x266>
 800767c:	2301      	movs	r3, #1
 800767e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007680:	e7f4      	b.n	800766c <_dtoa_r+0x2f4>
 8007682:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007686:	464b      	mov	r3, r9
 8007688:	f8cd 9020 	str.w	r9, [sp, #32]
 800768c:	e7a7      	b.n	80075de <_dtoa_r+0x266>
 800768e:	3101      	adds	r1, #1
 8007690:	6041      	str	r1, [r0, #4]
 8007692:	0052      	lsls	r2, r2, #1
 8007694:	e7a7      	b.n	80075e6 <_dtoa_r+0x26e>
 8007696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007698:	9a03      	ldr	r2, [sp, #12]
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	9b08      	ldr	r3, [sp, #32]
 800769e:	2b0e      	cmp	r3, #14
 80076a0:	f200 80a8 	bhi.w	80077f4 <_dtoa_r+0x47c>
 80076a4:	2c00      	cmp	r4, #0
 80076a6:	f000 80a5 	beq.w	80077f4 <_dtoa_r+0x47c>
 80076aa:	f1ba 0f00 	cmp.w	sl, #0
 80076ae:	dd34      	ble.n	800771a <_dtoa_r+0x3a2>
 80076b0:	4a9a      	ldr	r2, [pc, #616]	; (800791c <_dtoa_r+0x5a4>)
 80076b2:	f00a 030f 	and.w	r3, sl, #15
 80076b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80076be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80076ca:	d016      	beq.n	80076fa <_dtoa_r+0x382>
 80076cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076d0:	4b93      	ldr	r3, [pc, #588]	; (8007920 <_dtoa_r+0x5a8>)
 80076d2:	2703      	movs	r7, #3
 80076d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076d8:	f7f9 f828 	bl	800072c <__aeabi_ddiv>
 80076dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076e0:	f004 040f 	and.w	r4, r4, #15
 80076e4:	4e8e      	ldr	r6, [pc, #568]	; (8007920 <_dtoa_r+0x5a8>)
 80076e6:	b954      	cbnz	r4, 80076fe <_dtoa_r+0x386>
 80076e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f0:	f7f9 f81c 	bl	800072c <__aeabi_ddiv>
 80076f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076f8:	e029      	b.n	800774e <_dtoa_r+0x3d6>
 80076fa:	2702      	movs	r7, #2
 80076fc:	e7f2      	b.n	80076e4 <_dtoa_r+0x36c>
 80076fe:	07e1      	lsls	r1, r4, #31
 8007700:	d508      	bpl.n	8007714 <_dtoa_r+0x39c>
 8007702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007706:	e9d6 2300 	ldrd	r2, r3, [r6]
 800770a:	f7f8 fee5 	bl	80004d8 <__aeabi_dmul>
 800770e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007712:	3701      	adds	r7, #1
 8007714:	1064      	asrs	r4, r4, #1
 8007716:	3608      	adds	r6, #8
 8007718:	e7e5      	b.n	80076e6 <_dtoa_r+0x36e>
 800771a:	f000 80a5 	beq.w	8007868 <_dtoa_r+0x4f0>
 800771e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007722:	f1ca 0400 	rsb	r4, sl, #0
 8007726:	4b7d      	ldr	r3, [pc, #500]	; (800791c <_dtoa_r+0x5a4>)
 8007728:	f004 020f 	and.w	r2, r4, #15
 800772c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f7f8 fed0 	bl	80004d8 <__aeabi_dmul>
 8007738:	2702      	movs	r7, #2
 800773a:	2300      	movs	r3, #0
 800773c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007740:	4e77      	ldr	r6, [pc, #476]	; (8007920 <_dtoa_r+0x5a8>)
 8007742:	1124      	asrs	r4, r4, #4
 8007744:	2c00      	cmp	r4, #0
 8007746:	f040 8084 	bne.w	8007852 <_dtoa_r+0x4da>
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1d2      	bne.n	80076f4 <_dtoa_r+0x37c>
 800774e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 808b 	beq.w	800786c <_dtoa_r+0x4f4>
 8007756:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800775a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800775e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007762:	2200      	movs	r2, #0
 8007764:	4b6f      	ldr	r3, [pc, #444]	; (8007924 <_dtoa_r+0x5ac>)
 8007766:	f7f9 f929 	bl	80009bc <__aeabi_dcmplt>
 800776a:	2800      	cmp	r0, #0
 800776c:	d07e      	beq.n	800786c <_dtoa_r+0x4f4>
 800776e:	9b08      	ldr	r3, [sp, #32]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d07b      	beq.n	800786c <_dtoa_r+0x4f4>
 8007774:	f1b9 0f00 	cmp.w	r9, #0
 8007778:	dd38      	ble.n	80077ec <_dtoa_r+0x474>
 800777a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800777e:	2200      	movs	r2, #0
 8007780:	4b69      	ldr	r3, [pc, #420]	; (8007928 <_dtoa_r+0x5b0>)
 8007782:	f7f8 fea9 	bl	80004d8 <__aeabi_dmul>
 8007786:	464c      	mov	r4, r9
 8007788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800778c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007790:	3701      	adds	r7, #1
 8007792:	4638      	mov	r0, r7
 8007794:	f7f8 fe36 	bl	8000404 <__aeabi_i2d>
 8007798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800779c:	f7f8 fe9c 	bl	80004d8 <__aeabi_dmul>
 80077a0:	2200      	movs	r2, #0
 80077a2:	4b62      	ldr	r3, [pc, #392]	; (800792c <_dtoa_r+0x5b4>)
 80077a4:	f7f8 fce2 	bl	800016c <__adddf3>
 80077a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80077ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077b0:	9611      	str	r6, [sp, #68]	; 0x44
 80077b2:	2c00      	cmp	r4, #0
 80077b4:	d15d      	bne.n	8007872 <_dtoa_r+0x4fa>
 80077b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ba:	2200      	movs	r2, #0
 80077bc:	4b5c      	ldr	r3, [pc, #368]	; (8007930 <_dtoa_r+0x5b8>)
 80077be:	f7f8 fcd3 	bl	8000168 <__aeabi_dsub>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077ca:	4633      	mov	r3, r6
 80077cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077ce:	f7f9 f913 	bl	80009f8 <__aeabi_dcmpgt>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	f040 829c 	bne.w	8007d10 <_dtoa_r+0x998>
 80077d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80077e2:	f7f9 f8eb 	bl	80009bc <__aeabi_dcmplt>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f040 8290 	bne.w	8007d0c <_dtoa_r+0x994>
 80077ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80077f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80077f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f2c0 8152 	blt.w	8007aa0 <_dtoa_r+0x728>
 80077fc:	f1ba 0f0e 	cmp.w	sl, #14
 8007800:	f300 814e 	bgt.w	8007aa0 <_dtoa_r+0x728>
 8007804:	4b45      	ldr	r3, [pc, #276]	; (800791c <_dtoa_r+0x5a4>)
 8007806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800780a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800780e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007814:	2b00      	cmp	r3, #0
 8007816:	f280 80db 	bge.w	80079d0 <_dtoa_r+0x658>
 800781a:	9b08      	ldr	r3, [sp, #32]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f300 80d7 	bgt.w	80079d0 <_dtoa_r+0x658>
 8007822:	f040 8272 	bne.w	8007d0a <_dtoa_r+0x992>
 8007826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800782a:	2200      	movs	r2, #0
 800782c:	4b40      	ldr	r3, [pc, #256]	; (8007930 <_dtoa_r+0x5b8>)
 800782e:	f7f8 fe53 	bl	80004d8 <__aeabi_dmul>
 8007832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007836:	f7f9 f8d5 	bl	80009e4 <__aeabi_dcmpge>
 800783a:	9c08      	ldr	r4, [sp, #32]
 800783c:	4626      	mov	r6, r4
 800783e:	2800      	cmp	r0, #0
 8007840:	f040 8248 	bne.w	8007cd4 <_dtoa_r+0x95c>
 8007844:	2331      	movs	r3, #49	; 0x31
 8007846:	9f03      	ldr	r7, [sp, #12]
 8007848:	f10a 0a01 	add.w	sl, sl, #1
 800784c:	f807 3b01 	strb.w	r3, [r7], #1
 8007850:	e244      	b.n	8007cdc <_dtoa_r+0x964>
 8007852:	07e2      	lsls	r2, r4, #31
 8007854:	d505      	bpl.n	8007862 <_dtoa_r+0x4ea>
 8007856:	e9d6 2300 	ldrd	r2, r3, [r6]
 800785a:	f7f8 fe3d 	bl	80004d8 <__aeabi_dmul>
 800785e:	2301      	movs	r3, #1
 8007860:	3701      	adds	r7, #1
 8007862:	1064      	asrs	r4, r4, #1
 8007864:	3608      	adds	r6, #8
 8007866:	e76d      	b.n	8007744 <_dtoa_r+0x3cc>
 8007868:	2702      	movs	r7, #2
 800786a:	e770      	b.n	800774e <_dtoa_r+0x3d6>
 800786c:	46d0      	mov	r8, sl
 800786e:	9c08      	ldr	r4, [sp, #32]
 8007870:	e78f      	b.n	8007792 <_dtoa_r+0x41a>
 8007872:	9903      	ldr	r1, [sp, #12]
 8007874:	4b29      	ldr	r3, [pc, #164]	; (800791c <_dtoa_r+0x5a4>)
 8007876:	4421      	add	r1, r4
 8007878:	9112      	str	r1, [sp, #72]	; 0x48
 800787a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800787c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007880:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007884:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007888:	2900      	cmp	r1, #0
 800788a:	d055      	beq.n	8007938 <_dtoa_r+0x5c0>
 800788c:	2000      	movs	r0, #0
 800788e:	4929      	ldr	r1, [pc, #164]	; (8007934 <_dtoa_r+0x5bc>)
 8007890:	f7f8 ff4c 	bl	800072c <__aeabi_ddiv>
 8007894:	463b      	mov	r3, r7
 8007896:	4632      	mov	r2, r6
 8007898:	f7f8 fc66 	bl	8000168 <__aeabi_dsub>
 800789c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078a0:	9f03      	ldr	r7, [sp, #12]
 80078a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078a6:	f7f9 f8c7 	bl	8000a38 <__aeabi_d2iz>
 80078aa:	4604      	mov	r4, r0
 80078ac:	f7f8 fdaa 	bl	8000404 <__aeabi_i2d>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078b8:	f7f8 fc56 	bl	8000168 <__aeabi_dsub>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	3430      	adds	r4, #48	; 0x30
 80078c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078ca:	f807 4b01 	strb.w	r4, [r7], #1
 80078ce:	f7f9 f875 	bl	80009bc <__aeabi_dcmplt>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d174      	bne.n	80079c0 <_dtoa_r+0x648>
 80078d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078da:	2000      	movs	r0, #0
 80078dc:	4911      	ldr	r1, [pc, #68]	; (8007924 <_dtoa_r+0x5ac>)
 80078de:	f7f8 fc43 	bl	8000168 <__aeabi_dsub>
 80078e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078e6:	f7f9 f869 	bl	80009bc <__aeabi_dcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	f040 80b7 	bne.w	8007a5e <_dtoa_r+0x6e6>
 80078f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078f2:	429f      	cmp	r7, r3
 80078f4:	f43f af7a 	beq.w	80077ec <_dtoa_r+0x474>
 80078f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078fc:	2200      	movs	r2, #0
 80078fe:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <_dtoa_r+0x5b0>)
 8007900:	f7f8 fdea 	bl	80004d8 <__aeabi_dmul>
 8007904:	2200      	movs	r2, #0
 8007906:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800790a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <_dtoa_r+0x5b0>)
 8007910:	f7f8 fde2 	bl	80004d8 <__aeabi_dmul>
 8007914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007918:	e7c3      	b.n	80078a2 <_dtoa_r+0x52a>
 800791a:	bf00      	nop
 800791c:	0800a660 	.word	0x0800a660
 8007920:	0800a638 	.word	0x0800a638
 8007924:	3ff00000 	.word	0x3ff00000
 8007928:	40240000 	.word	0x40240000
 800792c:	401c0000 	.word	0x401c0000
 8007930:	40140000 	.word	0x40140000
 8007934:	3fe00000 	.word	0x3fe00000
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f8 fdcc 	bl	80004d8 <__aeabi_dmul>
 8007940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007942:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007946:	9c03      	ldr	r4, [sp, #12]
 8007948:	9314      	str	r3, [sp, #80]	; 0x50
 800794a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800794e:	f7f9 f873 	bl	8000a38 <__aeabi_d2iz>
 8007952:	9015      	str	r0, [sp, #84]	; 0x54
 8007954:	f7f8 fd56 	bl	8000404 <__aeabi_i2d>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007960:	f7f8 fc02 	bl	8000168 <__aeabi_dsub>
 8007964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007966:	4606      	mov	r6, r0
 8007968:	3330      	adds	r3, #48	; 0x30
 800796a:	f804 3b01 	strb.w	r3, [r4], #1
 800796e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007970:	460f      	mov	r7, r1
 8007972:	429c      	cmp	r4, r3
 8007974:	f04f 0200 	mov.w	r2, #0
 8007978:	d124      	bne.n	80079c4 <_dtoa_r+0x64c>
 800797a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800797e:	4bb0      	ldr	r3, [pc, #704]	; (8007c40 <_dtoa_r+0x8c8>)
 8007980:	f7f8 fbf4 	bl	800016c <__adddf3>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f9 f834 	bl	80009f8 <__aeabi_dcmpgt>
 8007990:	2800      	cmp	r0, #0
 8007992:	d163      	bne.n	8007a5c <_dtoa_r+0x6e4>
 8007994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007998:	2000      	movs	r0, #0
 800799a:	49a9      	ldr	r1, [pc, #676]	; (8007c40 <_dtoa_r+0x8c8>)
 800799c:	f7f8 fbe4 	bl	8000168 <__aeabi_dsub>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4630      	mov	r0, r6
 80079a6:	4639      	mov	r1, r7
 80079a8:	f7f9 f808 	bl	80009bc <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	f43f af1d 	beq.w	80077ec <_dtoa_r+0x474>
 80079b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80079b4:	1e7b      	subs	r3, r7, #1
 80079b6:	9314      	str	r3, [sp, #80]	; 0x50
 80079b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80079bc:	2b30      	cmp	r3, #48	; 0x30
 80079be:	d0f8      	beq.n	80079b2 <_dtoa_r+0x63a>
 80079c0:	46c2      	mov	sl, r8
 80079c2:	e03b      	b.n	8007a3c <_dtoa_r+0x6c4>
 80079c4:	4b9f      	ldr	r3, [pc, #636]	; (8007c44 <_dtoa_r+0x8cc>)
 80079c6:	f7f8 fd87 	bl	80004d8 <__aeabi_dmul>
 80079ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079ce:	e7bc      	b.n	800794a <_dtoa_r+0x5d2>
 80079d0:	9f03      	ldr	r7, [sp, #12]
 80079d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80079d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079da:	4640      	mov	r0, r8
 80079dc:	4649      	mov	r1, r9
 80079de:	f7f8 fea5 	bl	800072c <__aeabi_ddiv>
 80079e2:	f7f9 f829 	bl	8000a38 <__aeabi_d2iz>
 80079e6:	4604      	mov	r4, r0
 80079e8:	f7f8 fd0c 	bl	8000404 <__aeabi_i2d>
 80079ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079f0:	f7f8 fd72 	bl	80004d8 <__aeabi_dmul>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4640      	mov	r0, r8
 80079fa:	4649      	mov	r1, r9
 80079fc:	f7f8 fbb4 	bl	8000168 <__aeabi_dsub>
 8007a00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007a04:	f807 6b01 	strb.w	r6, [r7], #1
 8007a08:	9e03      	ldr	r6, [sp, #12]
 8007a0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007a0e:	1bbe      	subs	r6, r7, r6
 8007a10:	45b4      	cmp	ip, r6
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	d136      	bne.n	8007a86 <_dtoa_r+0x70e>
 8007a18:	f7f8 fba8 	bl	800016c <__adddf3>
 8007a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a20:	4680      	mov	r8, r0
 8007a22:	4689      	mov	r9, r1
 8007a24:	f7f8 ffe8 	bl	80009f8 <__aeabi_dcmpgt>
 8007a28:	bb58      	cbnz	r0, 8007a82 <_dtoa_r+0x70a>
 8007a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a2e:	4640      	mov	r0, r8
 8007a30:	4649      	mov	r1, r9
 8007a32:	f7f8 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 8007a36:	b108      	cbz	r0, 8007a3c <_dtoa_r+0x6c4>
 8007a38:	07e1      	lsls	r1, r4, #31
 8007a3a:	d422      	bmi.n	8007a82 <_dtoa_r+0x70a>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	4659      	mov	r1, fp
 8007a40:	f000 fe68 	bl	8008714 <_Bfree>
 8007a44:	2300      	movs	r3, #0
 8007a46:	703b      	strb	r3, [r7, #0]
 8007a48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a4a:	f10a 0001 	add.w	r0, sl, #1
 8007a4e:	6018      	str	r0, [r3, #0]
 8007a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f43f acde 	beq.w	8007414 <_dtoa_r+0x9c>
 8007a58:	601f      	str	r7, [r3, #0]
 8007a5a:	e4db      	b.n	8007414 <_dtoa_r+0x9c>
 8007a5c:	4627      	mov	r7, r4
 8007a5e:	463b      	mov	r3, r7
 8007a60:	461f      	mov	r7, r3
 8007a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a66:	2a39      	cmp	r2, #57	; 0x39
 8007a68:	d107      	bne.n	8007a7a <_dtoa_r+0x702>
 8007a6a:	9a03      	ldr	r2, [sp, #12]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d1f7      	bne.n	8007a60 <_dtoa_r+0x6e8>
 8007a70:	2230      	movs	r2, #48	; 0x30
 8007a72:	9903      	ldr	r1, [sp, #12]
 8007a74:	f108 0801 	add.w	r8, r8, #1
 8007a78:	700a      	strb	r2, [r1, #0]
 8007a7a:	781a      	ldrb	r2, [r3, #0]
 8007a7c:	3201      	adds	r2, #1
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	e79e      	b.n	80079c0 <_dtoa_r+0x648>
 8007a82:	46d0      	mov	r8, sl
 8007a84:	e7eb      	b.n	8007a5e <_dtoa_r+0x6e6>
 8007a86:	2200      	movs	r2, #0
 8007a88:	4b6e      	ldr	r3, [pc, #440]	; (8007c44 <_dtoa_r+0x8cc>)
 8007a8a:	f7f8 fd25 	bl	80004d8 <__aeabi_dmul>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2300      	movs	r3, #0
 8007a92:	4680      	mov	r8, r0
 8007a94:	4689      	mov	r9, r1
 8007a96:	f7f8 ff87 	bl	80009a8 <__aeabi_dcmpeq>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d09b      	beq.n	80079d6 <_dtoa_r+0x65e>
 8007a9e:	e7cd      	b.n	8007a3c <_dtoa_r+0x6c4>
 8007aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aa2:	2a00      	cmp	r2, #0
 8007aa4:	f000 80d0 	beq.w	8007c48 <_dtoa_r+0x8d0>
 8007aa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007aaa:	2a01      	cmp	r2, #1
 8007aac:	f300 80ae 	bgt.w	8007c0c <_dtoa_r+0x894>
 8007ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ab2:	2a00      	cmp	r2, #0
 8007ab4:	f000 80a6 	beq.w	8007c04 <_dtoa_r+0x88c>
 8007ab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007abc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007abe:	9f06      	ldr	r7, [sp, #24]
 8007ac0:	9a06      	ldr	r2, [sp, #24]
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	441a      	add	r2, r3
 8007ac6:	9206      	str	r2, [sp, #24]
 8007ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aca:	4628      	mov	r0, r5
 8007acc:	441a      	add	r2, r3
 8007ace:	9209      	str	r2, [sp, #36]	; 0x24
 8007ad0:	f000 ff20 	bl	8008914 <__i2b>
 8007ad4:	4606      	mov	r6, r0
 8007ad6:	2f00      	cmp	r7, #0
 8007ad8:	dd0c      	ble.n	8007af4 <_dtoa_r+0x77c>
 8007ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dd09      	ble.n	8007af4 <_dtoa_r+0x77c>
 8007ae0:	42bb      	cmp	r3, r7
 8007ae2:	bfa8      	it	ge
 8007ae4:	463b      	movge	r3, r7
 8007ae6:	9a06      	ldr	r2, [sp, #24]
 8007ae8:	1aff      	subs	r7, r7, r3
 8007aea:	1ad2      	subs	r2, r2, r3
 8007aec:	9206      	str	r2, [sp, #24]
 8007aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	9309      	str	r3, [sp, #36]	; 0x24
 8007af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af6:	b1f3      	cbz	r3, 8007b36 <_dtoa_r+0x7be>
 8007af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 80a8 	beq.w	8007c50 <_dtoa_r+0x8d8>
 8007b00:	2c00      	cmp	r4, #0
 8007b02:	dd10      	ble.n	8007b26 <_dtoa_r+0x7ae>
 8007b04:	4631      	mov	r1, r6
 8007b06:	4622      	mov	r2, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 ffc1 	bl	8008a90 <__pow5mult>
 8007b0e:	465a      	mov	r2, fp
 8007b10:	4601      	mov	r1, r0
 8007b12:	4606      	mov	r6, r0
 8007b14:	4628      	mov	r0, r5
 8007b16:	f000 ff13 	bl	8008940 <__multiply>
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	4659      	mov	r1, fp
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fdf8 	bl	8008714 <_Bfree>
 8007b24:	46c3      	mov	fp, r8
 8007b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b28:	1b1a      	subs	r2, r3, r4
 8007b2a:	d004      	beq.n	8007b36 <_dtoa_r+0x7be>
 8007b2c:	4659      	mov	r1, fp
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 ffae 	bl	8008a90 <__pow5mult>
 8007b34:	4683      	mov	fp, r0
 8007b36:	2101      	movs	r1, #1
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 feeb 	bl	8008914 <__i2b>
 8007b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b40:	4604      	mov	r4, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f340 8086 	ble.w	8007c54 <_dtoa_r+0x8dc>
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f000 ff9f 	bl	8008a90 <__pow5mult>
 8007b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b54:	4604      	mov	r4, r0
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	dd7f      	ble.n	8007c5a <_dtoa_r+0x8e2>
 8007b5a:	f04f 0800 	mov.w	r8, #0
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b64:	6918      	ldr	r0, [r3, #16]
 8007b66:	f000 fe87 	bl	8008878 <__hi0bits>
 8007b6a:	f1c0 0020 	rsb	r0, r0, #32
 8007b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b70:	4418      	add	r0, r3
 8007b72:	f010 001f 	ands.w	r0, r0, #31
 8007b76:	f000 8092 	beq.w	8007c9e <_dtoa_r+0x926>
 8007b7a:	f1c0 0320 	rsb	r3, r0, #32
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	f340 808a 	ble.w	8007c98 <_dtoa_r+0x920>
 8007b84:	f1c0 001c 	rsb	r0, r0, #28
 8007b88:	9b06      	ldr	r3, [sp, #24]
 8007b8a:	4407      	add	r7, r0
 8007b8c:	4403      	add	r3, r0
 8007b8e:	9306      	str	r3, [sp, #24]
 8007b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b92:	4403      	add	r3, r0
 8007b94:	9309      	str	r3, [sp, #36]	; 0x24
 8007b96:	9b06      	ldr	r3, [sp, #24]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	dd05      	ble.n	8007ba8 <_dtoa_r+0x830>
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 ffcf 	bl	8008b44 <__lshift>
 8007ba6:	4683      	mov	fp, r0
 8007ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	dd05      	ble.n	8007bba <_dtoa_r+0x842>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f000 ffc6 	bl	8008b44 <__lshift>
 8007bb8:	4604      	mov	r4, r0
 8007bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d070      	beq.n	8007ca2 <_dtoa_r+0x92a>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4658      	mov	r0, fp
 8007bc4:	f001 f82e 	bl	8008c24 <__mcmp>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	da6a      	bge.n	8007ca2 <_dtoa_r+0x92a>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4659      	mov	r1, fp
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 fdc0 	bl	8008758 <__multadd>
 8007bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bda:	4683      	mov	fp, r0
 8007bdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 8194 	beq.w	8007f0e <_dtoa_r+0xb96>
 8007be6:	4631      	mov	r1, r6
 8007be8:	2300      	movs	r3, #0
 8007bea:	220a      	movs	r2, #10
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 fdb3 	bl	8008758 <__multadd>
 8007bf2:	f1b9 0f00 	cmp.w	r9, #0
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	f300 8093 	bgt.w	8007d22 <_dtoa_r+0x9aa>
 8007bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	dc57      	bgt.n	8007cb2 <_dtoa_r+0x93a>
 8007c02:	e08e      	b.n	8007d22 <_dtoa_r+0x9aa>
 8007c04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c0a:	e757      	b.n	8007abc <_dtoa_r+0x744>
 8007c0c:	9b08      	ldr	r3, [sp, #32]
 8007c0e:	1e5c      	subs	r4, r3, #1
 8007c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c12:	42a3      	cmp	r3, r4
 8007c14:	bfb7      	itett	lt
 8007c16:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c18:	1b1c      	subge	r4, r3, r4
 8007c1a:	1ae2      	sublt	r2, r4, r3
 8007c1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007c1e:	bfbe      	ittt	lt
 8007c20:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007c22:	189b      	addlt	r3, r3, r2
 8007c24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007c26:	9b08      	ldr	r3, [sp, #32]
 8007c28:	bfb8      	it	lt
 8007c2a:	2400      	movlt	r4, #0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	bfbb      	ittet	lt
 8007c30:	9b06      	ldrlt	r3, [sp, #24]
 8007c32:	9a08      	ldrlt	r2, [sp, #32]
 8007c34:	9f06      	ldrge	r7, [sp, #24]
 8007c36:	1a9f      	sublt	r7, r3, r2
 8007c38:	bfac      	ite	ge
 8007c3a:	9b08      	ldrge	r3, [sp, #32]
 8007c3c:	2300      	movlt	r3, #0
 8007c3e:	e73f      	b.n	8007ac0 <_dtoa_r+0x748>
 8007c40:	3fe00000 	.word	0x3fe00000
 8007c44:	40240000 	.word	0x40240000
 8007c48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c4a:	9f06      	ldr	r7, [sp, #24]
 8007c4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007c4e:	e742      	b.n	8007ad6 <_dtoa_r+0x75e>
 8007c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c52:	e76b      	b.n	8007b2c <_dtoa_r+0x7b4>
 8007c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	dc19      	bgt.n	8007c8e <_dtoa_r+0x916>
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	b9bb      	cbnz	r3, 8007c8e <_dtoa_r+0x916>
 8007c5e:	9b05      	ldr	r3, [sp, #20]
 8007c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c64:	b99b      	cbnz	r3, 8007c8e <_dtoa_r+0x916>
 8007c66:	9b05      	ldr	r3, [sp, #20]
 8007c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c6c:	0d1b      	lsrs	r3, r3, #20
 8007c6e:	051b      	lsls	r3, r3, #20
 8007c70:	b183      	cbz	r3, 8007c94 <_dtoa_r+0x91c>
 8007c72:	f04f 0801 	mov.w	r8, #1
 8007c76:	9b06      	ldr	r3, [sp, #24]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	9306      	str	r3, [sp, #24]
 8007c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7e:	3301      	adds	r3, #1
 8007c80:	9309      	str	r3, [sp, #36]	; 0x24
 8007c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f47f af6a 	bne.w	8007b5e <_dtoa_r+0x7e6>
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	e76f      	b.n	8007b6e <_dtoa_r+0x7f6>
 8007c8e:	f04f 0800 	mov.w	r8, #0
 8007c92:	e7f6      	b.n	8007c82 <_dtoa_r+0x90a>
 8007c94:	4698      	mov	r8, r3
 8007c96:	e7f4      	b.n	8007c82 <_dtoa_r+0x90a>
 8007c98:	f43f af7d 	beq.w	8007b96 <_dtoa_r+0x81e>
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	301c      	adds	r0, #28
 8007ca0:	e772      	b.n	8007b88 <_dtoa_r+0x810>
 8007ca2:	9b08      	ldr	r3, [sp, #32]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dc36      	bgt.n	8007d16 <_dtoa_r+0x99e>
 8007ca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	dd33      	ble.n	8007d16 <_dtoa_r+0x99e>
 8007cae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cb2:	f1b9 0f00 	cmp.w	r9, #0
 8007cb6:	d10d      	bne.n	8007cd4 <_dtoa_r+0x95c>
 8007cb8:	4621      	mov	r1, r4
 8007cba:	464b      	mov	r3, r9
 8007cbc:	2205      	movs	r2, #5
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f000 fd4a 	bl	8008758 <__multadd>
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4658      	mov	r0, fp
 8007cca:	f000 ffab 	bl	8008c24 <__mcmp>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f73f adb8 	bgt.w	8007844 <_dtoa_r+0x4cc>
 8007cd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cd6:	9f03      	ldr	r7, [sp, #12]
 8007cd8:	ea6f 0a03 	mvn.w	sl, r3
 8007cdc:	f04f 0800 	mov.w	r8, #0
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 fd16 	bl	8008714 <_Bfree>
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	f43f aea7 	beq.w	8007a3c <_dtoa_r+0x6c4>
 8007cee:	f1b8 0f00 	cmp.w	r8, #0
 8007cf2:	d005      	beq.n	8007d00 <_dtoa_r+0x988>
 8007cf4:	45b0      	cmp	r8, r6
 8007cf6:	d003      	beq.n	8007d00 <_dtoa_r+0x988>
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f000 fd0a 	bl	8008714 <_Bfree>
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	f000 fd06 	bl	8008714 <_Bfree>
 8007d08:	e698      	b.n	8007a3c <_dtoa_r+0x6c4>
 8007d0a:	2400      	movs	r4, #0
 8007d0c:	4626      	mov	r6, r4
 8007d0e:	e7e1      	b.n	8007cd4 <_dtoa_r+0x95c>
 8007d10:	46c2      	mov	sl, r8
 8007d12:	4626      	mov	r6, r4
 8007d14:	e596      	b.n	8007844 <_dtoa_r+0x4cc>
 8007d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 80fd 	beq.w	8007f1c <_dtoa_r+0xba4>
 8007d22:	2f00      	cmp	r7, #0
 8007d24:	dd05      	ble.n	8007d32 <_dtoa_r+0x9ba>
 8007d26:	4631      	mov	r1, r6
 8007d28:	463a      	mov	r2, r7
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 ff0a 	bl	8008b44 <__lshift>
 8007d30:	4606      	mov	r6, r0
 8007d32:	f1b8 0f00 	cmp.w	r8, #0
 8007d36:	d05c      	beq.n	8007df2 <_dtoa_r+0xa7a>
 8007d38:	4628      	mov	r0, r5
 8007d3a:	6871      	ldr	r1, [r6, #4]
 8007d3c:	f000 fcaa 	bl	8008694 <_Balloc>
 8007d40:	4607      	mov	r7, r0
 8007d42:	b928      	cbnz	r0, 8007d50 <_dtoa_r+0x9d8>
 8007d44:	4602      	mov	r2, r0
 8007d46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d4a:	4b7f      	ldr	r3, [pc, #508]	; (8007f48 <_dtoa_r+0xbd0>)
 8007d4c:	f7ff bb28 	b.w	80073a0 <_dtoa_r+0x28>
 8007d50:	6932      	ldr	r2, [r6, #16]
 8007d52:	f106 010c 	add.w	r1, r6, #12
 8007d56:	3202      	adds	r2, #2
 8007d58:	0092      	lsls	r2, r2, #2
 8007d5a:	300c      	adds	r0, #12
 8007d5c:	f000 fc8c 	bl	8008678 <memcpy>
 8007d60:	2201      	movs	r2, #1
 8007d62:	4639      	mov	r1, r7
 8007d64:	4628      	mov	r0, r5
 8007d66:	f000 feed 	bl	8008b44 <__lshift>
 8007d6a:	46b0      	mov	r8, r6
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	9308      	str	r3, [sp, #32]
 8007d74:	9b03      	ldr	r3, [sp, #12]
 8007d76:	444b      	add	r3, r9
 8007d78:	930a      	str	r3, [sp, #40]	; 0x28
 8007d7a:	9b04      	ldr	r3, [sp, #16]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	9309      	str	r3, [sp, #36]	; 0x24
 8007d82:	9b08      	ldr	r3, [sp, #32]
 8007d84:	4621      	mov	r1, r4
 8007d86:	3b01      	subs	r3, #1
 8007d88:	4658      	mov	r0, fp
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	f7ff fa68 	bl	8007260 <quorem>
 8007d90:	4603      	mov	r3, r0
 8007d92:	4641      	mov	r1, r8
 8007d94:	3330      	adds	r3, #48	; 0x30
 8007d96:	9006      	str	r0, [sp, #24]
 8007d98:	4658      	mov	r0, fp
 8007d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d9c:	f000 ff42 	bl	8008c24 <__mcmp>
 8007da0:	4632      	mov	r2, r6
 8007da2:	4681      	mov	r9, r0
 8007da4:	4621      	mov	r1, r4
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 ff58 	bl	8008c5c <__mdiff>
 8007dac:	68c2      	ldr	r2, [r0, #12]
 8007dae:	4607      	mov	r7, r0
 8007db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db2:	bb02      	cbnz	r2, 8007df6 <_dtoa_r+0xa7e>
 8007db4:	4601      	mov	r1, r0
 8007db6:	4658      	mov	r0, fp
 8007db8:	f000 ff34 	bl	8008c24 <__mcmp>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007dc8:	f000 fca4 	bl	8008714 <_Bfree>
 8007dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dd0:	9f08      	ldr	r7, [sp, #32]
 8007dd2:	ea43 0102 	orr.w	r1, r3, r2
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ddc:	d10d      	bne.n	8007dfa <_dtoa_r+0xa82>
 8007dde:	2b39      	cmp	r3, #57	; 0x39
 8007de0:	d029      	beq.n	8007e36 <_dtoa_r+0xabe>
 8007de2:	f1b9 0f00 	cmp.w	r9, #0
 8007de6:	dd01      	ble.n	8007dec <_dtoa_r+0xa74>
 8007de8:	9b06      	ldr	r3, [sp, #24]
 8007dea:	3331      	adds	r3, #49	; 0x31
 8007dec:	9a04      	ldr	r2, [sp, #16]
 8007dee:	7013      	strb	r3, [r2, #0]
 8007df0:	e776      	b.n	8007ce0 <_dtoa_r+0x968>
 8007df2:	4630      	mov	r0, r6
 8007df4:	e7b9      	b.n	8007d6a <_dtoa_r+0x9f2>
 8007df6:	2201      	movs	r2, #1
 8007df8:	e7e2      	b.n	8007dc0 <_dtoa_r+0xa48>
 8007dfa:	f1b9 0f00 	cmp.w	r9, #0
 8007dfe:	db06      	blt.n	8007e0e <_dtoa_r+0xa96>
 8007e00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007e02:	ea41 0909 	orr.w	r9, r1, r9
 8007e06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e08:	ea59 0101 	orrs.w	r1, r9, r1
 8007e0c:	d120      	bne.n	8007e50 <_dtoa_r+0xad8>
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	ddec      	ble.n	8007dec <_dtoa_r+0xa74>
 8007e12:	4659      	mov	r1, fp
 8007e14:	2201      	movs	r2, #1
 8007e16:	4628      	mov	r0, r5
 8007e18:	9308      	str	r3, [sp, #32]
 8007e1a:	f000 fe93 	bl	8008b44 <__lshift>
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4683      	mov	fp, r0
 8007e22:	f000 feff 	bl	8008c24 <__mcmp>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	9b08      	ldr	r3, [sp, #32]
 8007e2a:	dc02      	bgt.n	8007e32 <_dtoa_r+0xaba>
 8007e2c:	d1de      	bne.n	8007dec <_dtoa_r+0xa74>
 8007e2e:	07da      	lsls	r2, r3, #31
 8007e30:	d5dc      	bpl.n	8007dec <_dtoa_r+0xa74>
 8007e32:	2b39      	cmp	r3, #57	; 0x39
 8007e34:	d1d8      	bne.n	8007de8 <_dtoa_r+0xa70>
 8007e36:	2339      	movs	r3, #57	; 0x39
 8007e38:	9a04      	ldr	r2, [sp, #16]
 8007e3a:	7013      	strb	r3, [r2, #0]
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	461f      	mov	r7, r3
 8007e40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	2a39      	cmp	r2, #57	; 0x39
 8007e48:	d050      	beq.n	8007eec <_dtoa_r+0xb74>
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e747      	b.n	8007ce0 <_dtoa_r+0x968>
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	dd03      	ble.n	8007e5c <_dtoa_r+0xae4>
 8007e54:	2b39      	cmp	r3, #57	; 0x39
 8007e56:	d0ee      	beq.n	8007e36 <_dtoa_r+0xabe>
 8007e58:	3301      	adds	r3, #1
 8007e5a:	e7c7      	b.n	8007dec <_dtoa_r+0xa74>
 8007e5c:	9a08      	ldr	r2, [sp, #32]
 8007e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e64:	428a      	cmp	r2, r1
 8007e66:	d02a      	beq.n	8007ebe <_dtoa_r+0xb46>
 8007e68:	4659      	mov	r1, fp
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	220a      	movs	r2, #10
 8007e6e:	4628      	mov	r0, r5
 8007e70:	f000 fc72 	bl	8008758 <__multadd>
 8007e74:	45b0      	cmp	r8, r6
 8007e76:	4683      	mov	fp, r0
 8007e78:	f04f 0300 	mov.w	r3, #0
 8007e7c:	f04f 020a 	mov.w	r2, #10
 8007e80:	4641      	mov	r1, r8
 8007e82:	4628      	mov	r0, r5
 8007e84:	d107      	bne.n	8007e96 <_dtoa_r+0xb1e>
 8007e86:	f000 fc67 	bl	8008758 <__multadd>
 8007e8a:	4680      	mov	r8, r0
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	9b08      	ldr	r3, [sp, #32]
 8007e90:	3301      	adds	r3, #1
 8007e92:	9308      	str	r3, [sp, #32]
 8007e94:	e775      	b.n	8007d82 <_dtoa_r+0xa0a>
 8007e96:	f000 fc5f 	bl	8008758 <__multadd>
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	4680      	mov	r8, r0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 fc58 	bl	8008758 <__multadd>
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	e7f0      	b.n	8007e8e <_dtoa_r+0xb16>
 8007eac:	f1b9 0f00 	cmp.w	r9, #0
 8007eb0:	bfcc      	ite	gt
 8007eb2:	464f      	movgt	r7, r9
 8007eb4:	2701      	movle	r7, #1
 8007eb6:	f04f 0800 	mov.w	r8, #0
 8007eba:	9a03      	ldr	r2, [sp, #12]
 8007ebc:	4417      	add	r7, r2
 8007ebe:	4659      	mov	r1, fp
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	9308      	str	r3, [sp, #32]
 8007ec6:	f000 fe3d 	bl	8008b44 <__lshift>
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4683      	mov	fp, r0
 8007ece:	f000 fea9 	bl	8008c24 <__mcmp>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	dcb2      	bgt.n	8007e3c <_dtoa_r+0xac4>
 8007ed6:	d102      	bne.n	8007ede <_dtoa_r+0xb66>
 8007ed8:	9b08      	ldr	r3, [sp, #32]
 8007eda:	07db      	lsls	r3, r3, #31
 8007edc:	d4ae      	bmi.n	8007e3c <_dtoa_r+0xac4>
 8007ede:	463b      	mov	r3, r7
 8007ee0:	461f      	mov	r7, r3
 8007ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ee6:	2a30      	cmp	r2, #48	; 0x30
 8007ee8:	d0fa      	beq.n	8007ee0 <_dtoa_r+0xb68>
 8007eea:	e6f9      	b.n	8007ce0 <_dtoa_r+0x968>
 8007eec:	9a03      	ldr	r2, [sp, #12]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d1a5      	bne.n	8007e3e <_dtoa_r+0xac6>
 8007ef2:	2331      	movs	r3, #49	; 0x31
 8007ef4:	f10a 0a01 	add.w	sl, sl, #1
 8007ef8:	e779      	b.n	8007dee <_dtoa_r+0xa76>
 8007efa:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <_dtoa_r+0xbd4>)
 8007efc:	f7ff baa8 	b.w	8007450 <_dtoa_r+0xd8>
 8007f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f47f aa81 	bne.w	800740a <_dtoa_r+0x92>
 8007f08:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <_dtoa_r+0xbd8>)
 8007f0a:	f7ff baa1 	b.w	8007450 <_dtoa_r+0xd8>
 8007f0e:	f1b9 0f00 	cmp.w	r9, #0
 8007f12:	dc03      	bgt.n	8007f1c <_dtoa_r+0xba4>
 8007f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	f73f aecb 	bgt.w	8007cb2 <_dtoa_r+0x93a>
 8007f1c:	9f03      	ldr	r7, [sp, #12]
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4658      	mov	r0, fp
 8007f22:	f7ff f99d 	bl	8007260 <quorem>
 8007f26:	9a03      	ldr	r2, [sp, #12]
 8007f28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f2c:	f807 3b01 	strb.w	r3, [r7], #1
 8007f30:	1aba      	subs	r2, r7, r2
 8007f32:	4591      	cmp	r9, r2
 8007f34:	ddba      	ble.n	8007eac <_dtoa_r+0xb34>
 8007f36:	4659      	mov	r1, fp
 8007f38:	2300      	movs	r3, #0
 8007f3a:	220a      	movs	r2, #10
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f000 fc0b 	bl	8008758 <__multadd>
 8007f42:	4683      	mov	fp, r0
 8007f44:	e7eb      	b.n	8007f1e <_dtoa_r+0xba6>
 8007f46:	bf00      	nop
 8007f48:	0800a550 	.word	0x0800a550
 8007f4c:	0800a354 	.word	0x0800a354
 8007f50:	0800a4d1 	.word	0x0800a4d1

08007f54 <rshift>:
 8007f54:	6903      	ldr	r3, [r0, #16]
 8007f56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f5e:	f100 0414 	add.w	r4, r0, #20
 8007f62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f66:	dd46      	ble.n	8007ff6 <rshift+0xa2>
 8007f68:	f011 011f 	ands.w	r1, r1, #31
 8007f6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f74:	d10c      	bne.n	8007f90 <rshift+0x3c>
 8007f76:	4629      	mov	r1, r5
 8007f78:	f100 0710 	add.w	r7, r0, #16
 8007f7c:	42b1      	cmp	r1, r6
 8007f7e:	d335      	bcc.n	8007fec <rshift+0x98>
 8007f80:	1a9b      	subs	r3, r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	1eea      	subs	r2, r5, #3
 8007f86:	4296      	cmp	r6, r2
 8007f88:	bf38      	it	cc
 8007f8a:	2300      	movcc	r3, #0
 8007f8c:	4423      	add	r3, r4
 8007f8e:	e015      	b.n	8007fbc <rshift+0x68>
 8007f90:	46a1      	mov	r9, r4
 8007f92:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f96:	f1c1 0820 	rsb	r8, r1, #32
 8007f9a:	40cf      	lsrs	r7, r1
 8007f9c:	f105 0e04 	add.w	lr, r5, #4
 8007fa0:	4576      	cmp	r6, lr
 8007fa2:	46f4      	mov	ip, lr
 8007fa4:	d816      	bhi.n	8007fd4 <rshift+0x80>
 8007fa6:	1a9a      	subs	r2, r3, r2
 8007fa8:	0092      	lsls	r2, r2, #2
 8007faa:	3a04      	subs	r2, #4
 8007fac:	3501      	adds	r5, #1
 8007fae:	42ae      	cmp	r6, r5
 8007fb0:	bf38      	it	cc
 8007fb2:	2200      	movcc	r2, #0
 8007fb4:	18a3      	adds	r3, r4, r2
 8007fb6:	50a7      	str	r7, [r4, r2]
 8007fb8:	b107      	cbz	r7, 8007fbc <rshift+0x68>
 8007fba:	3304      	adds	r3, #4
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	eba3 0204 	sub.w	r2, r3, r4
 8007fc2:	bf08      	it	eq
 8007fc4:	2300      	moveq	r3, #0
 8007fc6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fca:	6102      	str	r2, [r0, #16]
 8007fcc:	bf08      	it	eq
 8007fce:	6143      	streq	r3, [r0, #20]
 8007fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fd4:	f8dc c000 	ldr.w	ip, [ip]
 8007fd8:	fa0c fc08 	lsl.w	ip, ip, r8
 8007fdc:	ea4c 0707 	orr.w	r7, ip, r7
 8007fe0:	f849 7b04 	str.w	r7, [r9], #4
 8007fe4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fe8:	40cf      	lsrs	r7, r1
 8007fea:	e7d9      	b.n	8007fa0 <rshift+0x4c>
 8007fec:	f851 cb04 	ldr.w	ip, [r1], #4
 8007ff0:	f847 cf04 	str.w	ip, [r7, #4]!
 8007ff4:	e7c2      	b.n	8007f7c <rshift+0x28>
 8007ff6:	4623      	mov	r3, r4
 8007ff8:	e7e0      	b.n	8007fbc <rshift+0x68>

08007ffa <__hexdig_fun>:
 8007ffa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ffe:	2b09      	cmp	r3, #9
 8008000:	d802      	bhi.n	8008008 <__hexdig_fun+0xe>
 8008002:	3820      	subs	r0, #32
 8008004:	b2c0      	uxtb	r0, r0
 8008006:	4770      	bx	lr
 8008008:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800800c:	2b05      	cmp	r3, #5
 800800e:	d801      	bhi.n	8008014 <__hexdig_fun+0x1a>
 8008010:	3847      	subs	r0, #71	; 0x47
 8008012:	e7f7      	b.n	8008004 <__hexdig_fun+0xa>
 8008014:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008018:	2b05      	cmp	r3, #5
 800801a:	d801      	bhi.n	8008020 <__hexdig_fun+0x26>
 800801c:	3827      	subs	r0, #39	; 0x27
 800801e:	e7f1      	b.n	8008004 <__hexdig_fun+0xa>
 8008020:	2000      	movs	r0, #0
 8008022:	4770      	bx	lr

08008024 <__gethex>:
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	b08b      	sub	sp, #44	; 0x2c
 800802a:	9305      	str	r3, [sp, #20]
 800802c:	4bb2      	ldr	r3, [pc, #712]	; (80082f8 <__gethex+0x2d4>)
 800802e:	9002      	str	r0, [sp, #8]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	468b      	mov	fp, r1
 8008034:	4618      	mov	r0, r3
 8008036:	4690      	mov	r8, r2
 8008038:	9303      	str	r3, [sp, #12]
 800803a:	f7f8 f889 	bl	8000150 <strlen>
 800803e:	4682      	mov	sl, r0
 8008040:	9b03      	ldr	r3, [sp, #12]
 8008042:	f8db 2000 	ldr.w	r2, [fp]
 8008046:	4403      	add	r3, r0
 8008048:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800804c:	9306      	str	r3, [sp, #24]
 800804e:	1c93      	adds	r3, r2, #2
 8008050:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008054:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008058:	32fe      	adds	r2, #254	; 0xfe
 800805a:	18d1      	adds	r1, r2, r3
 800805c:	461f      	mov	r7, r3
 800805e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008062:	9101      	str	r1, [sp, #4]
 8008064:	2830      	cmp	r0, #48	; 0x30
 8008066:	d0f8      	beq.n	800805a <__gethex+0x36>
 8008068:	f7ff ffc7 	bl	8007ffa <__hexdig_fun>
 800806c:	4604      	mov	r4, r0
 800806e:	2800      	cmp	r0, #0
 8008070:	d13a      	bne.n	80080e8 <__gethex+0xc4>
 8008072:	4652      	mov	r2, sl
 8008074:	4638      	mov	r0, r7
 8008076:	9903      	ldr	r1, [sp, #12]
 8008078:	f001 fa26 	bl	80094c8 <strncmp>
 800807c:	4605      	mov	r5, r0
 800807e:	2800      	cmp	r0, #0
 8008080:	d166      	bne.n	8008150 <__gethex+0x12c>
 8008082:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008086:	eb07 060a 	add.w	r6, r7, sl
 800808a:	f7ff ffb6 	bl	8007ffa <__hexdig_fun>
 800808e:	2800      	cmp	r0, #0
 8008090:	d060      	beq.n	8008154 <__gethex+0x130>
 8008092:	4633      	mov	r3, r6
 8008094:	7818      	ldrb	r0, [r3, #0]
 8008096:	461f      	mov	r7, r3
 8008098:	2830      	cmp	r0, #48	; 0x30
 800809a:	f103 0301 	add.w	r3, r3, #1
 800809e:	d0f9      	beq.n	8008094 <__gethex+0x70>
 80080a0:	f7ff ffab 	bl	8007ffa <__hexdig_fun>
 80080a4:	2301      	movs	r3, #1
 80080a6:	fab0 f480 	clz	r4, r0
 80080aa:	4635      	mov	r5, r6
 80080ac:	0964      	lsrs	r4, r4, #5
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	463a      	mov	r2, r7
 80080b2:	4616      	mov	r6, r2
 80080b4:	7830      	ldrb	r0, [r6, #0]
 80080b6:	3201      	adds	r2, #1
 80080b8:	f7ff ff9f 	bl	8007ffa <__hexdig_fun>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1f8      	bne.n	80080b2 <__gethex+0x8e>
 80080c0:	4652      	mov	r2, sl
 80080c2:	4630      	mov	r0, r6
 80080c4:	9903      	ldr	r1, [sp, #12]
 80080c6:	f001 f9ff 	bl	80094c8 <strncmp>
 80080ca:	b980      	cbnz	r0, 80080ee <__gethex+0xca>
 80080cc:	b94d      	cbnz	r5, 80080e2 <__gethex+0xbe>
 80080ce:	eb06 050a 	add.w	r5, r6, sl
 80080d2:	462a      	mov	r2, r5
 80080d4:	4616      	mov	r6, r2
 80080d6:	7830      	ldrb	r0, [r6, #0]
 80080d8:	3201      	adds	r2, #1
 80080da:	f7ff ff8e 	bl	8007ffa <__hexdig_fun>
 80080de:	2800      	cmp	r0, #0
 80080e0:	d1f8      	bne.n	80080d4 <__gethex+0xb0>
 80080e2:	1bad      	subs	r5, r5, r6
 80080e4:	00ad      	lsls	r5, r5, #2
 80080e6:	e004      	b.n	80080f2 <__gethex+0xce>
 80080e8:	2400      	movs	r4, #0
 80080ea:	4625      	mov	r5, r4
 80080ec:	e7e0      	b.n	80080b0 <__gethex+0x8c>
 80080ee:	2d00      	cmp	r5, #0
 80080f0:	d1f7      	bne.n	80080e2 <__gethex+0xbe>
 80080f2:	7833      	ldrb	r3, [r6, #0]
 80080f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080f8:	2b50      	cmp	r3, #80	; 0x50
 80080fa:	d139      	bne.n	8008170 <__gethex+0x14c>
 80080fc:	7873      	ldrb	r3, [r6, #1]
 80080fe:	2b2b      	cmp	r3, #43	; 0x2b
 8008100:	d02a      	beq.n	8008158 <__gethex+0x134>
 8008102:	2b2d      	cmp	r3, #45	; 0x2d
 8008104:	d02c      	beq.n	8008160 <__gethex+0x13c>
 8008106:	f04f 0900 	mov.w	r9, #0
 800810a:	1c71      	adds	r1, r6, #1
 800810c:	7808      	ldrb	r0, [r1, #0]
 800810e:	f7ff ff74 	bl	8007ffa <__hexdig_fun>
 8008112:	1e43      	subs	r3, r0, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b18      	cmp	r3, #24
 8008118:	d82a      	bhi.n	8008170 <__gethex+0x14c>
 800811a:	f1a0 0210 	sub.w	r2, r0, #16
 800811e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008122:	f7ff ff6a 	bl	8007ffa <__hexdig_fun>
 8008126:	1e43      	subs	r3, r0, #1
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b18      	cmp	r3, #24
 800812c:	d91b      	bls.n	8008166 <__gethex+0x142>
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	d000      	beq.n	8008136 <__gethex+0x112>
 8008134:	4252      	negs	r2, r2
 8008136:	4415      	add	r5, r2
 8008138:	f8cb 1000 	str.w	r1, [fp]
 800813c:	b1d4      	cbz	r4, 8008174 <__gethex+0x150>
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bf14      	ite	ne
 8008144:	2700      	movne	r7, #0
 8008146:	2706      	moveq	r7, #6
 8008148:	4638      	mov	r0, r7
 800814a:	b00b      	add	sp, #44	; 0x2c
 800814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008150:	463e      	mov	r6, r7
 8008152:	4625      	mov	r5, r4
 8008154:	2401      	movs	r4, #1
 8008156:	e7cc      	b.n	80080f2 <__gethex+0xce>
 8008158:	f04f 0900 	mov.w	r9, #0
 800815c:	1cb1      	adds	r1, r6, #2
 800815e:	e7d5      	b.n	800810c <__gethex+0xe8>
 8008160:	f04f 0901 	mov.w	r9, #1
 8008164:	e7fa      	b.n	800815c <__gethex+0x138>
 8008166:	230a      	movs	r3, #10
 8008168:	fb03 0202 	mla	r2, r3, r2, r0
 800816c:	3a10      	subs	r2, #16
 800816e:	e7d6      	b.n	800811e <__gethex+0xfa>
 8008170:	4631      	mov	r1, r6
 8008172:	e7e1      	b.n	8008138 <__gethex+0x114>
 8008174:	4621      	mov	r1, r4
 8008176:	1bf3      	subs	r3, r6, r7
 8008178:	3b01      	subs	r3, #1
 800817a:	2b07      	cmp	r3, #7
 800817c:	dc0a      	bgt.n	8008194 <__gethex+0x170>
 800817e:	9802      	ldr	r0, [sp, #8]
 8008180:	f000 fa88 	bl	8008694 <_Balloc>
 8008184:	4604      	mov	r4, r0
 8008186:	b940      	cbnz	r0, 800819a <__gethex+0x176>
 8008188:	4602      	mov	r2, r0
 800818a:	21de      	movs	r1, #222	; 0xde
 800818c:	4b5b      	ldr	r3, [pc, #364]	; (80082fc <__gethex+0x2d8>)
 800818e:	485c      	ldr	r0, [pc, #368]	; (8008300 <__gethex+0x2dc>)
 8008190:	f001 f9bc 	bl	800950c <__assert_func>
 8008194:	3101      	adds	r1, #1
 8008196:	105b      	asrs	r3, r3, #1
 8008198:	e7ef      	b.n	800817a <__gethex+0x156>
 800819a:	f04f 0b00 	mov.w	fp, #0
 800819e:	f100 0914 	add.w	r9, r0, #20
 80081a2:	f1ca 0301 	rsb	r3, sl, #1
 80081a6:	f8cd 9010 	str.w	r9, [sp, #16]
 80081aa:	f8cd b004 	str.w	fp, [sp, #4]
 80081ae:	9308      	str	r3, [sp, #32]
 80081b0:	42b7      	cmp	r7, r6
 80081b2:	d33f      	bcc.n	8008234 <__gethex+0x210>
 80081b4:	9f04      	ldr	r7, [sp, #16]
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	f847 3b04 	str.w	r3, [r7], #4
 80081bc:	eba7 0709 	sub.w	r7, r7, r9
 80081c0:	10bf      	asrs	r7, r7, #2
 80081c2:	6127      	str	r7, [r4, #16]
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fb57 	bl	8008878 <__hi0bits>
 80081ca:	017f      	lsls	r7, r7, #5
 80081cc:	f8d8 6000 	ldr.w	r6, [r8]
 80081d0:	1a3f      	subs	r7, r7, r0
 80081d2:	42b7      	cmp	r7, r6
 80081d4:	dd62      	ble.n	800829c <__gethex+0x278>
 80081d6:	1bbf      	subs	r7, r7, r6
 80081d8:	4639      	mov	r1, r7
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 fef1 	bl	8008fc2 <__any_on>
 80081e0:	4682      	mov	sl, r0
 80081e2:	b1a8      	cbz	r0, 8008210 <__gethex+0x1ec>
 80081e4:	f04f 0a01 	mov.w	sl, #1
 80081e8:	1e7b      	subs	r3, r7, #1
 80081ea:	1159      	asrs	r1, r3, #5
 80081ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80081f0:	f003 021f 	and.w	r2, r3, #31
 80081f4:	fa0a f202 	lsl.w	r2, sl, r2
 80081f8:	420a      	tst	r2, r1
 80081fa:	d009      	beq.n	8008210 <__gethex+0x1ec>
 80081fc:	4553      	cmp	r3, sl
 80081fe:	dd05      	ble.n	800820c <__gethex+0x1e8>
 8008200:	4620      	mov	r0, r4
 8008202:	1eb9      	subs	r1, r7, #2
 8008204:	f000 fedd 	bl	8008fc2 <__any_on>
 8008208:	2800      	cmp	r0, #0
 800820a:	d144      	bne.n	8008296 <__gethex+0x272>
 800820c:	f04f 0a02 	mov.w	sl, #2
 8008210:	4639      	mov	r1, r7
 8008212:	4620      	mov	r0, r4
 8008214:	f7ff fe9e 	bl	8007f54 <rshift>
 8008218:	443d      	add	r5, r7
 800821a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800821e:	42ab      	cmp	r3, r5
 8008220:	da4a      	bge.n	80082b8 <__gethex+0x294>
 8008222:	4621      	mov	r1, r4
 8008224:	9802      	ldr	r0, [sp, #8]
 8008226:	f000 fa75 	bl	8008714 <_Bfree>
 800822a:	2300      	movs	r3, #0
 800822c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800822e:	27a3      	movs	r7, #163	; 0xa3
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e789      	b.n	8008148 <__gethex+0x124>
 8008234:	1e73      	subs	r3, r6, #1
 8008236:	9a06      	ldr	r2, [sp, #24]
 8008238:	9307      	str	r3, [sp, #28]
 800823a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800823e:	4293      	cmp	r3, r2
 8008240:	d019      	beq.n	8008276 <__gethex+0x252>
 8008242:	f1bb 0f20 	cmp.w	fp, #32
 8008246:	d107      	bne.n	8008258 <__gethex+0x234>
 8008248:	9b04      	ldr	r3, [sp, #16]
 800824a:	9a01      	ldr	r2, [sp, #4]
 800824c:	f843 2b04 	str.w	r2, [r3], #4
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	2300      	movs	r3, #0
 8008254:	469b      	mov	fp, r3
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800825c:	f7ff fecd 	bl	8007ffa <__hexdig_fun>
 8008260:	9b01      	ldr	r3, [sp, #4]
 8008262:	f000 000f 	and.w	r0, r0, #15
 8008266:	fa00 f00b 	lsl.w	r0, r0, fp
 800826a:	4303      	orrs	r3, r0
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	f10b 0b04 	add.w	fp, fp, #4
 8008272:	9b07      	ldr	r3, [sp, #28]
 8008274:	e00d      	b.n	8008292 <__gethex+0x26e>
 8008276:	9a08      	ldr	r2, [sp, #32]
 8008278:	1e73      	subs	r3, r6, #1
 800827a:	4413      	add	r3, r2
 800827c:	42bb      	cmp	r3, r7
 800827e:	d3e0      	bcc.n	8008242 <__gethex+0x21e>
 8008280:	4618      	mov	r0, r3
 8008282:	4652      	mov	r2, sl
 8008284:	9903      	ldr	r1, [sp, #12]
 8008286:	9309      	str	r3, [sp, #36]	; 0x24
 8008288:	f001 f91e 	bl	80094c8 <strncmp>
 800828c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828e:	2800      	cmp	r0, #0
 8008290:	d1d7      	bne.n	8008242 <__gethex+0x21e>
 8008292:	461e      	mov	r6, r3
 8008294:	e78c      	b.n	80081b0 <__gethex+0x18c>
 8008296:	f04f 0a03 	mov.w	sl, #3
 800829a:	e7b9      	b.n	8008210 <__gethex+0x1ec>
 800829c:	da09      	bge.n	80082b2 <__gethex+0x28e>
 800829e:	1bf7      	subs	r7, r6, r7
 80082a0:	4621      	mov	r1, r4
 80082a2:	463a      	mov	r2, r7
 80082a4:	9802      	ldr	r0, [sp, #8]
 80082a6:	f000 fc4d 	bl	8008b44 <__lshift>
 80082aa:	4604      	mov	r4, r0
 80082ac:	1bed      	subs	r5, r5, r7
 80082ae:	f100 0914 	add.w	r9, r0, #20
 80082b2:	f04f 0a00 	mov.w	sl, #0
 80082b6:	e7b0      	b.n	800821a <__gethex+0x1f6>
 80082b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80082bc:	42a8      	cmp	r0, r5
 80082be:	dd72      	ble.n	80083a6 <__gethex+0x382>
 80082c0:	1b45      	subs	r5, r0, r5
 80082c2:	42ae      	cmp	r6, r5
 80082c4:	dc35      	bgt.n	8008332 <__gethex+0x30e>
 80082c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d029      	beq.n	8008322 <__gethex+0x2fe>
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d02b      	beq.n	800832a <__gethex+0x306>
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d11c      	bne.n	8008310 <__gethex+0x2ec>
 80082d6:	42ae      	cmp	r6, r5
 80082d8:	d11a      	bne.n	8008310 <__gethex+0x2ec>
 80082da:	2e01      	cmp	r6, #1
 80082dc:	d112      	bne.n	8008304 <__gethex+0x2e0>
 80082de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082e2:	9a05      	ldr	r2, [sp, #20]
 80082e4:	2762      	movs	r7, #98	; 0x62
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	2301      	movs	r3, #1
 80082ea:	6123      	str	r3, [r4, #16]
 80082ec:	f8c9 3000 	str.w	r3, [r9]
 80082f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082f2:	601c      	str	r4, [r3, #0]
 80082f4:	e728      	b.n	8008148 <__gethex+0x124>
 80082f6:	bf00      	nop
 80082f8:	0800a5c8 	.word	0x0800a5c8
 80082fc:	0800a550 	.word	0x0800a550
 8008300:	0800a561 	.word	0x0800a561
 8008304:	4620      	mov	r0, r4
 8008306:	1e71      	subs	r1, r6, #1
 8008308:	f000 fe5b 	bl	8008fc2 <__any_on>
 800830c:	2800      	cmp	r0, #0
 800830e:	d1e6      	bne.n	80082de <__gethex+0x2ba>
 8008310:	4621      	mov	r1, r4
 8008312:	9802      	ldr	r0, [sp, #8]
 8008314:	f000 f9fe 	bl	8008714 <_Bfree>
 8008318:	2300      	movs	r3, #0
 800831a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800831c:	2750      	movs	r7, #80	; 0x50
 800831e:	6013      	str	r3, [r2, #0]
 8008320:	e712      	b.n	8008148 <__gethex+0x124>
 8008322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1f3      	bne.n	8008310 <__gethex+0x2ec>
 8008328:	e7d9      	b.n	80082de <__gethex+0x2ba>
 800832a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1d6      	bne.n	80082de <__gethex+0x2ba>
 8008330:	e7ee      	b.n	8008310 <__gethex+0x2ec>
 8008332:	1e6f      	subs	r7, r5, #1
 8008334:	f1ba 0f00 	cmp.w	sl, #0
 8008338:	d132      	bne.n	80083a0 <__gethex+0x37c>
 800833a:	b127      	cbz	r7, 8008346 <__gethex+0x322>
 800833c:	4639      	mov	r1, r7
 800833e:	4620      	mov	r0, r4
 8008340:	f000 fe3f 	bl	8008fc2 <__any_on>
 8008344:	4682      	mov	sl, r0
 8008346:	2101      	movs	r1, #1
 8008348:	117b      	asrs	r3, r7, #5
 800834a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800834e:	f007 071f 	and.w	r7, r7, #31
 8008352:	fa01 f707 	lsl.w	r7, r1, r7
 8008356:	421f      	tst	r7, r3
 8008358:	f04f 0702 	mov.w	r7, #2
 800835c:	4629      	mov	r1, r5
 800835e:	4620      	mov	r0, r4
 8008360:	bf18      	it	ne
 8008362:	f04a 0a02 	orrne.w	sl, sl, #2
 8008366:	1b76      	subs	r6, r6, r5
 8008368:	f7ff fdf4 	bl	8007f54 <rshift>
 800836c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008370:	f1ba 0f00 	cmp.w	sl, #0
 8008374:	d048      	beq.n	8008408 <__gethex+0x3e4>
 8008376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d015      	beq.n	80083aa <__gethex+0x386>
 800837e:	2b03      	cmp	r3, #3
 8008380:	d017      	beq.n	80083b2 <__gethex+0x38e>
 8008382:	2b01      	cmp	r3, #1
 8008384:	d109      	bne.n	800839a <__gethex+0x376>
 8008386:	f01a 0f02 	tst.w	sl, #2
 800838a:	d006      	beq.n	800839a <__gethex+0x376>
 800838c:	f8d9 0000 	ldr.w	r0, [r9]
 8008390:	ea4a 0a00 	orr.w	sl, sl, r0
 8008394:	f01a 0f01 	tst.w	sl, #1
 8008398:	d10e      	bne.n	80083b8 <__gethex+0x394>
 800839a:	f047 0710 	orr.w	r7, r7, #16
 800839e:	e033      	b.n	8008408 <__gethex+0x3e4>
 80083a0:	f04f 0a01 	mov.w	sl, #1
 80083a4:	e7cf      	b.n	8008346 <__gethex+0x322>
 80083a6:	2701      	movs	r7, #1
 80083a8:	e7e2      	b.n	8008370 <__gethex+0x34c>
 80083aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083ac:	f1c3 0301 	rsb	r3, r3, #1
 80083b0:	9315      	str	r3, [sp, #84]	; 0x54
 80083b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0f0      	beq.n	800839a <__gethex+0x376>
 80083b8:	f04f 0c00 	mov.w	ip, #0
 80083bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80083c0:	f104 0314 	add.w	r3, r4, #20
 80083c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80083c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80083d6:	d01c      	beq.n	8008412 <__gethex+0x3ee>
 80083d8:	3201      	adds	r2, #1
 80083da:	6002      	str	r2, [r0, #0]
 80083dc:	2f02      	cmp	r7, #2
 80083de:	f104 0314 	add.w	r3, r4, #20
 80083e2:	d13d      	bne.n	8008460 <__gethex+0x43c>
 80083e4:	f8d8 2000 	ldr.w	r2, [r8]
 80083e8:	3a01      	subs	r2, #1
 80083ea:	42b2      	cmp	r2, r6
 80083ec:	d10a      	bne.n	8008404 <__gethex+0x3e0>
 80083ee:	2201      	movs	r2, #1
 80083f0:	1171      	asrs	r1, r6, #5
 80083f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083f6:	f006 061f 	and.w	r6, r6, #31
 80083fa:	fa02 f606 	lsl.w	r6, r2, r6
 80083fe:	421e      	tst	r6, r3
 8008400:	bf18      	it	ne
 8008402:	4617      	movne	r7, r2
 8008404:	f047 0720 	orr.w	r7, r7, #32
 8008408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800840a:	601c      	str	r4, [r3, #0]
 800840c:	9b05      	ldr	r3, [sp, #20]
 800840e:	601d      	str	r5, [r3, #0]
 8008410:	e69a      	b.n	8008148 <__gethex+0x124>
 8008412:	4299      	cmp	r1, r3
 8008414:	f843 cc04 	str.w	ip, [r3, #-4]
 8008418:	d8d8      	bhi.n	80083cc <__gethex+0x3a8>
 800841a:	68a3      	ldr	r3, [r4, #8]
 800841c:	459b      	cmp	fp, r3
 800841e:	db17      	blt.n	8008450 <__gethex+0x42c>
 8008420:	6861      	ldr	r1, [r4, #4]
 8008422:	9802      	ldr	r0, [sp, #8]
 8008424:	3101      	adds	r1, #1
 8008426:	f000 f935 	bl	8008694 <_Balloc>
 800842a:	4681      	mov	r9, r0
 800842c:	b918      	cbnz	r0, 8008436 <__gethex+0x412>
 800842e:	4602      	mov	r2, r0
 8008430:	2184      	movs	r1, #132	; 0x84
 8008432:	4b19      	ldr	r3, [pc, #100]	; (8008498 <__gethex+0x474>)
 8008434:	e6ab      	b.n	800818e <__gethex+0x16a>
 8008436:	6922      	ldr	r2, [r4, #16]
 8008438:	f104 010c 	add.w	r1, r4, #12
 800843c:	3202      	adds	r2, #2
 800843e:	0092      	lsls	r2, r2, #2
 8008440:	300c      	adds	r0, #12
 8008442:	f000 f919 	bl	8008678 <memcpy>
 8008446:	4621      	mov	r1, r4
 8008448:	9802      	ldr	r0, [sp, #8]
 800844a:	f000 f963 	bl	8008714 <_Bfree>
 800844e:	464c      	mov	r4, r9
 8008450:	6923      	ldr	r3, [r4, #16]
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	6122      	str	r2, [r4, #16]
 8008456:	2201      	movs	r2, #1
 8008458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800845c:	615a      	str	r2, [r3, #20]
 800845e:	e7bd      	b.n	80083dc <__gethex+0x3b8>
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	455a      	cmp	r2, fp
 8008464:	dd0b      	ble.n	800847e <__gethex+0x45a>
 8008466:	2101      	movs	r1, #1
 8008468:	4620      	mov	r0, r4
 800846a:	f7ff fd73 	bl	8007f54 <rshift>
 800846e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008472:	3501      	adds	r5, #1
 8008474:	42ab      	cmp	r3, r5
 8008476:	f6ff aed4 	blt.w	8008222 <__gethex+0x1fe>
 800847a:	2701      	movs	r7, #1
 800847c:	e7c2      	b.n	8008404 <__gethex+0x3e0>
 800847e:	f016 061f 	ands.w	r6, r6, #31
 8008482:	d0fa      	beq.n	800847a <__gethex+0x456>
 8008484:	4453      	add	r3, sl
 8008486:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800848a:	f000 f9f5 	bl	8008878 <__hi0bits>
 800848e:	f1c6 0620 	rsb	r6, r6, #32
 8008492:	42b0      	cmp	r0, r6
 8008494:	dbe7      	blt.n	8008466 <__gethex+0x442>
 8008496:	e7f0      	b.n	800847a <__gethex+0x456>
 8008498:	0800a550 	.word	0x0800a550

0800849c <L_shift>:
 800849c:	f1c2 0208 	rsb	r2, r2, #8
 80084a0:	0092      	lsls	r2, r2, #2
 80084a2:	b570      	push	{r4, r5, r6, lr}
 80084a4:	f1c2 0620 	rsb	r6, r2, #32
 80084a8:	6843      	ldr	r3, [r0, #4]
 80084aa:	6804      	ldr	r4, [r0, #0]
 80084ac:	fa03 f506 	lsl.w	r5, r3, r6
 80084b0:	432c      	orrs	r4, r5
 80084b2:	40d3      	lsrs	r3, r2
 80084b4:	6004      	str	r4, [r0, #0]
 80084b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80084ba:	4288      	cmp	r0, r1
 80084bc:	d3f4      	bcc.n	80084a8 <L_shift+0xc>
 80084be:	bd70      	pop	{r4, r5, r6, pc}

080084c0 <__match>:
 80084c0:	b530      	push	{r4, r5, lr}
 80084c2:	6803      	ldr	r3, [r0, #0]
 80084c4:	3301      	adds	r3, #1
 80084c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ca:	b914      	cbnz	r4, 80084d2 <__match+0x12>
 80084cc:	6003      	str	r3, [r0, #0]
 80084ce:	2001      	movs	r0, #1
 80084d0:	bd30      	pop	{r4, r5, pc}
 80084d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80084da:	2d19      	cmp	r5, #25
 80084dc:	bf98      	it	ls
 80084de:	3220      	addls	r2, #32
 80084e0:	42a2      	cmp	r2, r4
 80084e2:	d0f0      	beq.n	80084c6 <__match+0x6>
 80084e4:	2000      	movs	r0, #0
 80084e6:	e7f3      	b.n	80084d0 <__match+0x10>

080084e8 <__hexnan>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	2500      	movs	r5, #0
 80084ee:	680b      	ldr	r3, [r1, #0]
 80084f0:	4682      	mov	sl, r0
 80084f2:	115e      	asrs	r6, r3, #5
 80084f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80084f8:	f013 031f 	ands.w	r3, r3, #31
 80084fc:	bf18      	it	ne
 80084fe:	3604      	addne	r6, #4
 8008500:	1f37      	subs	r7, r6, #4
 8008502:	46b9      	mov	r9, r7
 8008504:	463c      	mov	r4, r7
 8008506:	46ab      	mov	fp, r5
 8008508:	b087      	sub	sp, #28
 800850a:	4690      	mov	r8, r2
 800850c:	6802      	ldr	r2, [r0, #0]
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	f846 5c04 	str.w	r5, [r6, #-4]
 8008514:	9502      	str	r5, [sp, #8]
 8008516:	7851      	ldrb	r1, [r2, #1]
 8008518:	1c53      	adds	r3, r2, #1
 800851a:	9303      	str	r3, [sp, #12]
 800851c:	b341      	cbz	r1, 8008570 <__hexnan+0x88>
 800851e:	4608      	mov	r0, r1
 8008520:	9205      	str	r2, [sp, #20]
 8008522:	9104      	str	r1, [sp, #16]
 8008524:	f7ff fd69 	bl	8007ffa <__hexdig_fun>
 8008528:	2800      	cmp	r0, #0
 800852a:	d14f      	bne.n	80085cc <__hexnan+0xe4>
 800852c:	9904      	ldr	r1, [sp, #16]
 800852e:	9a05      	ldr	r2, [sp, #20]
 8008530:	2920      	cmp	r1, #32
 8008532:	d818      	bhi.n	8008566 <__hexnan+0x7e>
 8008534:	9b02      	ldr	r3, [sp, #8]
 8008536:	459b      	cmp	fp, r3
 8008538:	dd13      	ble.n	8008562 <__hexnan+0x7a>
 800853a:	454c      	cmp	r4, r9
 800853c:	d206      	bcs.n	800854c <__hexnan+0x64>
 800853e:	2d07      	cmp	r5, #7
 8008540:	dc04      	bgt.n	800854c <__hexnan+0x64>
 8008542:	462a      	mov	r2, r5
 8008544:	4649      	mov	r1, r9
 8008546:	4620      	mov	r0, r4
 8008548:	f7ff ffa8 	bl	800849c <L_shift>
 800854c:	4544      	cmp	r4, r8
 800854e:	d950      	bls.n	80085f2 <__hexnan+0x10a>
 8008550:	2300      	movs	r3, #0
 8008552:	f1a4 0904 	sub.w	r9, r4, #4
 8008556:	f844 3c04 	str.w	r3, [r4, #-4]
 800855a:	461d      	mov	r5, r3
 800855c:	464c      	mov	r4, r9
 800855e:	f8cd b008 	str.w	fp, [sp, #8]
 8008562:	9a03      	ldr	r2, [sp, #12]
 8008564:	e7d7      	b.n	8008516 <__hexnan+0x2e>
 8008566:	2929      	cmp	r1, #41	; 0x29
 8008568:	d156      	bne.n	8008618 <__hexnan+0x130>
 800856a:	3202      	adds	r2, #2
 800856c:	f8ca 2000 	str.w	r2, [sl]
 8008570:	f1bb 0f00 	cmp.w	fp, #0
 8008574:	d050      	beq.n	8008618 <__hexnan+0x130>
 8008576:	454c      	cmp	r4, r9
 8008578:	d206      	bcs.n	8008588 <__hexnan+0xa0>
 800857a:	2d07      	cmp	r5, #7
 800857c:	dc04      	bgt.n	8008588 <__hexnan+0xa0>
 800857e:	462a      	mov	r2, r5
 8008580:	4649      	mov	r1, r9
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff ff8a 	bl	800849c <L_shift>
 8008588:	4544      	cmp	r4, r8
 800858a:	d934      	bls.n	80085f6 <__hexnan+0x10e>
 800858c:	4623      	mov	r3, r4
 800858e:	f1a8 0204 	sub.w	r2, r8, #4
 8008592:	f853 1b04 	ldr.w	r1, [r3], #4
 8008596:	429f      	cmp	r7, r3
 8008598:	f842 1f04 	str.w	r1, [r2, #4]!
 800859c:	d2f9      	bcs.n	8008592 <__hexnan+0xaa>
 800859e:	1b3b      	subs	r3, r7, r4
 80085a0:	f023 0303 	bic.w	r3, r3, #3
 80085a4:	3304      	adds	r3, #4
 80085a6:	3401      	adds	r4, #1
 80085a8:	3e03      	subs	r6, #3
 80085aa:	42b4      	cmp	r4, r6
 80085ac:	bf88      	it	hi
 80085ae:	2304      	movhi	r3, #4
 80085b0:	2200      	movs	r2, #0
 80085b2:	4443      	add	r3, r8
 80085b4:	f843 2b04 	str.w	r2, [r3], #4
 80085b8:	429f      	cmp	r7, r3
 80085ba:	d2fb      	bcs.n	80085b4 <__hexnan+0xcc>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	b91b      	cbnz	r3, 80085c8 <__hexnan+0xe0>
 80085c0:	4547      	cmp	r7, r8
 80085c2:	d127      	bne.n	8008614 <__hexnan+0x12c>
 80085c4:	2301      	movs	r3, #1
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	2005      	movs	r0, #5
 80085ca:	e026      	b.n	800861a <__hexnan+0x132>
 80085cc:	3501      	adds	r5, #1
 80085ce:	2d08      	cmp	r5, #8
 80085d0:	f10b 0b01 	add.w	fp, fp, #1
 80085d4:	dd06      	ble.n	80085e4 <__hexnan+0xfc>
 80085d6:	4544      	cmp	r4, r8
 80085d8:	d9c3      	bls.n	8008562 <__hexnan+0x7a>
 80085da:	2300      	movs	r3, #0
 80085dc:	2501      	movs	r5, #1
 80085de:	f844 3c04 	str.w	r3, [r4, #-4]
 80085e2:	3c04      	subs	r4, #4
 80085e4:	6822      	ldr	r2, [r4, #0]
 80085e6:	f000 000f 	and.w	r0, r0, #15
 80085ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80085ee:	6022      	str	r2, [r4, #0]
 80085f0:	e7b7      	b.n	8008562 <__hexnan+0x7a>
 80085f2:	2508      	movs	r5, #8
 80085f4:	e7b5      	b.n	8008562 <__hexnan+0x7a>
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0df      	beq.n	80085bc <__hexnan+0xd4>
 80085fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008600:	f1c3 0320 	rsb	r3, r3, #32
 8008604:	fa22 f303 	lsr.w	r3, r2, r3
 8008608:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800860c:	401a      	ands	r2, r3
 800860e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008612:	e7d3      	b.n	80085bc <__hexnan+0xd4>
 8008614:	3f04      	subs	r7, #4
 8008616:	e7d1      	b.n	80085bc <__hexnan+0xd4>
 8008618:	2004      	movs	r0, #4
 800861a:	b007      	add	sp, #28
 800861c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008620 <_localeconv_r>:
 8008620:	4800      	ldr	r0, [pc, #0]	; (8008624 <_localeconv_r+0x4>)
 8008622:	4770      	bx	lr
 8008624:	20000164 	.word	0x20000164

08008628 <malloc>:
 8008628:	4b02      	ldr	r3, [pc, #8]	; (8008634 <malloc+0xc>)
 800862a:	4601      	mov	r1, r0
 800862c:	6818      	ldr	r0, [r3, #0]
 800862e:	f000 bd65 	b.w	80090fc <_malloc_r>
 8008632:	bf00      	nop
 8008634:	2000000c 	.word	0x2000000c

08008638 <__ascii_mbtowc>:
 8008638:	b082      	sub	sp, #8
 800863a:	b901      	cbnz	r1, 800863e <__ascii_mbtowc+0x6>
 800863c:	a901      	add	r1, sp, #4
 800863e:	b142      	cbz	r2, 8008652 <__ascii_mbtowc+0x1a>
 8008640:	b14b      	cbz	r3, 8008656 <__ascii_mbtowc+0x1e>
 8008642:	7813      	ldrb	r3, [r2, #0]
 8008644:	600b      	str	r3, [r1, #0]
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	1e10      	subs	r0, r2, #0
 800864a:	bf18      	it	ne
 800864c:	2001      	movne	r0, #1
 800864e:	b002      	add	sp, #8
 8008650:	4770      	bx	lr
 8008652:	4610      	mov	r0, r2
 8008654:	e7fb      	b.n	800864e <__ascii_mbtowc+0x16>
 8008656:	f06f 0001 	mvn.w	r0, #1
 800865a:	e7f8      	b.n	800864e <__ascii_mbtowc+0x16>

0800865c <memchr>:
 800865c:	4603      	mov	r3, r0
 800865e:	b510      	push	{r4, lr}
 8008660:	b2c9      	uxtb	r1, r1
 8008662:	4402      	add	r2, r0
 8008664:	4293      	cmp	r3, r2
 8008666:	4618      	mov	r0, r3
 8008668:	d101      	bne.n	800866e <memchr+0x12>
 800866a:	2000      	movs	r0, #0
 800866c:	e003      	b.n	8008676 <memchr+0x1a>
 800866e:	7804      	ldrb	r4, [r0, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	428c      	cmp	r4, r1
 8008674:	d1f6      	bne.n	8008664 <memchr+0x8>
 8008676:	bd10      	pop	{r4, pc}

08008678 <memcpy>:
 8008678:	440a      	add	r2, r1
 800867a:	4291      	cmp	r1, r2
 800867c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008680:	d100      	bne.n	8008684 <memcpy+0xc>
 8008682:	4770      	bx	lr
 8008684:	b510      	push	{r4, lr}
 8008686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800868a:	4291      	cmp	r1, r2
 800868c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008690:	d1f9      	bne.n	8008686 <memcpy+0xe>
 8008692:	bd10      	pop	{r4, pc}

08008694 <_Balloc>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008698:	4604      	mov	r4, r0
 800869a:	460d      	mov	r5, r1
 800869c:	b976      	cbnz	r6, 80086bc <_Balloc+0x28>
 800869e:	2010      	movs	r0, #16
 80086a0:	f7ff ffc2 	bl	8008628 <malloc>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6260      	str	r0, [r4, #36]	; 0x24
 80086a8:	b920      	cbnz	r0, 80086b4 <_Balloc+0x20>
 80086aa:	2166      	movs	r1, #102	; 0x66
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <_Balloc+0x78>)
 80086ae:	4818      	ldr	r0, [pc, #96]	; (8008710 <_Balloc+0x7c>)
 80086b0:	f000 ff2c 	bl	800950c <__assert_func>
 80086b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086b8:	6006      	str	r6, [r0, #0]
 80086ba:	60c6      	str	r6, [r0, #12]
 80086bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086be:	68f3      	ldr	r3, [r6, #12]
 80086c0:	b183      	cbz	r3, 80086e4 <_Balloc+0x50>
 80086c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086ca:	b9b8      	cbnz	r0, 80086fc <_Balloc+0x68>
 80086cc:	2101      	movs	r1, #1
 80086ce:	fa01 f605 	lsl.w	r6, r1, r5
 80086d2:	1d72      	adds	r2, r6, #5
 80086d4:	4620      	mov	r0, r4
 80086d6:	0092      	lsls	r2, r2, #2
 80086d8:	f000 fc94 	bl	8009004 <_calloc_r>
 80086dc:	b160      	cbz	r0, 80086f8 <_Balloc+0x64>
 80086de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086e2:	e00e      	b.n	8008702 <_Balloc+0x6e>
 80086e4:	2221      	movs	r2, #33	; 0x21
 80086e6:	2104      	movs	r1, #4
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 fc8b 	bl	8009004 <_calloc_r>
 80086ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086f0:	60f0      	str	r0, [r6, #12]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e4      	bne.n	80086c2 <_Balloc+0x2e>
 80086f8:	2000      	movs	r0, #0
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	6802      	ldr	r2, [r0, #0]
 80086fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008702:	2300      	movs	r3, #0
 8008704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008708:	e7f7      	b.n	80086fa <_Balloc+0x66>
 800870a:	bf00      	nop
 800870c:	0800a4de 	.word	0x0800a4de
 8008710:	0800a5dc 	.word	0x0800a5dc

08008714 <_Bfree>:
 8008714:	b570      	push	{r4, r5, r6, lr}
 8008716:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b976      	cbnz	r6, 800873c <_Bfree+0x28>
 800871e:	2010      	movs	r0, #16
 8008720:	f7ff ff82 	bl	8008628 <malloc>
 8008724:	4602      	mov	r2, r0
 8008726:	6268      	str	r0, [r5, #36]	; 0x24
 8008728:	b920      	cbnz	r0, 8008734 <_Bfree+0x20>
 800872a:	218a      	movs	r1, #138	; 0x8a
 800872c:	4b08      	ldr	r3, [pc, #32]	; (8008750 <_Bfree+0x3c>)
 800872e:	4809      	ldr	r0, [pc, #36]	; (8008754 <_Bfree+0x40>)
 8008730:	f000 feec 	bl	800950c <__assert_func>
 8008734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008738:	6006      	str	r6, [r0, #0]
 800873a:	60c6      	str	r6, [r0, #12]
 800873c:	b13c      	cbz	r4, 800874e <_Bfree+0x3a>
 800873e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008740:	6862      	ldr	r2, [r4, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008748:	6021      	str	r1, [r4, #0]
 800874a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800874e:	bd70      	pop	{r4, r5, r6, pc}
 8008750:	0800a4de 	.word	0x0800a4de
 8008754:	0800a5dc 	.word	0x0800a5dc

08008758 <__multadd>:
 8008758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800875c:	4607      	mov	r7, r0
 800875e:	460c      	mov	r4, r1
 8008760:	461e      	mov	r6, r3
 8008762:	2000      	movs	r0, #0
 8008764:	690d      	ldr	r5, [r1, #16]
 8008766:	f101 0c14 	add.w	ip, r1, #20
 800876a:	f8dc 3000 	ldr.w	r3, [ip]
 800876e:	3001      	adds	r0, #1
 8008770:	b299      	uxth	r1, r3
 8008772:	fb02 6101 	mla	r1, r2, r1, r6
 8008776:	0c1e      	lsrs	r6, r3, #16
 8008778:	0c0b      	lsrs	r3, r1, #16
 800877a:	fb02 3306 	mla	r3, r2, r6, r3
 800877e:	b289      	uxth	r1, r1
 8008780:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008784:	4285      	cmp	r5, r0
 8008786:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800878a:	f84c 1b04 	str.w	r1, [ip], #4
 800878e:	dcec      	bgt.n	800876a <__multadd+0x12>
 8008790:	b30e      	cbz	r6, 80087d6 <__multadd+0x7e>
 8008792:	68a3      	ldr	r3, [r4, #8]
 8008794:	42ab      	cmp	r3, r5
 8008796:	dc19      	bgt.n	80087cc <__multadd+0x74>
 8008798:	6861      	ldr	r1, [r4, #4]
 800879a:	4638      	mov	r0, r7
 800879c:	3101      	adds	r1, #1
 800879e:	f7ff ff79 	bl	8008694 <_Balloc>
 80087a2:	4680      	mov	r8, r0
 80087a4:	b928      	cbnz	r0, 80087b2 <__multadd+0x5a>
 80087a6:	4602      	mov	r2, r0
 80087a8:	21b5      	movs	r1, #181	; 0xb5
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <__multadd+0x84>)
 80087ac:	480c      	ldr	r0, [pc, #48]	; (80087e0 <__multadd+0x88>)
 80087ae:	f000 fead 	bl	800950c <__assert_func>
 80087b2:	6922      	ldr	r2, [r4, #16]
 80087b4:	f104 010c 	add.w	r1, r4, #12
 80087b8:	3202      	adds	r2, #2
 80087ba:	0092      	lsls	r2, r2, #2
 80087bc:	300c      	adds	r0, #12
 80087be:	f7ff ff5b 	bl	8008678 <memcpy>
 80087c2:	4621      	mov	r1, r4
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff ffa5 	bl	8008714 <_Bfree>
 80087ca:	4644      	mov	r4, r8
 80087cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087d0:	3501      	adds	r5, #1
 80087d2:	615e      	str	r6, [r3, #20]
 80087d4:	6125      	str	r5, [r4, #16]
 80087d6:	4620      	mov	r0, r4
 80087d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087dc:	0800a550 	.word	0x0800a550
 80087e0:	0800a5dc 	.word	0x0800a5dc

080087e4 <__s2b>:
 80087e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e8:	4615      	mov	r5, r2
 80087ea:	2209      	movs	r2, #9
 80087ec:	461f      	mov	r7, r3
 80087ee:	3308      	adds	r3, #8
 80087f0:	460c      	mov	r4, r1
 80087f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80087f6:	4606      	mov	r6, r0
 80087f8:	2201      	movs	r2, #1
 80087fa:	2100      	movs	r1, #0
 80087fc:	429a      	cmp	r2, r3
 80087fe:	db09      	blt.n	8008814 <__s2b+0x30>
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff ff47 	bl	8008694 <_Balloc>
 8008806:	b940      	cbnz	r0, 800881a <__s2b+0x36>
 8008808:	4602      	mov	r2, r0
 800880a:	21ce      	movs	r1, #206	; 0xce
 800880c:	4b18      	ldr	r3, [pc, #96]	; (8008870 <__s2b+0x8c>)
 800880e:	4819      	ldr	r0, [pc, #100]	; (8008874 <__s2b+0x90>)
 8008810:	f000 fe7c 	bl	800950c <__assert_func>
 8008814:	0052      	lsls	r2, r2, #1
 8008816:	3101      	adds	r1, #1
 8008818:	e7f0      	b.n	80087fc <__s2b+0x18>
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	2d09      	cmp	r5, #9
 800881e:	6143      	str	r3, [r0, #20]
 8008820:	f04f 0301 	mov.w	r3, #1
 8008824:	6103      	str	r3, [r0, #16]
 8008826:	dd16      	ble.n	8008856 <__s2b+0x72>
 8008828:	f104 0909 	add.w	r9, r4, #9
 800882c:	46c8      	mov	r8, r9
 800882e:	442c      	add	r4, r5
 8008830:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008834:	4601      	mov	r1, r0
 8008836:	220a      	movs	r2, #10
 8008838:	4630      	mov	r0, r6
 800883a:	3b30      	subs	r3, #48	; 0x30
 800883c:	f7ff ff8c 	bl	8008758 <__multadd>
 8008840:	45a0      	cmp	r8, r4
 8008842:	d1f5      	bne.n	8008830 <__s2b+0x4c>
 8008844:	f1a5 0408 	sub.w	r4, r5, #8
 8008848:	444c      	add	r4, r9
 800884a:	1b2d      	subs	r5, r5, r4
 800884c:	1963      	adds	r3, r4, r5
 800884e:	42bb      	cmp	r3, r7
 8008850:	db04      	blt.n	800885c <__s2b+0x78>
 8008852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008856:	2509      	movs	r5, #9
 8008858:	340a      	adds	r4, #10
 800885a:	e7f6      	b.n	800884a <__s2b+0x66>
 800885c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008860:	4601      	mov	r1, r0
 8008862:	220a      	movs	r2, #10
 8008864:	4630      	mov	r0, r6
 8008866:	3b30      	subs	r3, #48	; 0x30
 8008868:	f7ff ff76 	bl	8008758 <__multadd>
 800886c:	e7ee      	b.n	800884c <__s2b+0x68>
 800886e:	bf00      	nop
 8008870:	0800a550 	.word	0x0800a550
 8008874:	0800a5dc 	.word	0x0800a5dc

08008878 <__hi0bits>:
 8008878:	0c02      	lsrs	r2, r0, #16
 800887a:	0412      	lsls	r2, r2, #16
 800887c:	4603      	mov	r3, r0
 800887e:	b9ca      	cbnz	r2, 80088b4 <__hi0bits+0x3c>
 8008880:	0403      	lsls	r3, r0, #16
 8008882:	2010      	movs	r0, #16
 8008884:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008888:	bf04      	itt	eq
 800888a:	021b      	lsleq	r3, r3, #8
 800888c:	3008      	addeq	r0, #8
 800888e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008892:	bf04      	itt	eq
 8008894:	011b      	lsleq	r3, r3, #4
 8008896:	3004      	addeq	r0, #4
 8008898:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800889c:	bf04      	itt	eq
 800889e:	009b      	lsleq	r3, r3, #2
 80088a0:	3002      	addeq	r0, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	db05      	blt.n	80088b2 <__hi0bits+0x3a>
 80088a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80088aa:	f100 0001 	add.w	r0, r0, #1
 80088ae:	bf08      	it	eq
 80088b0:	2020      	moveq	r0, #32
 80088b2:	4770      	bx	lr
 80088b4:	2000      	movs	r0, #0
 80088b6:	e7e5      	b.n	8008884 <__hi0bits+0xc>

080088b8 <__lo0bits>:
 80088b8:	6803      	ldr	r3, [r0, #0]
 80088ba:	4602      	mov	r2, r0
 80088bc:	f013 0007 	ands.w	r0, r3, #7
 80088c0:	d00b      	beq.n	80088da <__lo0bits+0x22>
 80088c2:	07d9      	lsls	r1, r3, #31
 80088c4:	d421      	bmi.n	800890a <__lo0bits+0x52>
 80088c6:	0798      	lsls	r0, r3, #30
 80088c8:	bf49      	itett	mi
 80088ca:	085b      	lsrmi	r3, r3, #1
 80088cc:	089b      	lsrpl	r3, r3, #2
 80088ce:	2001      	movmi	r0, #1
 80088d0:	6013      	strmi	r3, [r2, #0]
 80088d2:	bf5c      	itt	pl
 80088d4:	2002      	movpl	r0, #2
 80088d6:	6013      	strpl	r3, [r2, #0]
 80088d8:	4770      	bx	lr
 80088da:	b299      	uxth	r1, r3
 80088dc:	b909      	cbnz	r1, 80088e2 <__lo0bits+0x2a>
 80088de:	2010      	movs	r0, #16
 80088e0:	0c1b      	lsrs	r3, r3, #16
 80088e2:	b2d9      	uxtb	r1, r3
 80088e4:	b909      	cbnz	r1, 80088ea <__lo0bits+0x32>
 80088e6:	3008      	adds	r0, #8
 80088e8:	0a1b      	lsrs	r3, r3, #8
 80088ea:	0719      	lsls	r1, r3, #28
 80088ec:	bf04      	itt	eq
 80088ee:	091b      	lsreq	r3, r3, #4
 80088f0:	3004      	addeq	r0, #4
 80088f2:	0799      	lsls	r1, r3, #30
 80088f4:	bf04      	itt	eq
 80088f6:	089b      	lsreq	r3, r3, #2
 80088f8:	3002      	addeq	r0, #2
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	d403      	bmi.n	8008906 <__lo0bits+0x4e>
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	f100 0001 	add.w	r0, r0, #1
 8008904:	d003      	beq.n	800890e <__lo0bits+0x56>
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	4770      	bx	lr
 800890a:	2000      	movs	r0, #0
 800890c:	4770      	bx	lr
 800890e:	2020      	movs	r0, #32
 8008910:	4770      	bx	lr
	...

08008914 <__i2b>:
 8008914:	b510      	push	{r4, lr}
 8008916:	460c      	mov	r4, r1
 8008918:	2101      	movs	r1, #1
 800891a:	f7ff febb 	bl	8008694 <_Balloc>
 800891e:	4602      	mov	r2, r0
 8008920:	b928      	cbnz	r0, 800892e <__i2b+0x1a>
 8008922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008926:	4b04      	ldr	r3, [pc, #16]	; (8008938 <__i2b+0x24>)
 8008928:	4804      	ldr	r0, [pc, #16]	; (800893c <__i2b+0x28>)
 800892a:	f000 fdef 	bl	800950c <__assert_func>
 800892e:	2301      	movs	r3, #1
 8008930:	6144      	str	r4, [r0, #20]
 8008932:	6103      	str	r3, [r0, #16]
 8008934:	bd10      	pop	{r4, pc}
 8008936:	bf00      	nop
 8008938:	0800a550 	.word	0x0800a550
 800893c:	0800a5dc 	.word	0x0800a5dc

08008940 <__multiply>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	4691      	mov	r9, r2
 8008946:	690a      	ldr	r2, [r1, #16]
 8008948:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800894c:	460c      	mov	r4, r1
 800894e:	429a      	cmp	r2, r3
 8008950:	bfbe      	ittt	lt
 8008952:	460b      	movlt	r3, r1
 8008954:	464c      	movlt	r4, r9
 8008956:	4699      	movlt	r9, r3
 8008958:	6927      	ldr	r7, [r4, #16]
 800895a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800895e:	68a3      	ldr	r3, [r4, #8]
 8008960:	6861      	ldr	r1, [r4, #4]
 8008962:	eb07 060a 	add.w	r6, r7, sl
 8008966:	42b3      	cmp	r3, r6
 8008968:	b085      	sub	sp, #20
 800896a:	bfb8      	it	lt
 800896c:	3101      	addlt	r1, #1
 800896e:	f7ff fe91 	bl	8008694 <_Balloc>
 8008972:	b930      	cbnz	r0, 8008982 <__multiply+0x42>
 8008974:	4602      	mov	r2, r0
 8008976:	f240 115d 	movw	r1, #349	; 0x15d
 800897a:	4b43      	ldr	r3, [pc, #268]	; (8008a88 <__multiply+0x148>)
 800897c:	4843      	ldr	r0, [pc, #268]	; (8008a8c <__multiply+0x14c>)
 800897e:	f000 fdc5 	bl	800950c <__assert_func>
 8008982:	f100 0514 	add.w	r5, r0, #20
 8008986:	462b      	mov	r3, r5
 8008988:	2200      	movs	r2, #0
 800898a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800898e:	4543      	cmp	r3, r8
 8008990:	d321      	bcc.n	80089d6 <__multiply+0x96>
 8008992:	f104 0314 	add.w	r3, r4, #20
 8008996:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800899a:	f109 0314 	add.w	r3, r9, #20
 800899e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089a2:	9202      	str	r2, [sp, #8]
 80089a4:	1b3a      	subs	r2, r7, r4
 80089a6:	3a15      	subs	r2, #21
 80089a8:	f022 0203 	bic.w	r2, r2, #3
 80089ac:	3204      	adds	r2, #4
 80089ae:	f104 0115 	add.w	r1, r4, #21
 80089b2:	428f      	cmp	r7, r1
 80089b4:	bf38      	it	cc
 80089b6:	2204      	movcc	r2, #4
 80089b8:	9201      	str	r2, [sp, #4]
 80089ba:	9a02      	ldr	r2, [sp, #8]
 80089bc:	9303      	str	r3, [sp, #12]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d80c      	bhi.n	80089dc <__multiply+0x9c>
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	dd03      	ble.n	80089ce <__multiply+0x8e>
 80089c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d059      	beq.n	8008a82 <__multiply+0x142>
 80089ce:	6106      	str	r6, [r0, #16]
 80089d0:	b005      	add	sp, #20
 80089d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d6:	f843 2b04 	str.w	r2, [r3], #4
 80089da:	e7d8      	b.n	800898e <__multiply+0x4e>
 80089dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80089e0:	f1ba 0f00 	cmp.w	sl, #0
 80089e4:	d023      	beq.n	8008a2e <__multiply+0xee>
 80089e6:	46a9      	mov	r9, r5
 80089e8:	f04f 0c00 	mov.w	ip, #0
 80089ec:	f104 0e14 	add.w	lr, r4, #20
 80089f0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089f4:	f8d9 1000 	ldr.w	r1, [r9]
 80089f8:	fa1f fb82 	uxth.w	fp, r2
 80089fc:	b289      	uxth	r1, r1
 80089fe:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a02:	4461      	add	r1, ip
 8008a04:	f8d9 c000 	ldr.w	ip, [r9]
 8008a08:	0c12      	lsrs	r2, r2, #16
 8008a0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008a0e:	fb0a c202 	mla	r2, sl, r2, ip
 8008a12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a16:	b289      	uxth	r1, r1
 8008a18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a1c:	4577      	cmp	r7, lr
 8008a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a22:	f849 1b04 	str.w	r1, [r9], #4
 8008a26:	d8e3      	bhi.n	80089f0 <__multiply+0xb0>
 8008a28:	9a01      	ldr	r2, [sp, #4]
 8008a2a:	f845 c002 	str.w	ip, [r5, r2]
 8008a2e:	9a03      	ldr	r2, [sp, #12]
 8008a30:	3304      	adds	r3, #4
 8008a32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a36:	f1b9 0f00 	cmp.w	r9, #0
 8008a3a:	d020      	beq.n	8008a7e <__multiply+0x13e>
 8008a3c:	46ae      	mov	lr, r5
 8008a3e:	f04f 0a00 	mov.w	sl, #0
 8008a42:	6829      	ldr	r1, [r5, #0]
 8008a44:	f104 0c14 	add.w	ip, r4, #20
 8008a48:	f8bc b000 	ldrh.w	fp, [ip]
 8008a4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a50:	b289      	uxth	r1, r1
 8008a52:	fb09 220b 	mla	r2, r9, fp, r2
 8008a56:	4492      	add	sl, r2
 8008a58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a5c:	f84e 1b04 	str.w	r1, [lr], #4
 8008a60:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a64:	f8be 1000 	ldrh.w	r1, [lr]
 8008a68:	0c12      	lsrs	r2, r2, #16
 8008a6a:	fb09 1102 	mla	r1, r9, r2, r1
 8008a6e:	4567      	cmp	r7, ip
 8008a70:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a78:	d8e6      	bhi.n	8008a48 <__multiply+0x108>
 8008a7a:	9a01      	ldr	r2, [sp, #4]
 8008a7c:	50a9      	str	r1, [r5, r2]
 8008a7e:	3504      	adds	r5, #4
 8008a80:	e79b      	b.n	80089ba <__multiply+0x7a>
 8008a82:	3e01      	subs	r6, #1
 8008a84:	e79d      	b.n	80089c2 <__multiply+0x82>
 8008a86:	bf00      	nop
 8008a88:	0800a550 	.word	0x0800a550
 8008a8c:	0800a5dc 	.word	0x0800a5dc

08008a90 <__pow5mult>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	4615      	mov	r5, r2
 8008a96:	f012 0203 	ands.w	r2, r2, #3
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	460f      	mov	r7, r1
 8008a9e:	d007      	beq.n	8008ab0 <__pow5mult+0x20>
 8008aa0:	4c25      	ldr	r4, [pc, #148]	; (8008b38 <__pow5mult+0xa8>)
 8008aa2:	3a01      	subs	r2, #1
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008aaa:	f7ff fe55 	bl	8008758 <__multadd>
 8008aae:	4607      	mov	r7, r0
 8008ab0:	10ad      	asrs	r5, r5, #2
 8008ab2:	d03d      	beq.n	8008b30 <__pow5mult+0xa0>
 8008ab4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ab6:	b97c      	cbnz	r4, 8008ad8 <__pow5mult+0x48>
 8008ab8:	2010      	movs	r0, #16
 8008aba:	f7ff fdb5 	bl	8008628 <malloc>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6270      	str	r0, [r6, #36]	; 0x24
 8008ac2:	b928      	cbnz	r0, 8008ad0 <__pow5mult+0x40>
 8008ac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ac8:	4b1c      	ldr	r3, [pc, #112]	; (8008b3c <__pow5mult+0xac>)
 8008aca:	481d      	ldr	r0, [pc, #116]	; (8008b40 <__pow5mult+0xb0>)
 8008acc:	f000 fd1e 	bl	800950c <__assert_func>
 8008ad0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ad4:	6004      	str	r4, [r0, #0]
 8008ad6:	60c4      	str	r4, [r0, #12]
 8008ad8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008adc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ae0:	b94c      	cbnz	r4, 8008af6 <__pow5mult+0x66>
 8008ae2:	f240 2171 	movw	r1, #625	; 0x271
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7ff ff14 	bl	8008914 <__i2b>
 8008aec:	2300      	movs	r3, #0
 8008aee:	4604      	mov	r4, r0
 8008af0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008af4:	6003      	str	r3, [r0, #0]
 8008af6:	f04f 0900 	mov.w	r9, #0
 8008afa:	07eb      	lsls	r3, r5, #31
 8008afc:	d50a      	bpl.n	8008b14 <__pow5mult+0x84>
 8008afe:	4639      	mov	r1, r7
 8008b00:	4622      	mov	r2, r4
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7ff ff1c 	bl	8008940 <__multiply>
 8008b08:	4680      	mov	r8, r0
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7ff fe01 	bl	8008714 <_Bfree>
 8008b12:	4647      	mov	r7, r8
 8008b14:	106d      	asrs	r5, r5, #1
 8008b16:	d00b      	beq.n	8008b30 <__pow5mult+0xa0>
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	b938      	cbnz	r0, 8008b2c <__pow5mult+0x9c>
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	4621      	mov	r1, r4
 8008b20:	4630      	mov	r0, r6
 8008b22:	f7ff ff0d 	bl	8008940 <__multiply>
 8008b26:	6020      	str	r0, [r4, #0]
 8008b28:	f8c0 9000 	str.w	r9, [r0]
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	e7e4      	b.n	8008afa <__pow5mult+0x6a>
 8008b30:	4638      	mov	r0, r7
 8008b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b36:	bf00      	nop
 8008b38:	0800a728 	.word	0x0800a728
 8008b3c:	0800a4de 	.word	0x0800a4de
 8008b40:	0800a5dc 	.word	0x0800a5dc

08008b44 <__lshift>:
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	460c      	mov	r4, r1
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	4691      	mov	r9, r2
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	6849      	ldr	r1, [r1, #4]
 8008b52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b56:	68a3      	ldr	r3, [r4, #8]
 8008b58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b5c:	f108 0601 	add.w	r6, r8, #1
 8008b60:	42b3      	cmp	r3, r6
 8008b62:	db0b      	blt.n	8008b7c <__lshift+0x38>
 8008b64:	4638      	mov	r0, r7
 8008b66:	f7ff fd95 	bl	8008694 <_Balloc>
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	b948      	cbnz	r0, 8008b82 <__lshift+0x3e>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b74:	4b29      	ldr	r3, [pc, #164]	; (8008c1c <__lshift+0xd8>)
 8008b76:	482a      	ldr	r0, [pc, #168]	; (8008c20 <__lshift+0xdc>)
 8008b78:	f000 fcc8 	bl	800950c <__assert_func>
 8008b7c:	3101      	adds	r1, #1
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	e7ee      	b.n	8008b60 <__lshift+0x1c>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f100 0114 	add.w	r1, r0, #20
 8008b88:	f100 0210 	add.w	r2, r0, #16
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	4553      	cmp	r3, sl
 8008b90:	db37      	blt.n	8008c02 <__lshift+0xbe>
 8008b92:	6920      	ldr	r0, [r4, #16]
 8008b94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b98:	f104 0314 	add.w	r3, r4, #20
 8008b9c:	f019 091f 	ands.w	r9, r9, #31
 8008ba0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ba4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ba8:	d02f      	beq.n	8008c0a <__lshift+0xc6>
 8008baa:	468a      	mov	sl, r1
 8008bac:	f04f 0c00 	mov.w	ip, #0
 8008bb0:	f1c9 0e20 	rsb	lr, r9, #32
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	fa02 f209 	lsl.w	r2, r2, r9
 8008bba:	ea42 020c 	orr.w	r2, r2, ip
 8008bbe:	f84a 2b04 	str.w	r2, [sl], #4
 8008bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc6:	4298      	cmp	r0, r3
 8008bc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008bcc:	d8f2      	bhi.n	8008bb4 <__lshift+0x70>
 8008bce:	1b03      	subs	r3, r0, r4
 8008bd0:	3b15      	subs	r3, #21
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	f104 0215 	add.w	r2, r4, #21
 8008bdc:	4290      	cmp	r0, r2
 8008bde:	bf38      	it	cc
 8008be0:	2304      	movcc	r3, #4
 8008be2:	f841 c003 	str.w	ip, [r1, r3]
 8008be6:	f1bc 0f00 	cmp.w	ip, #0
 8008bea:	d001      	beq.n	8008bf0 <__lshift+0xac>
 8008bec:	f108 0602 	add.w	r6, r8, #2
 8008bf0:	3e01      	subs	r6, #1
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	612e      	str	r6, [r5, #16]
 8008bf8:	f7ff fd8c 	bl	8008714 <_Bfree>
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c02:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c06:	3301      	adds	r3, #1
 8008c08:	e7c1      	b.n	8008b8e <__lshift+0x4a>
 8008c0a:	3904      	subs	r1, #4
 8008c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c10:	4298      	cmp	r0, r3
 8008c12:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c16:	d8f9      	bhi.n	8008c0c <__lshift+0xc8>
 8008c18:	e7ea      	b.n	8008bf0 <__lshift+0xac>
 8008c1a:	bf00      	nop
 8008c1c:	0800a550 	.word	0x0800a550
 8008c20:	0800a5dc 	.word	0x0800a5dc

08008c24 <__mcmp>:
 8008c24:	4603      	mov	r3, r0
 8008c26:	690a      	ldr	r2, [r1, #16]
 8008c28:	6900      	ldr	r0, [r0, #16]
 8008c2a:	b530      	push	{r4, r5, lr}
 8008c2c:	1a80      	subs	r0, r0, r2
 8008c2e:	d10d      	bne.n	8008c4c <__mcmp+0x28>
 8008c30:	3314      	adds	r3, #20
 8008c32:	3114      	adds	r1, #20
 8008c34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c44:	4295      	cmp	r5, r2
 8008c46:	d002      	beq.n	8008c4e <__mcmp+0x2a>
 8008c48:	d304      	bcc.n	8008c54 <__mcmp+0x30>
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	bd30      	pop	{r4, r5, pc}
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	d3f4      	bcc.n	8008c3c <__mcmp+0x18>
 8008c52:	e7fb      	b.n	8008c4c <__mcmp+0x28>
 8008c54:	f04f 30ff 	mov.w	r0, #4294967295
 8008c58:	e7f8      	b.n	8008c4c <__mcmp+0x28>
	...

08008c5c <__mdiff>:
 8008c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c60:	460d      	mov	r5, r1
 8008c62:	4607      	mov	r7, r0
 8008c64:	4611      	mov	r1, r2
 8008c66:	4628      	mov	r0, r5
 8008c68:	4614      	mov	r4, r2
 8008c6a:	f7ff ffdb 	bl	8008c24 <__mcmp>
 8008c6e:	1e06      	subs	r6, r0, #0
 8008c70:	d111      	bne.n	8008c96 <__mdiff+0x3a>
 8008c72:	4631      	mov	r1, r6
 8008c74:	4638      	mov	r0, r7
 8008c76:	f7ff fd0d 	bl	8008694 <_Balloc>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	b928      	cbnz	r0, 8008c8a <__mdiff+0x2e>
 8008c7e:	f240 2132 	movw	r1, #562	; 0x232
 8008c82:	4b3a      	ldr	r3, [pc, #232]	; (8008d6c <__mdiff+0x110>)
 8008c84:	483a      	ldr	r0, [pc, #232]	; (8008d70 <__mdiff+0x114>)
 8008c86:	f000 fc41 	bl	800950c <__assert_func>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c90:	4610      	mov	r0, r2
 8008c92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	bfa4      	itt	ge
 8008c98:	4623      	movge	r3, r4
 8008c9a:	462c      	movge	r4, r5
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	6861      	ldr	r1, [r4, #4]
 8008ca0:	bfa6      	itte	ge
 8008ca2:	461d      	movge	r5, r3
 8008ca4:	2600      	movge	r6, #0
 8008ca6:	2601      	movlt	r6, #1
 8008ca8:	f7ff fcf4 	bl	8008694 <_Balloc>
 8008cac:	4602      	mov	r2, r0
 8008cae:	b918      	cbnz	r0, 8008cb8 <__mdiff+0x5c>
 8008cb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cb4:	4b2d      	ldr	r3, [pc, #180]	; (8008d6c <__mdiff+0x110>)
 8008cb6:	e7e5      	b.n	8008c84 <__mdiff+0x28>
 8008cb8:	f102 0814 	add.w	r8, r2, #20
 8008cbc:	46c2      	mov	sl, r8
 8008cbe:	f04f 0c00 	mov.w	ip, #0
 8008cc2:	6927      	ldr	r7, [r4, #16]
 8008cc4:	60c6      	str	r6, [r0, #12]
 8008cc6:	692e      	ldr	r6, [r5, #16]
 8008cc8:	f104 0014 	add.w	r0, r4, #20
 8008ccc:	f105 0914 	add.w	r9, r5, #20
 8008cd0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008cd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cd8:	3410      	adds	r4, #16
 8008cda:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008cde:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ce2:	fa1f f18b 	uxth.w	r1, fp
 8008ce6:	448c      	add	ip, r1
 8008ce8:	b299      	uxth	r1, r3
 8008cea:	0c1b      	lsrs	r3, r3, #16
 8008cec:	ebac 0101 	sub.w	r1, ip, r1
 8008cf0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cf4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008cf8:	b289      	uxth	r1, r1
 8008cfa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008cfe:	454e      	cmp	r6, r9
 8008d00:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008d04:	f84a 3b04 	str.w	r3, [sl], #4
 8008d08:	d8e7      	bhi.n	8008cda <__mdiff+0x7e>
 8008d0a:	1b73      	subs	r3, r6, r5
 8008d0c:	3b15      	subs	r3, #21
 8008d0e:	f023 0303 	bic.w	r3, r3, #3
 8008d12:	3515      	adds	r5, #21
 8008d14:	3304      	adds	r3, #4
 8008d16:	42ae      	cmp	r6, r5
 8008d18:	bf38      	it	cc
 8008d1a:	2304      	movcc	r3, #4
 8008d1c:	4418      	add	r0, r3
 8008d1e:	4443      	add	r3, r8
 8008d20:	461e      	mov	r6, r3
 8008d22:	4605      	mov	r5, r0
 8008d24:	4575      	cmp	r5, lr
 8008d26:	d30e      	bcc.n	8008d46 <__mdiff+0xea>
 8008d28:	f10e 0103 	add.w	r1, lr, #3
 8008d2c:	1a09      	subs	r1, r1, r0
 8008d2e:	f021 0103 	bic.w	r1, r1, #3
 8008d32:	3803      	subs	r0, #3
 8008d34:	4586      	cmp	lr, r0
 8008d36:	bf38      	it	cc
 8008d38:	2100      	movcc	r1, #0
 8008d3a:	4419      	add	r1, r3
 8008d3c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008d40:	b18b      	cbz	r3, 8008d66 <__mdiff+0x10a>
 8008d42:	6117      	str	r7, [r2, #16]
 8008d44:	e7a4      	b.n	8008c90 <__mdiff+0x34>
 8008d46:	f855 8b04 	ldr.w	r8, [r5], #4
 8008d4a:	fa1f f188 	uxth.w	r1, r8
 8008d4e:	4461      	add	r1, ip
 8008d50:	140c      	asrs	r4, r1, #16
 8008d52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d56:	b289      	uxth	r1, r1
 8008d58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d5c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008d60:	f846 1b04 	str.w	r1, [r6], #4
 8008d64:	e7de      	b.n	8008d24 <__mdiff+0xc8>
 8008d66:	3f01      	subs	r7, #1
 8008d68:	e7e8      	b.n	8008d3c <__mdiff+0xe0>
 8008d6a:	bf00      	nop
 8008d6c:	0800a550 	.word	0x0800a550
 8008d70:	0800a5dc 	.word	0x0800a5dc

08008d74 <__ulp>:
 8008d74:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <__ulp+0x48>)
 8008d76:	400b      	ands	r3, r1
 8008d78:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	dd02      	ble.n	8008d86 <__ulp+0x12>
 8008d80:	2000      	movs	r0, #0
 8008d82:	4619      	mov	r1, r3
 8008d84:	4770      	bx	lr
 8008d86:	425b      	negs	r3, r3
 8008d88:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008d8c:	f04f 0000 	mov.w	r0, #0
 8008d90:	f04f 0100 	mov.w	r1, #0
 8008d94:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d98:	da04      	bge.n	8008da4 <__ulp+0x30>
 8008d9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008d9e:	fa43 f102 	asr.w	r1, r3, r2
 8008da2:	4770      	bx	lr
 8008da4:	f1a2 0314 	sub.w	r3, r2, #20
 8008da8:	2b1e      	cmp	r3, #30
 8008daa:	bfd6      	itet	le
 8008dac:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008db0:	2301      	movgt	r3, #1
 8008db2:	fa22 f303 	lsrle.w	r3, r2, r3
 8008db6:	4618      	mov	r0, r3
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	7ff00000 	.word	0x7ff00000

08008dc0 <__b2d>:
 8008dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc4:	6907      	ldr	r7, [r0, #16]
 8008dc6:	f100 0914 	add.w	r9, r0, #20
 8008dca:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008dce:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8008dd2:	f1a7 0804 	sub.w	r8, r7, #4
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f7ff fd4e 	bl	8008878 <__hi0bits>
 8008ddc:	f1c0 0320 	rsb	r3, r0, #32
 8008de0:	280a      	cmp	r0, #10
 8008de2:	600b      	str	r3, [r1, #0]
 8008de4:	491f      	ldr	r1, [pc, #124]	; (8008e64 <__b2d+0xa4>)
 8008de6:	dc17      	bgt.n	8008e18 <__b2d+0x58>
 8008de8:	45c1      	cmp	r9, r8
 8008dea:	bf28      	it	cs
 8008dec:	2200      	movcs	r2, #0
 8008dee:	f1c0 0c0b 	rsb	ip, r0, #11
 8008df2:	fa26 f30c 	lsr.w	r3, r6, ip
 8008df6:	bf38      	it	cc
 8008df8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008dfc:	ea43 0501 	orr.w	r5, r3, r1
 8008e00:	f100 0315 	add.w	r3, r0, #21
 8008e04:	fa06 f303 	lsl.w	r3, r6, r3
 8008e08:	fa22 f20c 	lsr.w	r2, r2, ip
 8008e0c:	ea43 0402 	orr.w	r4, r3, r2
 8008e10:	4620      	mov	r0, r4
 8008e12:	4629      	mov	r1, r5
 8008e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e18:	45c1      	cmp	r9, r8
 8008e1a:	bf2e      	itee	cs
 8008e1c:	2200      	movcs	r2, #0
 8008e1e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008e22:	f1a7 0808 	subcc.w	r8, r7, #8
 8008e26:	f1b0 030b 	subs.w	r3, r0, #11
 8008e2a:	d016      	beq.n	8008e5a <__b2d+0x9a>
 8008e2c:	f1c3 0720 	rsb	r7, r3, #32
 8008e30:	fa22 f107 	lsr.w	r1, r2, r7
 8008e34:	45c8      	cmp	r8, r9
 8008e36:	fa06 f603 	lsl.w	r6, r6, r3
 8008e3a:	ea46 0601 	orr.w	r6, r6, r1
 8008e3e:	bf94      	ite	ls
 8008e40:	2100      	movls	r1, #0
 8008e42:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8008e46:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8008e4a:	fa02 f003 	lsl.w	r0, r2, r3
 8008e4e:	40f9      	lsrs	r1, r7
 8008e50:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e54:	ea40 0401 	orr.w	r4, r0, r1
 8008e58:	e7da      	b.n	8008e10 <__b2d+0x50>
 8008e5a:	4614      	mov	r4, r2
 8008e5c:	ea46 0501 	orr.w	r5, r6, r1
 8008e60:	e7d6      	b.n	8008e10 <__b2d+0x50>
 8008e62:	bf00      	nop
 8008e64:	3ff00000 	.word	0x3ff00000

08008e68 <__d2b>:
 8008e68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008e72:	4690      	mov	r8, r2
 8008e74:	461d      	mov	r5, r3
 8008e76:	f7ff fc0d 	bl	8008694 <_Balloc>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	b930      	cbnz	r0, 8008e8c <__d2b+0x24>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	f240 310a 	movw	r1, #778	; 0x30a
 8008e84:	4b24      	ldr	r3, [pc, #144]	; (8008f18 <__d2b+0xb0>)
 8008e86:	4825      	ldr	r0, [pc, #148]	; (8008f1c <__d2b+0xb4>)
 8008e88:	f000 fb40 	bl	800950c <__assert_func>
 8008e8c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008e90:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008e94:	bb2d      	cbnz	r5, 8008ee2 <__d2b+0x7a>
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	f1b8 0300 	subs.w	r3, r8, #0
 8008e9c:	d026      	beq.n	8008eec <__d2b+0x84>
 8008e9e:	4668      	mov	r0, sp
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	f7ff fd09 	bl	80088b8 <__lo0bits>
 8008ea6:	9900      	ldr	r1, [sp, #0]
 8008ea8:	b1f0      	cbz	r0, 8008ee8 <__d2b+0x80>
 8008eaa:	9a01      	ldr	r2, [sp, #4]
 8008eac:	f1c0 0320 	rsb	r3, r0, #32
 8008eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb4:	430b      	orrs	r3, r1
 8008eb6:	40c2      	lsrs	r2, r0
 8008eb8:	6163      	str	r3, [r4, #20]
 8008eba:	9201      	str	r2, [sp, #4]
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bf14      	ite	ne
 8008ec2:	2102      	movne	r1, #2
 8008ec4:	2101      	moveq	r1, #1
 8008ec6:	61a3      	str	r3, [r4, #24]
 8008ec8:	6121      	str	r1, [r4, #16]
 8008eca:	b1c5      	cbz	r5, 8008efe <__d2b+0x96>
 8008ecc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ed0:	4405      	add	r5, r0
 8008ed2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ed6:	603d      	str	r5, [r7, #0]
 8008ed8:	6030      	str	r0, [r6, #0]
 8008eda:	4620      	mov	r0, r4
 8008edc:	b002      	add	sp, #8
 8008ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ee6:	e7d6      	b.n	8008e96 <__d2b+0x2e>
 8008ee8:	6161      	str	r1, [r4, #20]
 8008eea:	e7e7      	b.n	8008ebc <__d2b+0x54>
 8008eec:	a801      	add	r0, sp, #4
 8008eee:	f7ff fce3 	bl	80088b8 <__lo0bits>
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	9b01      	ldr	r3, [sp, #4]
 8008ef6:	6121      	str	r1, [r4, #16]
 8008ef8:	6163      	str	r3, [r4, #20]
 8008efa:	3020      	adds	r0, #32
 8008efc:	e7e5      	b.n	8008eca <__d2b+0x62>
 8008efe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008f02:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f06:	6038      	str	r0, [r7, #0]
 8008f08:	6918      	ldr	r0, [r3, #16]
 8008f0a:	f7ff fcb5 	bl	8008878 <__hi0bits>
 8008f0e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008f12:	6031      	str	r1, [r6, #0]
 8008f14:	e7e1      	b.n	8008eda <__d2b+0x72>
 8008f16:	bf00      	nop
 8008f18:	0800a550 	.word	0x0800a550
 8008f1c:	0800a5dc 	.word	0x0800a5dc

08008f20 <__ratio>:
 8008f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	4688      	mov	r8, r1
 8008f26:	4669      	mov	r1, sp
 8008f28:	4681      	mov	r9, r0
 8008f2a:	f7ff ff49 	bl	8008dc0 <__b2d>
 8008f2e:	460f      	mov	r7, r1
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	4640      	mov	r0, r8
 8008f36:	a901      	add	r1, sp, #4
 8008f38:	f7ff ff42 	bl	8008dc0 <__b2d>
 8008f3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f40:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f44:	468b      	mov	fp, r1
 8008f46:	eba3 0c02 	sub.w	ip, r3, r2
 8008f4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bfd5      	itete	le
 8008f58:	460a      	movle	r2, r1
 8008f5a:	462a      	movgt	r2, r5
 8008f5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f60:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f64:	bfd8      	it	le
 8008f66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f6a:	465b      	mov	r3, fp
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	4639      	mov	r1, r7
 8008f70:	4620      	mov	r0, r4
 8008f72:	f7f7 fbdb 	bl	800072c <__aeabi_ddiv>
 8008f76:	b003      	add	sp, #12
 8008f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f7c <__copybits>:
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	1149      	asrs	r1, r1, #5
 8008f82:	6914      	ldr	r4, [r2, #16]
 8008f84:	3101      	adds	r1, #1
 8008f86:	f102 0314 	add.w	r3, r2, #20
 8008f8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f92:	1f05      	subs	r5, r0, #4
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d30c      	bcc.n	8008fb2 <__copybits+0x36>
 8008f98:	1aa3      	subs	r3, r4, r2
 8008f9a:	3b11      	subs	r3, #17
 8008f9c:	f023 0303 	bic.w	r3, r3, #3
 8008fa0:	3211      	adds	r2, #17
 8008fa2:	42a2      	cmp	r2, r4
 8008fa4:	bf88      	it	hi
 8008fa6:	2300      	movhi	r3, #0
 8008fa8:	4418      	add	r0, r3
 8008faa:	2300      	movs	r3, #0
 8008fac:	4288      	cmp	r0, r1
 8008fae:	d305      	bcc.n	8008fbc <__copybits+0x40>
 8008fb0:	bd70      	pop	{r4, r5, r6, pc}
 8008fb2:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fb6:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fba:	e7eb      	b.n	8008f94 <__copybits+0x18>
 8008fbc:	f840 3b04 	str.w	r3, [r0], #4
 8008fc0:	e7f4      	b.n	8008fac <__copybits+0x30>

08008fc2 <__any_on>:
 8008fc2:	f100 0214 	add.w	r2, r0, #20
 8008fc6:	6900      	ldr	r0, [r0, #16]
 8008fc8:	114b      	asrs	r3, r1, #5
 8008fca:	4298      	cmp	r0, r3
 8008fcc:	b510      	push	{r4, lr}
 8008fce:	db11      	blt.n	8008ff4 <__any_on+0x32>
 8008fd0:	dd0a      	ble.n	8008fe8 <__any_on+0x26>
 8008fd2:	f011 011f 	ands.w	r1, r1, #31
 8008fd6:	d007      	beq.n	8008fe8 <__any_on+0x26>
 8008fd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008fdc:	fa24 f001 	lsr.w	r0, r4, r1
 8008fe0:	fa00 f101 	lsl.w	r1, r0, r1
 8008fe4:	428c      	cmp	r4, r1
 8008fe6:	d10b      	bne.n	8009000 <__any_on+0x3e>
 8008fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d803      	bhi.n	8008ff8 <__any_on+0x36>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	bd10      	pop	{r4, pc}
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	e7f7      	b.n	8008fe8 <__any_on+0x26>
 8008ff8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d0f5      	beq.n	8008fec <__any_on+0x2a>
 8009000:	2001      	movs	r0, #1
 8009002:	e7f6      	b.n	8008ff2 <__any_on+0x30>

08009004 <_calloc_r>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	fba1 5402 	umull	r5, r4, r1, r2
 800900a:	b934      	cbnz	r4, 800901a <_calloc_r+0x16>
 800900c:	4629      	mov	r1, r5
 800900e:	f000 f875 	bl	80090fc <_malloc_r>
 8009012:	4606      	mov	r6, r0
 8009014:	b928      	cbnz	r0, 8009022 <_calloc_r+0x1e>
 8009016:	4630      	mov	r0, r6
 8009018:	bd70      	pop	{r4, r5, r6, pc}
 800901a:	220c      	movs	r2, #12
 800901c:	2600      	movs	r6, #0
 800901e:	6002      	str	r2, [r0, #0]
 8009020:	e7f9      	b.n	8009016 <_calloc_r+0x12>
 8009022:	462a      	mov	r2, r5
 8009024:	4621      	mov	r1, r4
 8009026:	f7fc fbf1 	bl	800580c <memset>
 800902a:	e7f4      	b.n	8009016 <_calloc_r+0x12>

0800902c <_free_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4605      	mov	r5, r0
 8009030:	2900      	cmp	r1, #0
 8009032:	d040      	beq.n	80090b6 <_free_r+0x8a>
 8009034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009038:	1f0c      	subs	r4, r1, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	bfb8      	it	lt
 800903e:	18e4      	addlt	r4, r4, r3
 8009040:	f000 faae 	bl	80095a0 <__malloc_lock>
 8009044:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <_free_r+0x8c>)
 8009046:	6813      	ldr	r3, [r2, #0]
 8009048:	b933      	cbnz	r3, 8009058 <_free_r+0x2c>
 800904a:	6063      	str	r3, [r4, #4]
 800904c:	6014      	str	r4, [r2, #0]
 800904e:	4628      	mov	r0, r5
 8009050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009054:	f000 baaa 	b.w	80095ac <__malloc_unlock>
 8009058:	42a3      	cmp	r3, r4
 800905a:	d908      	bls.n	800906e <_free_r+0x42>
 800905c:	6820      	ldr	r0, [r4, #0]
 800905e:	1821      	adds	r1, r4, r0
 8009060:	428b      	cmp	r3, r1
 8009062:	bf01      	itttt	eq
 8009064:	6819      	ldreq	r1, [r3, #0]
 8009066:	685b      	ldreq	r3, [r3, #4]
 8009068:	1809      	addeq	r1, r1, r0
 800906a:	6021      	streq	r1, [r4, #0]
 800906c:	e7ed      	b.n	800904a <_free_r+0x1e>
 800906e:	461a      	mov	r2, r3
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	b10b      	cbz	r3, 8009078 <_free_r+0x4c>
 8009074:	42a3      	cmp	r3, r4
 8009076:	d9fa      	bls.n	800906e <_free_r+0x42>
 8009078:	6811      	ldr	r1, [r2, #0]
 800907a:	1850      	adds	r0, r2, r1
 800907c:	42a0      	cmp	r0, r4
 800907e:	d10b      	bne.n	8009098 <_free_r+0x6c>
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	4401      	add	r1, r0
 8009084:	1850      	adds	r0, r2, r1
 8009086:	4283      	cmp	r3, r0
 8009088:	6011      	str	r1, [r2, #0]
 800908a:	d1e0      	bne.n	800904e <_free_r+0x22>
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4401      	add	r1, r0
 8009092:	6011      	str	r1, [r2, #0]
 8009094:	6053      	str	r3, [r2, #4]
 8009096:	e7da      	b.n	800904e <_free_r+0x22>
 8009098:	d902      	bls.n	80090a0 <_free_r+0x74>
 800909a:	230c      	movs	r3, #12
 800909c:	602b      	str	r3, [r5, #0]
 800909e:	e7d6      	b.n	800904e <_free_r+0x22>
 80090a0:	6820      	ldr	r0, [r4, #0]
 80090a2:	1821      	adds	r1, r4, r0
 80090a4:	428b      	cmp	r3, r1
 80090a6:	bf01      	itttt	eq
 80090a8:	6819      	ldreq	r1, [r3, #0]
 80090aa:	685b      	ldreq	r3, [r3, #4]
 80090ac:	1809      	addeq	r1, r1, r0
 80090ae:	6021      	streq	r1, [r4, #0]
 80090b0:	6063      	str	r3, [r4, #4]
 80090b2:	6054      	str	r4, [r2, #4]
 80090b4:	e7cb      	b.n	800904e <_free_r+0x22>
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	200004a4 	.word	0x200004a4

080090bc <sbrk_aligned>:
 80090bc:	b570      	push	{r4, r5, r6, lr}
 80090be:	4e0e      	ldr	r6, [pc, #56]	; (80090f8 <sbrk_aligned+0x3c>)
 80090c0:	460c      	mov	r4, r1
 80090c2:	6831      	ldr	r1, [r6, #0]
 80090c4:	4605      	mov	r5, r0
 80090c6:	b911      	cbnz	r1, 80090ce <sbrk_aligned+0x12>
 80090c8:	f000 f9ee 	bl	80094a8 <_sbrk_r>
 80090cc:	6030      	str	r0, [r6, #0]
 80090ce:	4621      	mov	r1, r4
 80090d0:	4628      	mov	r0, r5
 80090d2:	f000 f9e9 	bl	80094a8 <_sbrk_r>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	d00a      	beq.n	80090f0 <sbrk_aligned+0x34>
 80090da:	1cc4      	adds	r4, r0, #3
 80090dc:	f024 0403 	bic.w	r4, r4, #3
 80090e0:	42a0      	cmp	r0, r4
 80090e2:	d007      	beq.n	80090f4 <sbrk_aligned+0x38>
 80090e4:	1a21      	subs	r1, r4, r0
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 f9de 	bl	80094a8 <_sbrk_r>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d101      	bne.n	80090f4 <sbrk_aligned+0x38>
 80090f0:	f04f 34ff 	mov.w	r4, #4294967295
 80090f4:	4620      	mov	r0, r4
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
 80090f8:	200004a8 	.word	0x200004a8

080090fc <_malloc_r>:
 80090fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009100:	1ccd      	adds	r5, r1, #3
 8009102:	f025 0503 	bic.w	r5, r5, #3
 8009106:	3508      	adds	r5, #8
 8009108:	2d0c      	cmp	r5, #12
 800910a:	bf38      	it	cc
 800910c:	250c      	movcc	r5, #12
 800910e:	2d00      	cmp	r5, #0
 8009110:	4607      	mov	r7, r0
 8009112:	db01      	blt.n	8009118 <_malloc_r+0x1c>
 8009114:	42a9      	cmp	r1, r5
 8009116:	d905      	bls.n	8009124 <_malloc_r+0x28>
 8009118:	230c      	movs	r3, #12
 800911a:	2600      	movs	r6, #0
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	4630      	mov	r0, r6
 8009120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009124:	4e2e      	ldr	r6, [pc, #184]	; (80091e0 <_malloc_r+0xe4>)
 8009126:	f000 fa3b 	bl	80095a0 <__malloc_lock>
 800912a:	6833      	ldr	r3, [r6, #0]
 800912c:	461c      	mov	r4, r3
 800912e:	bb34      	cbnz	r4, 800917e <_malloc_r+0x82>
 8009130:	4629      	mov	r1, r5
 8009132:	4638      	mov	r0, r7
 8009134:	f7ff ffc2 	bl	80090bc <sbrk_aligned>
 8009138:	1c43      	adds	r3, r0, #1
 800913a:	4604      	mov	r4, r0
 800913c:	d14d      	bne.n	80091da <_malloc_r+0xde>
 800913e:	6834      	ldr	r4, [r6, #0]
 8009140:	4626      	mov	r6, r4
 8009142:	2e00      	cmp	r6, #0
 8009144:	d140      	bne.n	80091c8 <_malloc_r+0xcc>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	4631      	mov	r1, r6
 800914a:	4638      	mov	r0, r7
 800914c:	eb04 0803 	add.w	r8, r4, r3
 8009150:	f000 f9aa 	bl	80094a8 <_sbrk_r>
 8009154:	4580      	cmp	r8, r0
 8009156:	d13a      	bne.n	80091ce <_malloc_r+0xd2>
 8009158:	6821      	ldr	r1, [r4, #0]
 800915a:	3503      	adds	r5, #3
 800915c:	1a6d      	subs	r5, r5, r1
 800915e:	f025 0503 	bic.w	r5, r5, #3
 8009162:	3508      	adds	r5, #8
 8009164:	2d0c      	cmp	r5, #12
 8009166:	bf38      	it	cc
 8009168:	250c      	movcc	r5, #12
 800916a:	4638      	mov	r0, r7
 800916c:	4629      	mov	r1, r5
 800916e:	f7ff ffa5 	bl	80090bc <sbrk_aligned>
 8009172:	3001      	adds	r0, #1
 8009174:	d02b      	beq.n	80091ce <_malloc_r+0xd2>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	442b      	add	r3, r5
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	e00e      	b.n	800919c <_malloc_r+0xa0>
 800917e:	6822      	ldr	r2, [r4, #0]
 8009180:	1b52      	subs	r2, r2, r5
 8009182:	d41e      	bmi.n	80091c2 <_malloc_r+0xc6>
 8009184:	2a0b      	cmp	r2, #11
 8009186:	d916      	bls.n	80091b6 <_malloc_r+0xba>
 8009188:	1961      	adds	r1, r4, r5
 800918a:	42a3      	cmp	r3, r4
 800918c:	6025      	str	r5, [r4, #0]
 800918e:	bf18      	it	ne
 8009190:	6059      	strne	r1, [r3, #4]
 8009192:	6863      	ldr	r3, [r4, #4]
 8009194:	bf08      	it	eq
 8009196:	6031      	streq	r1, [r6, #0]
 8009198:	5162      	str	r2, [r4, r5]
 800919a:	604b      	str	r3, [r1, #4]
 800919c:	4638      	mov	r0, r7
 800919e:	f104 060b 	add.w	r6, r4, #11
 80091a2:	f000 fa03 	bl	80095ac <__malloc_unlock>
 80091a6:	f026 0607 	bic.w	r6, r6, #7
 80091aa:	1d23      	adds	r3, r4, #4
 80091ac:	1af2      	subs	r2, r6, r3
 80091ae:	d0b6      	beq.n	800911e <_malloc_r+0x22>
 80091b0:	1b9b      	subs	r3, r3, r6
 80091b2:	50a3      	str	r3, [r4, r2]
 80091b4:	e7b3      	b.n	800911e <_malloc_r+0x22>
 80091b6:	6862      	ldr	r2, [r4, #4]
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	bf0c      	ite	eq
 80091bc:	6032      	streq	r2, [r6, #0]
 80091be:	605a      	strne	r2, [r3, #4]
 80091c0:	e7ec      	b.n	800919c <_malloc_r+0xa0>
 80091c2:	4623      	mov	r3, r4
 80091c4:	6864      	ldr	r4, [r4, #4]
 80091c6:	e7b2      	b.n	800912e <_malloc_r+0x32>
 80091c8:	4634      	mov	r4, r6
 80091ca:	6876      	ldr	r6, [r6, #4]
 80091cc:	e7b9      	b.n	8009142 <_malloc_r+0x46>
 80091ce:	230c      	movs	r3, #12
 80091d0:	4638      	mov	r0, r7
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	f000 f9ea 	bl	80095ac <__malloc_unlock>
 80091d8:	e7a1      	b.n	800911e <_malloc_r+0x22>
 80091da:	6025      	str	r5, [r4, #0]
 80091dc:	e7de      	b.n	800919c <_malloc_r+0xa0>
 80091de:	bf00      	nop
 80091e0:	200004a4 	.word	0x200004a4

080091e4 <__ssputs_r>:
 80091e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e8:	688e      	ldr	r6, [r1, #8]
 80091ea:	4682      	mov	sl, r0
 80091ec:	429e      	cmp	r6, r3
 80091ee:	460c      	mov	r4, r1
 80091f0:	4690      	mov	r8, r2
 80091f2:	461f      	mov	r7, r3
 80091f4:	d838      	bhi.n	8009268 <__ssputs_r+0x84>
 80091f6:	898a      	ldrh	r2, [r1, #12]
 80091f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091fc:	d032      	beq.n	8009264 <__ssputs_r+0x80>
 80091fe:	6825      	ldr	r5, [r4, #0]
 8009200:	6909      	ldr	r1, [r1, #16]
 8009202:	3301      	adds	r3, #1
 8009204:	eba5 0901 	sub.w	r9, r5, r1
 8009208:	6965      	ldr	r5, [r4, #20]
 800920a:	444b      	add	r3, r9
 800920c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009214:	106d      	asrs	r5, r5, #1
 8009216:	429d      	cmp	r5, r3
 8009218:	bf38      	it	cc
 800921a:	461d      	movcc	r5, r3
 800921c:	0553      	lsls	r3, r2, #21
 800921e:	d531      	bpl.n	8009284 <__ssputs_r+0xa0>
 8009220:	4629      	mov	r1, r5
 8009222:	f7ff ff6b 	bl	80090fc <_malloc_r>
 8009226:	4606      	mov	r6, r0
 8009228:	b950      	cbnz	r0, 8009240 <__ssputs_r+0x5c>
 800922a:	230c      	movs	r3, #12
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	f8ca 3000 	str.w	r3, [sl]
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009240:	464a      	mov	r2, r9
 8009242:	6921      	ldr	r1, [r4, #16]
 8009244:	f7ff fa18 	bl	8008678 <memcpy>
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800924e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	6126      	str	r6, [r4, #16]
 8009256:	444e      	add	r6, r9
 8009258:	6026      	str	r6, [r4, #0]
 800925a:	463e      	mov	r6, r7
 800925c:	6165      	str	r5, [r4, #20]
 800925e:	eba5 0509 	sub.w	r5, r5, r9
 8009262:	60a5      	str	r5, [r4, #8]
 8009264:	42be      	cmp	r6, r7
 8009266:	d900      	bls.n	800926a <__ssputs_r+0x86>
 8009268:	463e      	mov	r6, r7
 800926a:	4632      	mov	r2, r6
 800926c:	4641      	mov	r1, r8
 800926e:	6820      	ldr	r0, [r4, #0]
 8009270:	f000 f97c 	bl	800956c <memmove>
 8009274:	68a3      	ldr	r3, [r4, #8]
 8009276:	2000      	movs	r0, #0
 8009278:	1b9b      	subs	r3, r3, r6
 800927a:	60a3      	str	r3, [r4, #8]
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	4433      	add	r3, r6
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	e7db      	b.n	800923c <__ssputs_r+0x58>
 8009284:	462a      	mov	r2, r5
 8009286:	f000 f997 	bl	80095b8 <_realloc_r>
 800928a:	4606      	mov	r6, r0
 800928c:	2800      	cmp	r0, #0
 800928e:	d1e1      	bne.n	8009254 <__ssputs_r+0x70>
 8009290:	4650      	mov	r0, sl
 8009292:	6921      	ldr	r1, [r4, #16]
 8009294:	f7ff feca 	bl	800902c <_free_r>
 8009298:	e7c7      	b.n	800922a <__ssputs_r+0x46>
	...

0800929c <_svfiprintf_r>:
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	4698      	mov	r8, r3
 80092a2:	898b      	ldrh	r3, [r1, #12]
 80092a4:	4607      	mov	r7, r0
 80092a6:	061b      	lsls	r3, r3, #24
 80092a8:	460d      	mov	r5, r1
 80092aa:	4614      	mov	r4, r2
 80092ac:	b09d      	sub	sp, #116	; 0x74
 80092ae:	d50e      	bpl.n	80092ce <_svfiprintf_r+0x32>
 80092b0:	690b      	ldr	r3, [r1, #16]
 80092b2:	b963      	cbnz	r3, 80092ce <_svfiprintf_r+0x32>
 80092b4:	2140      	movs	r1, #64	; 0x40
 80092b6:	f7ff ff21 	bl	80090fc <_malloc_r>
 80092ba:	6028      	str	r0, [r5, #0]
 80092bc:	6128      	str	r0, [r5, #16]
 80092be:	b920      	cbnz	r0, 80092ca <_svfiprintf_r+0x2e>
 80092c0:	230c      	movs	r3, #12
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	e0d1      	b.n	800946e <_svfiprintf_r+0x1d2>
 80092ca:	2340      	movs	r3, #64	; 0x40
 80092cc:	616b      	str	r3, [r5, #20]
 80092ce:	2300      	movs	r3, #0
 80092d0:	9309      	str	r3, [sp, #36]	; 0x24
 80092d2:	2320      	movs	r3, #32
 80092d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092d8:	2330      	movs	r3, #48	; 0x30
 80092da:	f04f 0901 	mov.w	r9, #1
 80092de:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009488 <_svfiprintf_r+0x1ec>
 80092e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092ea:	4623      	mov	r3, r4
 80092ec:	469a      	mov	sl, r3
 80092ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092f2:	b10a      	cbz	r2, 80092f8 <_svfiprintf_r+0x5c>
 80092f4:	2a25      	cmp	r2, #37	; 0x25
 80092f6:	d1f9      	bne.n	80092ec <_svfiprintf_r+0x50>
 80092f8:	ebba 0b04 	subs.w	fp, sl, r4
 80092fc:	d00b      	beq.n	8009316 <_svfiprintf_r+0x7a>
 80092fe:	465b      	mov	r3, fp
 8009300:	4622      	mov	r2, r4
 8009302:	4629      	mov	r1, r5
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff ff6d 	bl	80091e4 <__ssputs_r>
 800930a:	3001      	adds	r0, #1
 800930c:	f000 80aa 	beq.w	8009464 <_svfiprintf_r+0x1c8>
 8009310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009312:	445a      	add	r2, fp
 8009314:	9209      	str	r2, [sp, #36]	; 0x24
 8009316:	f89a 3000 	ldrb.w	r3, [sl]
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 80a2 	beq.w	8009464 <_svfiprintf_r+0x1c8>
 8009320:	2300      	movs	r3, #0
 8009322:	f04f 32ff 	mov.w	r2, #4294967295
 8009326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800932a:	f10a 0a01 	add.w	sl, sl, #1
 800932e:	9304      	str	r3, [sp, #16]
 8009330:	9307      	str	r3, [sp, #28]
 8009332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009336:	931a      	str	r3, [sp, #104]	; 0x68
 8009338:	4654      	mov	r4, sl
 800933a:	2205      	movs	r2, #5
 800933c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009340:	4851      	ldr	r0, [pc, #324]	; (8009488 <_svfiprintf_r+0x1ec>)
 8009342:	f7ff f98b 	bl	800865c <memchr>
 8009346:	9a04      	ldr	r2, [sp, #16]
 8009348:	b9d8      	cbnz	r0, 8009382 <_svfiprintf_r+0xe6>
 800934a:	06d0      	lsls	r0, r2, #27
 800934c:	bf44      	itt	mi
 800934e:	2320      	movmi	r3, #32
 8009350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009354:	0711      	lsls	r1, r2, #28
 8009356:	bf44      	itt	mi
 8009358:	232b      	movmi	r3, #43	; 0x2b
 800935a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800935e:	f89a 3000 	ldrb.w	r3, [sl]
 8009362:	2b2a      	cmp	r3, #42	; 0x2a
 8009364:	d015      	beq.n	8009392 <_svfiprintf_r+0xf6>
 8009366:	4654      	mov	r4, sl
 8009368:	2000      	movs	r0, #0
 800936a:	f04f 0c0a 	mov.w	ip, #10
 800936e:	9a07      	ldr	r2, [sp, #28]
 8009370:	4621      	mov	r1, r4
 8009372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009376:	3b30      	subs	r3, #48	; 0x30
 8009378:	2b09      	cmp	r3, #9
 800937a:	d94e      	bls.n	800941a <_svfiprintf_r+0x17e>
 800937c:	b1b0      	cbz	r0, 80093ac <_svfiprintf_r+0x110>
 800937e:	9207      	str	r2, [sp, #28]
 8009380:	e014      	b.n	80093ac <_svfiprintf_r+0x110>
 8009382:	eba0 0308 	sub.w	r3, r0, r8
 8009386:	fa09 f303 	lsl.w	r3, r9, r3
 800938a:	4313      	orrs	r3, r2
 800938c:	46a2      	mov	sl, r4
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	e7d2      	b.n	8009338 <_svfiprintf_r+0x9c>
 8009392:	9b03      	ldr	r3, [sp, #12]
 8009394:	1d19      	adds	r1, r3, #4
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	9103      	str	r1, [sp, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	bfbb      	ittet	lt
 800939e:	425b      	neglt	r3, r3
 80093a0:	f042 0202 	orrlt.w	r2, r2, #2
 80093a4:	9307      	strge	r3, [sp, #28]
 80093a6:	9307      	strlt	r3, [sp, #28]
 80093a8:	bfb8      	it	lt
 80093aa:	9204      	strlt	r2, [sp, #16]
 80093ac:	7823      	ldrb	r3, [r4, #0]
 80093ae:	2b2e      	cmp	r3, #46	; 0x2e
 80093b0:	d10c      	bne.n	80093cc <_svfiprintf_r+0x130>
 80093b2:	7863      	ldrb	r3, [r4, #1]
 80093b4:	2b2a      	cmp	r3, #42	; 0x2a
 80093b6:	d135      	bne.n	8009424 <_svfiprintf_r+0x188>
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	3402      	adds	r4, #2
 80093bc:	1d1a      	adds	r2, r3, #4
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	9203      	str	r2, [sp, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bfb8      	it	lt
 80093c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80093ca:	9305      	str	r3, [sp, #20]
 80093cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800948c <_svfiprintf_r+0x1f0>
 80093d0:	2203      	movs	r2, #3
 80093d2:	4650      	mov	r0, sl
 80093d4:	7821      	ldrb	r1, [r4, #0]
 80093d6:	f7ff f941 	bl	800865c <memchr>
 80093da:	b140      	cbz	r0, 80093ee <_svfiprintf_r+0x152>
 80093dc:	2340      	movs	r3, #64	; 0x40
 80093de:	eba0 000a 	sub.w	r0, r0, sl
 80093e2:	fa03 f000 	lsl.w	r0, r3, r0
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	3401      	adds	r4, #1
 80093ea:	4303      	orrs	r3, r0
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f2:	2206      	movs	r2, #6
 80093f4:	4826      	ldr	r0, [pc, #152]	; (8009490 <_svfiprintf_r+0x1f4>)
 80093f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093fa:	f7ff f92f 	bl	800865c <memchr>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d038      	beq.n	8009474 <_svfiprintf_r+0x1d8>
 8009402:	4b24      	ldr	r3, [pc, #144]	; (8009494 <_svfiprintf_r+0x1f8>)
 8009404:	bb1b      	cbnz	r3, 800944e <_svfiprintf_r+0x1b2>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	3307      	adds	r3, #7
 800940a:	f023 0307 	bic.w	r3, r3, #7
 800940e:	3308      	adds	r3, #8
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009414:	4433      	add	r3, r6
 8009416:	9309      	str	r3, [sp, #36]	; 0x24
 8009418:	e767      	b.n	80092ea <_svfiprintf_r+0x4e>
 800941a:	460c      	mov	r4, r1
 800941c:	2001      	movs	r0, #1
 800941e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009422:	e7a5      	b.n	8009370 <_svfiprintf_r+0xd4>
 8009424:	2300      	movs	r3, #0
 8009426:	f04f 0c0a 	mov.w	ip, #10
 800942a:	4619      	mov	r1, r3
 800942c:	3401      	adds	r4, #1
 800942e:	9305      	str	r3, [sp, #20]
 8009430:	4620      	mov	r0, r4
 8009432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009436:	3a30      	subs	r2, #48	; 0x30
 8009438:	2a09      	cmp	r2, #9
 800943a:	d903      	bls.n	8009444 <_svfiprintf_r+0x1a8>
 800943c:	2b00      	cmp	r3, #0
 800943e:	d0c5      	beq.n	80093cc <_svfiprintf_r+0x130>
 8009440:	9105      	str	r1, [sp, #20]
 8009442:	e7c3      	b.n	80093cc <_svfiprintf_r+0x130>
 8009444:	4604      	mov	r4, r0
 8009446:	2301      	movs	r3, #1
 8009448:	fb0c 2101 	mla	r1, ip, r1, r2
 800944c:	e7f0      	b.n	8009430 <_svfiprintf_r+0x194>
 800944e:	ab03      	add	r3, sp, #12
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	462a      	mov	r2, r5
 8009454:	4638      	mov	r0, r7
 8009456:	4b10      	ldr	r3, [pc, #64]	; (8009498 <_svfiprintf_r+0x1fc>)
 8009458:	a904      	add	r1, sp, #16
 800945a:	f7fc fa7d 	bl	8005958 <_printf_float>
 800945e:	1c42      	adds	r2, r0, #1
 8009460:	4606      	mov	r6, r0
 8009462:	d1d6      	bne.n	8009412 <_svfiprintf_r+0x176>
 8009464:	89ab      	ldrh	r3, [r5, #12]
 8009466:	065b      	lsls	r3, r3, #25
 8009468:	f53f af2c 	bmi.w	80092c4 <_svfiprintf_r+0x28>
 800946c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800946e:	b01d      	add	sp, #116	; 0x74
 8009470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009474:	ab03      	add	r3, sp, #12
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	462a      	mov	r2, r5
 800947a:	4638      	mov	r0, r7
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <_svfiprintf_r+0x1fc>)
 800947e:	a904      	add	r1, sp, #16
 8009480:	f7fc fd06 	bl	8005e90 <_printf_i>
 8009484:	e7eb      	b.n	800945e <_svfiprintf_r+0x1c2>
 8009486:	bf00      	nop
 8009488:	0800a734 	.word	0x0800a734
 800948c:	0800a73a 	.word	0x0800a73a
 8009490:	0800a73e 	.word	0x0800a73e
 8009494:	08005959 	.word	0x08005959
 8009498:	080091e5 	.word	0x080091e5

0800949c <nan>:
 800949c:	2000      	movs	r0, #0
 800949e:	4901      	ldr	r1, [pc, #4]	; (80094a4 <nan+0x8>)
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	7ff80000 	.word	0x7ff80000

080094a8 <_sbrk_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	2300      	movs	r3, #0
 80094ac:	4d05      	ldr	r5, [pc, #20]	; (80094c4 <_sbrk_r+0x1c>)
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	f7f9 fa12 	bl	80028dc <_sbrk>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_sbrk_r+0x1a>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_sbrk_r+0x1a>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	200004ac 	.word	0x200004ac

080094c8 <strncmp>:
 80094c8:	4603      	mov	r3, r0
 80094ca:	b510      	push	{r4, lr}
 80094cc:	b172      	cbz	r2, 80094ec <strncmp+0x24>
 80094ce:	3901      	subs	r1, #1
 80094d0:	1884      	adds	r4, r0, r2
 80094d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094da:	4290      	cmp	r0, r2
 80094dc:	d101      	bne.n	80094e2 <strncmp+0x1a>
 80094de:	42a3      	cmp	r3, r4
 80094e0:	d101      	bne.n	80094e6 <strncmp+0x1e>
 80094e2:	1a80      	subs	r0, r0, r2
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d1f3      	bne.n	80094d2 <strncmp+0xa>
 80094ea:	e7fa      	b.n	80094e2 <strncmp+0x1a>
 80094ec:	4610      	mov	r0, r2
 80094ee:	e7f9      	b.n	80094e4 <strncmp+0x1c>

080094f0 <__ascii_wctomb>:
 80094f0:	4603      	mov	r3, r0
 80094f2:	4608      	mov	r0, r1
 80094f4:	b141      	cbz	r1, 8009508 <__ascii_wctomb+0x18>
 80094f6:	2aff      	cmp	r2, #255	; 0xff
 80094f8:	d904      	bls.n	8009504 <__ascii_wctomb+0x14>
 80094fa:	228a      	movs	r2, #138	; 0x8a
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	4770      	bx	lr
 8009504:	2001      	movs	r0, #1
 8009506:	700a      	strb	r2, [r1, #0]
 8009508:	4770      	bx	lr
	...

0800950c <__assert_func>:
 800950c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800950e:	4614      	mov	r4, r2
 8009510:	461a      	mov	r2, r3
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <__assert_func+0x2c>)
 8009514:	4605      	mov	r5, r0
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68d8      	ldr	r0, [r3, #12]
 800951a:	b14c      	cbz	r4, 8009530 <__assert_func+0x24>
 800951c:	4b07      	ldr	r3, [pc, #28]	; (800953c <__assert_func+0x30>)
 800951e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009522:	9100      	str	r1, [sp, #0]
 8009524:	462b      	mov	r3, r5
 8009526:	4906      	ldr	r1, [pc, #24]	; (8009540 <__assert_func+0x34>)
 8009528:	f000 f80e 	bl	8009548 <fiprintf>
 800952c:	f000 fa8a 	bl	8009a44 <abort>
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <__assert_func+0x38>)
 8009532:	461c      	mov	r4, r3
 8009534:	e7f3      	b.n	800951e <__assert_func+0x12>
 8009536:	bf00      	nop
 8009538:	2000000c 	.word	0x2000000c
 800953c:	0800a745 	.word	0x0800a745
 8009540:	0800a752 	.word	0x0800a752
 8009544:	0800a780 	.word	0x0800a780

08009548 <fiprintf>:
 8009548:	b40e      	push	{r1, r2, r3}
 800954a:	b503      	push	{r0, r1, lr}
 800954c:	4601      	mov	r1, r0
 800954e:	ab03      	add	r3, sp, #12
 8009550:	4805      	ldr	r0, [pc, #20]	; (8009568 <fiprintf+0x20>)
 8009552:	f853 2b04 	ldr.w	r2, [r3], #4
 8009556:	6800      	ldr	r0, [r0, #0]
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	f000 f883 	bl	8009664 <_vfiprintf_r>
 800955e:	b002      	add	sp, #8
 8009560:	f85d eb04 	ldr.w	lr, [sp], #4
 8009564:	b003      	add	sp, #12
 8009566:	4770      	bx	lr
 8009568:	2000000c 	.word	0x2000000c

0800956c <memmove>:
 800956c:	4288      	cmp	r0, r1
 800956e:	b510      	push	{r4, lr}
 8009570:	eb01 0402 	add.w	r4, r1, r2
 8009574:	d902      	bls.n	800957c <memmove+0x10>
 8009576:	4284      	cmp	r4, r0
 8009578:	4623      	mov	r3, r4
 800957a:	d807      	bhi.n	800958c <memmove+0x20>
 800957c:	1e43      	subs	r3, r0, #1
 800957e:	42a1      	cmp	r1, r4
 8009580:	d008      	beq.n	8009594 <memmove+0x28>
 8009582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800958a:	e7f8      	b.n	800957e <memmove+0x12>
 800958c:	4601      	mov	r1, r0
 800958e:	4402      	add	r2, r0
 8009590:	428a      	cmp	r2, r1
 8009592:	d100      	bne.n	8009596 <memmove+0x2a>
 8009594:	bd10      	pop	{r4, pc}
 8009596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800959a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800959e:	e7f7      	b.n	8009590 <memmove+0x24>

080095a0 <__malloc_lock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	; (80095a8 <__malloc_lock+0x8>)
 80095a2:	f000 bc0b 	b.w	8009dbc <__retarget_lock_acquire_recursive>
 80095a6:	bf00      	nop
 80095a8:	200004b0 	.word	0x200004b0

080095ac <__malloc_unlock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	; (80095b4 <__malloc_unlock+0x8>)
 80095ae:	f000 bc06 	b.w	8009dbe <__retarget_lock_release_recursive>
 80095b2:	bf00      	nop
 80095b4:	200004b0 	.word	0x200004b0

080095b8 <_realloc_r>:
 80095b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095bc:	4680      	mov	r8, r0
 80095be:	4614      	mov	r4, r2
 80095c0:	460e      	mov	r6, r1
 80095c2:	b921      	cbnz	r1, 80095ce <_realloc_r+0x16>
 80095c4:	4611      	mov	r1, r2
 80095c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ca:	f7ff bd97 	b.w	80090fc <_malloc_r>
 80095ce:	b92a      	cbnz	r2, 80095dc <_realloc_r+0x24>
 80095d0:	f7ff fd2c 	bl	800902c <_free_r>
 80095d4:	4625      	mov	r5, r4
 80095d6:	4628      	mov	r0, r5
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095dc:	f000 fc56 	bl	8009e8c <_malloc_usable_size_r>
 80095e0:	4284      	cmp	r4, r0
 80095e2:	4607      	mov	r7, r0
 80095e4:	d802      	bhi.n	80095ec <_realloc_r+0x34>
 80095e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095ea:	d812      	bhi.n	8009612 <_realloc_r+0x5a>
 80095ec:	4621      	mov	r1, r4
 80095ee:	4640      	mov	r0, r8
 80095f0:	f7ff fd84 	bl	80090fc <_malloc_r>
 80095f4:	4605      	mov	r5, r0
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d0ed      	beq.n	80095d6 <_realloc_r+0x1e>
 80095fa:	42bc      	cmp	r4, r7
 80095fc:	4622      	mov	r2, r4
 80095fe:	4631      	mov	r1, r6
 8009600:	bf28      	it	cs
 8009602:	463a      	movcs	r2, r7
 8009604:	f7ff f838 	bl	8008678 <memcpy>
 8009608:	4631      	mov	r1, r6
 800960a:	4640      	mov	r0, r8
 800960c:	f7ff fd0e 	bl	800902c <_free_r>
 8009610:	e7e1      	b.n	80095d6 <_realloc_r+0x1e>
 8009612:	4635      	mov	r5, r6
 8009614:	e7df      	b.n	80095d6 <_realloc_r+0x1e>

08009616 <__sfputc_r>:
 8009616:	6893      	ldr	r3, [r2, #8]
 8009618:	b410      	push	{r4}
 800961a:	3b01      	subs	r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	6093      	str	r3, [r2, #8]
 8009620:	da07      	bge.n	8009632 <__sfputc_r+0x1c>
 8009622:	6994      	ldr	r4, [r2, #24]
 8009624:	42a3      	cmp	r3, r4
 8009626:	db01      	blt.n	800962c <__sfputc_r+0x16>
 8009628:	290a      	cmp	r1, #10
 800962a:	d102      	bne.n	8009632 <__sfputc_r+0x1c>
 800962c:	bc10      	pop	{r4}
 800962e:	f000 b949 	b.w	80098c4 <__swbuf_r>
 8009632:	6813      	ldr	r3, [r2, #0]
 8009634:	1c58      	adds	r0, r3, #1
 8009636:	6010      	str	r0, [r2, #0]
 8009638:	7019      	strb	r1, [r3, #0]
 800963a:	4608      	mov	r0, r1
 800963c:	bc10      	pop	{r4}
 800963e:	4770      	bx	lr

08009640 <__sfputs_r>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	4606      	mov	r6, r0
 8009644:	460f      	mov	r7, r1
 8009646:	4614      	mov	r4, r2
 8009648:	18d5      	adds	r5, r2, r3
 800964a:	42ac      	cmp	r4, r5
 800964c:	d101      	bne.n	8009652 <__sfputs_r+0x12>
 800964e:	2000      	movs	r0, #0
 8009650:	e007      	b.n	8009662 <__sfputs_r+0x22>
 8009652:	463a      	mov	r2, r7
 8009654:	4630      	mov	r0, r6
 8009656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965a:	f7ff ffdc 	bl	8009616 <__sfputc_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d1f3      	bne.n	800964a <__sfputs_r+0xa>
 8009662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009664 <_vfiprintf_r>:
 8009664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009668:	460d      	mov	r5, r1
 800966a:	4614      	mov	r4, r2
 800966c:	4698      	mov	r8, r3
 800966e:	4606      	mov	r6, r0
 8009670:	b09d      	sub	sp, #116	; 0x74
 8009672:	b118      	cbz	r0, 800967c <_vfiprintf_r+0x18>
 8009674:	6983      	ldr	r3, [r0, #24]
 8009676:	b90b      	cbnz	r3, 800967c <_vfiprintf_r+0x18>
 8009678:	f000 fb02 	bl	8009c80 <__sinit>
 800967c:	4b89      	ldr	r3, [pc, #548]	; (80098a4 <_vfiprintf_r+0x240>)
 800967e:	429d      	cmp	r5, r3
 8009680:	d11b      	bne.n	80096ba <_vfiprintf_r+0x56>
 8009682:	6875      	ldr	r5, [r6, #4]
 8009684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009686:	07d9      	lsls	r1, r3, #31
 8009688:	d405      	bmi.n	8009696 <_vfiprintf_r+0x32>
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	059a      	lsls	r2, r3, #22
 800968e:	d402      	bmi.n	8009696 <_vfiprintf_r+0x32>
 8009690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009692:	f000 fb93 	bl	8009dbc <__retarget_lock_acquire_recursive>
 8009696:	89ab      	ldrh	r3, [r5, #12]
 8009698:	071b      	lsls	r3, r3, #28
 800969a:	d501      	bpl.n	80096a0 <_vfiprintf_r+0x3c>
 800969c:	692b      	ldr	r3, [r5, #16]
 800969e:	b9eb      	cbnz	r3, 80096dc <_vfiprintf_r+0x78>
 80096a0:	4629      	mov	r1, r5
 80096a2:	4630      	mov	r0, r6
 80096a4:	f000 f960 	bl	8009968 <__swsetup_r>
 80096a8:	b1c0      	cbz	r0, 80096dc <_vfiprintf_r+0x78>
 80096aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ac:	07dc      	lsls	r4, r3, #31
 80096ae:	d50e      	bpl.n	80096ce <_vfiprintf_r+0x6a>
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	b01d      	add	sp, #116	; 0x74
 80096b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ba:	4b7b      	ldr	r3, [pc, #492]	; (80098a8 <_vfiprintf_r+0x244>)
 80096bc:	429d      	cmp	r5, r3
 80096be:	d101      	bne.n	80096c4 <_vfiprintf_r+0x60>
 80096c0:	68b5      	ldr	r5, [r6, #8]
 80096c2:	e7df      	b.n	8009684 <_vfiprintf_r+0x20>
 80096c4:	4b79      	ldr	r3, [pc, #484]	; (80098ac <_vfiprintf_r+0x248>)
 80096c6:	429d      	cmp	r5, r3
 80096c8:	bf08      	it	eq
 80096ca:	68f5      	ldreq	r5, [r6, #12]
 80096cc:	e7da      	b.n	8009684 <_vfiprintf_r+0x20>
 80096ce:	89ab      	ldrh	r3, [r5, #12]
 80096d0:	0598      	lsls	r0, r3, #22
 80096d2:	d4ed      	bmi.n	80096b0 <_vfiprintf_r+0x4c>
 80096d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096d6:	f000 fb72 	bl	8009dbe <__retarget_lock_release_recursive>
 80096da:	e7e9      	b.n	80096b0 <_vfiprintf_r+0x4c>
 80096dc:	2300      	movs	r3, #0
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	2320      	movs	r3, #32
 80096e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096e6:	2330      	movs	r3, #48	; 0x30
 80096e8:	f04f 0901 	mov.w	r9, #1
 80096ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80098b0 <_vfiprintf_r+0x24c>
 80096f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096f8:	4623      	mov	r3, r4
 80096fa:	469a      	mov	sl, r3
 80096fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009700:	b10a      	cbz	r2, 8009706 <_vfiprintf_r+0xa2>
 8009702:	2a25      	cmp	r2, #37	; 0x25
 8009704:	d1f9      	bne.n	80096fa <_vfiprintf_r+0x96>
 8009706:	ebba 0b04 	subs.w	fp, sl, r4
 800970a:	d00b      	beq.n	8009724 <_vfiprintf_r+0xc0>
 800970c:	465b      	mov	r3, fp
 800970e:	4622      	mov	r2, r4
 8009710:	4629      	mov	r1, r5
 8009712:	4630      	mov	r0, r6
 8009714:	f7ff ff94 	bl	8009640 <__sfputs_r>
 8009718:	3001      	adds	r0, #1
 800971a:	f000 80aa 	beq.w	8009872 <_vfiprintf_r+0x20e>
 800971e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009720:	445a      	add	r2, fp
 8009722:	9209      	str	r2, [sp, #36]	; 0x24
 8009724:	f89a 3000 	ldrb.w	r3, [sl]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 80a2 	beq.w	8009872 <_vfiprintf_r+0x20e>
 800972e:	2300      	movs	r3, #0
 8009730:	f04f 32ff 	mov.w	r2, #4294967295
 8009734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009738:	f10a 0a01 	add.w	sl, sl, #1
 800973c:	9304      	str	r3, [sp, #16]
 800973e:	9307      	str	r3, [sp, #28]
 8009740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009744:	931a      	str	r3, [sp, #104]	; 0x68
 8009746:	4654      	mov	r4, sl
 8009748:	2205      	movs	r2, #5
 800974a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974e:	4858      	ldr	r0, [pc, #352]	; (80098b0 <_vfiprintf_r+0x24c>)
 8009750:	f7fe ff84 	bl	800865c <memchr>
 8009754:	9a04      	ldr	r2, [sp, #16]
 8009756:	b9d8      	cbnz	r0, 8009790 <_vfiprintf_r+0x12c>
 8009758:	06d1      	lsls	r1, r2, #27
 800975a:	bf44      	itt	mi
 800975c:	2320      	movmi	r3, #32
 800975e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009762:	0713      	lsls	r3, r2, #28
 8009764:	bf44      	itt	mi
 8009766:	232b      	movmi	r3, #43	; 0x2b
 8009768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800976c:	f89a 3000 	ldrb.w	r3, [sl]
 8009770:	2b2a      	cmp	r3, #42	; 0x2a
 8009772:	d015      	beq.n	80097a0 <_vfiprintf_r+0x13c>
 8009774:	4654      	mov	r4, sl
 8009776:	2000      	movs	r0, #0
 8009778:	f04f 0c0a 	mov.w	ip, #10
 800977c:	9a07      	ldr	r2, [sp, #28]
 800977e:	4621      	mov	r1, r4
 8009780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009784:	3b30      	subs	r3, #48	; 0x30
 8009786:	2b09      	cmp	r3, #9
 8009788:	d94e      	bls.n	8009828 <_vfiprintf_r+0x1c4>
 800978a:	b1b0      	cbz	r0, 80097ba <_vfiprintf_r+0x156>
 800978c:	9207      	str	r2, [sp, #28]
 800978e:	e014      	b.n	80097ba <_vfiprintf_r+0x156>
 8009790:	eba0 0308 	sub.w	r3, r0, r8
 8009794:	fa09 f303 	lsl.w	r3, r9, r3
 8009798:	4313      	orrs	r3, r2
 800979a:	46a2      	mov	sl, r4
 800979c:	9304      	str	r3, [sp, #16]
 800979e:	e7d2      	b.n	8009746 <_vfiprintf_r+0xe2>
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	1d19      	adds	r1, r3, #4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	9103      	str	r1, [sp, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfbb      	ittet	lt
 80097ac:	425b      	neglt	r3, r3
 80097ae:	f042 0202 	orrlt.w	r2, r2, #2
 80097b2:	9307      	strge	r3, [sp, #28]
 80097b4:	9307      	strlt	r3, [sp, #28]
 80097b6:	bfb8      	it	lt
 80097b8:	9204      	strlt	r2, [sp, #16]
 80097ba:	7823      	ldrb	r3, [r4, #0]
 80097bc:	2b2e      	cmp	r3, #46	; 0x2e
 80097be:	d10c      	bne.n	80097da <_vfiprintf_r+0x176>
 80097c0:	7863      	ldrb	r3, [r4, #1]
 80097c2:	2b2a      	cmp	r3, #42	; 0x2a
 80097c4:	d135      	bne.n	8009832 <_vfiprintf_r+0x1ce>
 80097c6:	9b03      	ldr	r3, [sp, #12]
 80097c8:	3402      	adds	r4, #2
 80097ca:	1d1a      	adds	r2, r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	9203      	str	r2, [sp, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bfb8      	it	lt
 80097d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80097d8:	9305      	str	r3, [sp, #20]
 80097da:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80098b4 <_vfiprintf_r+0x250>
 80097de:	2203      	movs	r2, #3
 80097e0:	4650      	mov	r0, sl
 80097e2:	7821      	ldrb	r1, [r4, #0]
 80097e4:	f7fe ff3a 	bl	800865c <memchr>
 80097e8:	b140      	cbz	r0, 80097fc <_vfiprintf_r+0x198>
 80097ea:	2340      	movs	r3, #64	; 0x40
 80097ec:	eba0 000a 	sub.w	r0, r0, sl
 80097f0:	fa03 f000 	lsl.w	r0, r3, r0
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	3401      	adds	r4, #1
 80097f8:	4303      	orrs	r3, r0
 80097fa:	9304      	str	r3, [sp, #16]
 80097fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009800:	2206      	movs	r2, #6
 8009802:	482d      	ldr	r0, [pc, #180]	; (80098b8 <_vfiprintf_r+0x254>)
 8009804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009808:	f7fe ff28 	bl	800865c <memchr>
 800980c:	2800      	cmp	r0, #0
 800980e:	d03f      	beq.n	8009890 <_vfiprintf_r+0x22c>
 8009810:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <_vfiprintf_r+0x258>)
 8009812:	bb1b      	cbnz	r3, 800985c <_vfiprintf_r+0x1f8>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	3307      	adds	r3, #7
 8009818:	f023 0307 	bic.w	r3, r3, #7
 800981c:	3308      	adds	r3, #8
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009822:	443b      	add	r3, r7
 8009824:	9309      	str	r3, [sp, #36]	; 0x24
 8009826:	e767      	b.n	80096f8 <_vfiprintf_r+0x94>
 8009828:	460c      	mov	r4, r1
 800982a:	2001      	movs	r0, #1
 800982c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009830:	e7a5      	b.n	800977e <_vfiprintf_r+0x11a>
 8009832:	2300      	movs	r3, #0
 8009834:	f04f 0c0a 	mov.w	ip, #10
 8009838:	4619      	mov	r1, r3
 800983a:	3401      	adds	r4, #1
 800983c:	9305      	str	r3, [sp, #20]
 800983e:	4620      	mov	r0, r4
 8009840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009844:	3a30      	subs	r2, #48	; 0x30
 8009846:	2a09      	cmp	r2, #9
 8009848:	d903      	bls.n	8009852 <_vfiprintf_r+0x1ee>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0c5      	beq.n	80097da <_vfiprintf_r+0x176>
 800984e:	9105      	str	r1, [sp, #20]
 8009850:	e7c3      	b.n	80097da <_vfiprintf_r+0x176>
 8009852:	4604      	mov	r4, r0
 8009854:	2301      	movs	r3, #1
 8009856:	fb0c 2101 	mla	r1, ip, r1, r2
 800985a:	e7f0      	b.n	800983e <_vfiprintf_r+0x1da>
 800985c:	ab03      	add	r3, sp, #12
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	462a      	mov	r2, r5
 8009862:	4630      	mov	r0, r6
 8009864:	4b16      	ldr	r3, [pc, #88]	; (80098c0 <_vfiprintf_r+0x25c>)
 8009866:	a904      	add	r1, sp, #16
 8009868:	f7fc f876 	bl	8005958 <_printf_float>
 800986c:	4607      	mov	r7, r0
 800986e:	1c78      	adds	r0, r7, #1
 8009870:	d1d6      	bne.n	8009820 <_vfiprintf_r+0x1bc>
 8009872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009874:	07d9      	lsls	r1, r3, #31
 8009876:	d405      	bmi.n	8009884 <_vfiprintf_r+0x220>
 8009878:	89ab      	ldrh	r3, [r5, #12]
 800987a:	059a      	lsls	r2, r3, #22
 800987c:	d402      	bmi.n	8009884 <_vfiprintf_r+0x220>
 800987e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009880:	f000 fa9d 	bl	8009dbe <__retarget_lock_release_recursive>
 8009884:	89ab      	ldrh	r3, [r5, #12]
 8009886:	065b      	lsls	r3, r3, #25
 8009888:	f53f af12 	bmi.w	80096b0 <_vfiprintf_r+0x4c>
 800988c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800988e:	e711      	b.n	80096b4 <_vfiprintf_r+0x50>
 8009890:	ab03      	add	r3, sp, #12
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	462a      	mov	r2, r5
 8009896:	4630      	mov	r0, r6
 8009898:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <_vfiprintf_r+0x25c>)
 800989a:	a904      	add	r1, sp, #16
 800989c:	f7fc faf8 	bl	8005e90 <_printf_i>
 80098a0:	e7e4      	b.n	800986c <_vfiprintf_r+0x208>
 80098a2:	bf00      	nop
 80098a4:	0800a7a4 	.word	0x0800a7a4
 80098a8:	0800a7c4 	.word	0x0800a7c4
 80098ac:	0800a784 	.word	0x0800a784
 80098b0:	0800a734 	.word	0x0800a734
 80098b4:	0800a73a 	.word	0x0800a73a
 80098b8:	0800a73e 	.word	0x0800a73e
 80098bc:	08005959 	.word	0x08005959
 80098c0:	08009641 	.word	0x08009641

080098c4 <__swbuf_r>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	460e      	mov	r6, r1
 80098c8:	4614      	mov	r4, r2
 80098ca:	4605      	mov	r5, r0
 80098cc:	b118      	cbz	r0, 80098d6 <__swbuf_r+0x12>
 80098ce:	6983      	ldr	r3, [r0, #24]
 80098d0:	b90b      	cbnz	r3, 80098d6 <__swbuf_r+0x12>
 80098d2:	f000 f9d5 	bl	8009c80 <__sinit>
 80098d6:	4b21      	ldr	r3, [pc, #132]	; (800995c <__swbuf_r+0x98>)
 80098d8:	429c      	cmp	r4, r3
 80098da:	d12b      	bne.n	8009934 <__swbuf_r+0x70>
 80098dc:	686c      	ldr	r4, [r5, #4]
 80098de:	69a3      	ldr	r3, [r4, #24]
 80098e0:	60a3      	str	r3, [r4, #8]
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	071a      	lsls	r2, r3, #28
 80098e6:	d52f      	bpl.n	8009948 <__swbuf_r+0x84>
 80098e8:	6923      	ldr	r3, [r4, #16]
 80098ea:	b36b      	cbz	r3, 8009948 <__swbuf_r+0x84>
 80098ec:	6923      	ldr	r3, [r4, #16]
 80098ee:	6820      	ldr	r0, [r4, #0]
 80098f0:	b2f6      	uxtb	r6, r6
 80098f2:	1ac0      	subs	r0, r0, r3
 80098f4:	6963      	ldr	r3, [r4, #20]
 80098f6:	4637      	mov	r7, r6
 80098f8:	4283      	cmp	r3, r0
 80098fa:	dc04      	bgt.n	8009906 <__swbuf_r+0x42>
 80098fc:	4621      	mov	r1, r4
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 f92a 	bl	8009b58 <_fflush_r>
 8009904:	bb30      	cbnz	r0, 8009954 <__swbuf_r+0x90>
 8009906:	68a3      	ldr	r3, [r4, #8]
 8009908:	3001      	adds	r0, #1
 800990a:	3b01      	subs	r3, #1
 800990c:	60a3      	str	r3, [r4, #8]
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	6022      	str	r2, [r4, #0]
 8009914:	701e      	strb	r6, [r3, #0]
 8009916:	6963      	ldr	r3, [r4, #20]
 8009918:	4283      	cmp	r3, r0
 800991a:	d004      	beq.n	8009926 <__swbuf_r+0x62>
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	07db      	lsls	r3, r3, #31
 8009920:	d506      	bpl.n	8009930 <__swbuf_r+0x6c>
 8009922:	2e0a      	cmp	r6, #10
 8009924:	d104      	bne.n	8009930 <__swbuf_r+0x6c>
 8009926:	4621      	mov	r1, r4
 8009928:	4628      	mov	r0, r5
 800992a:	f000 f915 	bl	8009b58 <_fflush_r>
 800992e:	b988      	cbnz	r0, 8009954 <__swbuf_r+0x90>
 8009930:	4638      	mov	r0, r7
 8009932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009934:	4b0a      	ldr	r3, [pc, #40]	; (8009960 <__swbuf_r+0x9c>)
 8009936:	429c      	cmp	r4, r3
 8009938:	d101      	bne.n	800993e <__swbuf_r+0x7a>
 800993a:	68ac      	ldr	r4, [r5, #8]
 800993c:	e7cf      	b.n	80098de <__swbuf_r+0x1a>
 800993e:	4b09      	ldr	r3, [pc, #36]	; (8009964 <__swbuf_r+0xa0>)
 8009940:	429c      	cmp	r4, r3
 8009942:	bf08      	it	eq
 8009944:	68ec      	ldreq	r4, [r5, #12]
 8009946:	e7ca      	b.n	80098de <__swbuf_r+0x1a>
 8009948:	4621      	mov	r1, r4
 800994a:	4628      	mov	r0, r5
 800994c:	f000 f80c 	bl	8009968 <__swsetup_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	d0cb      	beq.n	80098ec <__swbuf_r+0x28>
 8009954:	f04f 37ff 	mov.w	r7, #4294967295
 8009958:	e7ea      	b.n	8009930 <__swbuf_r+0x6c>
 800995a:	bf00      	nop
 800995c:	0800a7a4 	.word	0x0800a7a4
 8009960:	0800a7c4 	.word	0x0800a7c4
 8009964:	0800a784 	.word	0x0800a784

08009968 <__swsetup_r>:
 8009968:	4b32      	ldr	r3, [pc, #200]	; (8009a34 <__swsetup_r+0xcc>)
 800996a:	b570      	push	{r4, r5, r6, lr}
 800996c:	681d      	ldr	r5, [r3, #0]
 800996e:	4606      	mov	r6, r0
 8009970:	460c      	mov	r4, r1
 8009972:	b125      	cbz	r5, 800997e <__swsetup_r+0x16>
 8009974:	69ab      	ldr	r3, [r5, #24]
 8009976:	b913      	cbnz	r3, 800997e <__swsetup_r+0x16>
 8009978:	4628      	mov	r0, r5
 800997a:	f000 f981 	bl	8009c80 <__sinit>
 800997e:	4b2e      	ldr	r3, [pc, #184]	; (8009a38 <__swsetup_r+0xd0>)
 8009980:	429c      	cmp	r4, r3
 8009982:	d10f      	bne.n	80099a4 <__swsetup_r+0x3c>
 8009984:	686c      	ldr	r4, [r5, #4]
 8009986:	89a3      	ldrh	r3, [r4, #12]
 8009988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800998c:	0719      	lsls	r1, r3, #28
 800998e:	d42c      	bmi.n	80099ea <__swsetup_r+0x82>
 8009990:	06dd      	lsls	r5, r3, #27
 8009992:	d411      	bmi.n	80099b8 <__swsetup_r+0x50>
 8009994:	2309      	movs	r3, #9
 8009996:	6033      	str	r3, [r6, #0]
 8009998:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800999c:	f04f 30ff 	mov.w	r0, #4294967295
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	e03e      	b.n	8009a22 <__swsetup_r+0xba>
 80099a4:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <__swsetup_r+0xd4>)
 80099a6:	429c      	cmp	r4, r3
 80099a8:	d101      	bne.n	80099ae <__swsetup_r+0x46>
 80099aa:	68ac      	ldr	r4, [r5, #8]
 80099ac:	e7eb      	b.n	8009986 <__swsetup_r+0x1e>
 80099ae:	4b24      	ldr	r3, [pc, #144]	; (8009a40 <__swsetup_r+0xd8>)
 80099b0:	429c      	cmp	r4, r3
 80099b2:	bf08      	it	eq
 80099b4:	68ec      	ldreq	r4, [r5, #12]
 80099b6:	e7e6      	b.n	8009986 <__swsetup_r+0x1e>
 80099b8:	0758      	lsls	r0, r3, #29
 80099ba:	d512      	bpl.n	80099e2 <__swsetup_r+0x7a>
 80099bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099be:	b141      	cbz	r1, 80099d2 <__swsetup_r+0x6a>
 80099c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099c4:	4299      	cmp	r1, r3
 80099c6:	d002      	beq.n	80099ce <__swsetup_r+0x66>
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7ff fb2f 	bl	800902c <_free_r>
 80099ce:	2300      	movs	r3, #0
 80099d0:	6363      	str	r3, [r4, #52]	; 0x34
 80099d2:	89a3      	ldrh	r3, [r4, #12]
 80099d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	2300      	movs	r3, #0
 80099dc:	6063      	str	r3, [r4, #4]
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f043 0308 	orr.w	r3, r3, #8
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	6923      	ldr	r3, [r4, #16]
 80099ec:	b94b      	cbnz	r3, 8009a02 <__swsetup_r+0x9a>
 80099ee:	89a3      	ldrh	r3, [r4, #12]
 80099f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099f8:	d003      	beq.n	8009a02 <__swsetup_r+0x9a>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4630      	mov	r0, r6
 80099fe:	f000 fa05 	bl	8009e0c <__smakebuf_r>
 8009a02:	89a0      	ldrh	r0, [r4, #12]
 8009a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a08:	f010 0301 	ands.w	r3, r0, #1
 8009a0c:	d00a      	beq.n	8009a24 <__swsetup_r+0xbc>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	6963      	ldr	r3, [r4, #20]
 8009a14:	425b      	negs	r3, r3
 8009a16:	61a3      	str	r3, [r4, #24]
 8009a18:	6923      	ldr	r3, [r4, #16]
 8009a1a:	b943      	cbnz	r3, 8009a2e <__swsetup_r+0xc6>
 8009a1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a20:	d1ba      	bne.n	8009998 <__swsetup_r+0x30>
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	0781      	lsls	r1, r0, #30
 8009a26:	bf58      	it	pl
 8009a28:	6963      	ldrpl	r3, [r4, #20]
 8009a2a:	60a3      	str	r3, [r4, #8]
 8009a2c:	e7f4      	b.n	8009a18 <__swsetup_r+0xb0>
 8009a2e:	2000      	movs	r0, #0
 8009a30:	e7f7      	b.n	8009a22 <__swsetup_r+0xba>
 8009a32:	bf00      	nop
 8009a34:	2000000c 	.word	0x2000000c
 8009a38:	0800a7a4 	.word	0x0800a7a4
 8009a3c:	0800a7c4 	.word	0x0800a7c4
 8009a40:	0800a784 	.word	0x0800a784

08009a44 <abort>:
 8009a44:	2006      	movs	r0, #6
 8009a46:	b508      	push	{r3, lr}
 8009a48:	f000 fa50 	bl	8009eec <raise>
 8009a4c:	2001      	movs	r0, #1
 8009a4e:	f7f8 fed2 	bl	80027f6 <_exit>
	...

08009a54 <__sflush_r>:
 8009a54:	898a      	ldrh	r2, [r1, #12]
 8009a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a58:	4605      	mov	r5, r0
 8009a5a:	0710      	lsls	r0, r2, #28
 8009a5c:	460c      	mov	r4, r1
 8009a5e:	d457      	bmi.n	8009b10 <__sflush_r+0xbc>
 8009a60:	684b      	ldr	r3, [r1, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	dc04      	bgt.n	8009a70 <__sflush_r+0x1c>
 8009a66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	dc01      	bgt.n	8009a70 <__sflush_r+0x1c>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	d0fa      	beq.n	8009a6c <__sflush_r+0x18>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a7c:	682f      	ldr	r7, [r5, #0]
 8009a7e:	602b      	str	r3, [r5, #0]
 8009a80:	d032      	beq.n	8009ae8 <__sflush_r+0x94>
 8009a82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	075a      	lsls	r2, r3, #29
 8009a88:	d505      	bpl.n	8009a96 <__sflush_r+0x42>
 8009a8a:	6863      	ldr	r3, [r4, #4]
 8009a8c:	1ac0      	subs	r0, r0, r3
 8009a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a90:	b10b      	cbz	r3, 8009a96 <__sflush_r+0x42>
 8009a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a94:	1ac0      	subs	r0, r0, r3
 8009a96:	2300      	movs	r3, #0
 8009a98:	4602      	mov	r2, r0
 8009a9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	6a21      	ldr	r1, [r4, #32]
 8009aa0:	47b0      	blx	r6
 8009aa2:	1c43      	adds	r3, r0, #1
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	d106      	bne.n	8009ab6 <__sflush_r+0x62>
 8009aa8:	6829      	ldr	r1, [r5, #0]
 8009aaa:	291d      	cmp	r1, #29
 8009aac:	d82c      	bhi.n	8009b08 <__sflush_r+0xb4>
 8009aae:	4a29      	ldr	r2, [pc, #164]	; (8009b54 <__sflush_r+0x100>)
 8009ab0:	40ca      	lsrs	r2, r1
 8009ab2:	07d6      	lsls	r6, r2, #31
 8009ab4:	d528      	bpl.n	8009b08 <__sflush_r+0xb4>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	6062      	str	r2, [r4, #4]
 8009aba:	6922      	ldr	r2, [r4, #16]
 8009abc:	04d9      	lsls	r1, r3, #19
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	d504      	bpl.n	8009acc <__sflush_r+0x78>
 8009ac2:	1c42      	adds	r2, r0, #1
 8009ac4:	d101      	bne.n	8009aca <__sflush_r+0x76>
 8009ac6:	682b      	ldr	r3, [r5, #0]
 8009ac8:	b903      	cbnz	r3, 8009acc <__sflush_r+0x78>
 8009aca:	6560      	str	r0, [r4, #84]	; 0x54
 8009acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ace:	602f      	str	r7, [r5, #0]
 8009ad0:	2900      	cmp	r1, #0
 8009ad2:	d0cb      	beq.n	8009a6c <__sflush_r+0x18>
 8009ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ad8:	4299      	cmp	r1, r3
 8009ada:	d002      	beq.n	8009ae2 <__sflush_r+0x8e>
 8009adc:	4628      	mov	r0, r5
 8009ade:	f7ff faa5 	bl	800902c <_free_r>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8009ae6:	e7c2      	b.n	8009a6e <__sflush_r+0x1a>
 8009ae8:	6a21      	ldr	r1, [r4, #32]
 8009aea:	2301      	movs	r3, #1
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b0      	blx	r6
 8009af0:	1c41      	adds	r1, r0, #1
 8009af2:	d1c7      	bne.n	8009a84 <__sflush_r+0x30>
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0c4      	beq.n	8009a84 <__sflush_r+0x30>
 8009afa:	2b1d      	cmp	r3, #29
 8009afc:	d001      	beq.n	8009b02 <__sflush_r+0xae>
 8009afe:	2b16      	cmp	r3, #22
 8009b00:	d101      	bne.n	8009b06 <__sflush_r+0xb2>
 8009b02:	602f      	str	r7, [r5, #0]
 8009b04:	e7b2      	b.n	8009a6c <__sflush_r+0x18>
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b0c:	81a3      	strh	r3, [r4, #12]
 8009b0e:	e7ae      	b.n	8009a6e <__sflush_r+0x1a>
 8009b10:	690f      	ldr	r7, [r1, #16]
 8009b12:	2f00      	cmp	r7, #0
 8009b14:	d0aa      	beq.n	8009a6c <__sflush_r+0x18>
 8009b16:	0793      	lsls	r3, r2, #30
 8009b18:	bf18      	it	ne
 8009b1a:	2300      	movne	r3, #0
 8009b1c:	680e      	ldr	r6, [r1, #0]
 8009b1e:	bf08      	it	eq
 8009b20:	694b      	ldreq	r3, [r1, #20]
 8009b22:	1bf6      	subs	r6, r6, r7
 8009b24:	600f      	str	r7, [r1, #0]
 8009b26:	608b      	str	r3, [r1, #8]
 8009b28:	2e00      	cmp	r6, #0
 8009b2a:	dd9f      	ble.n	8009a6c <__sflush_r+0x18>
 8009b2c:	4633      	mov	r3, r6
 8009b2e:	463a      	mov	r2, r7
 8009b30:	4628      	mov	r0, r5
 8009b32:	6a21      	ldr	r1, [r4, #32]
 8009b34:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009b38:	47e0      	blx	ip
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	dc06      	bgt.n	8009b4c <__sflush_r+0xf8>
 8009b3e:	89a3      	ldrh	r3, [r4, #12]
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295
 8009b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	e790      	b.n	8009a6e <__sflush_r+0x1a>
 8009b4c:	4407      	add	r7, r0
 8009b4e:	1a36      	subs	r6, r6, r0
 8009b50:	e7ea      	b.n	8009b28 <__sflush_r+0xd4>
 8009b52:	bf00      	nop
 8009b54:	20400001 	.word	0x20400001

08009b58 <_fflush_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	690b      	ldr	r3, [r1, #16]
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	b913      	cbnz	r3, 8009b68 <_fflush_r+0x10>
 8009b62:	2500      	movs	r5, #0
 8009b64:	4628      	mov	r0, r5
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	b118      	cbz	r0, 8009b72 <_fflush_r+0x1a>
 8009b6a:	6983      	ldr	r3, [r0, #24]
 8009b6c:	b90b      	cbnz	r3, 8009b72 <_fflush_r+0x1a>
 8009b6e:	f000 f887 	bl	8009c80 <__sinit>
 8009b72:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <_fflush_r+0x6c>)
 8009b74:	429c      	cmp	r4, r3
 8009b76:	d11b      	bne.n	8009bb0 <_fflush_r+0x58>
 8009b78:	686c      	ldr	r4, [r5, #4]
 8009b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0ef      	beq.n	8009b62 <_fflush_r+0xa>
 8009b82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b84:	07d0      	lsls	r0, r2, #31
 8009b86:	d404      	bmi.n	8009b92 <_fflush_r+0x3a>
 8009b88:	0599      	lsls	r1, r3, #22
 8009b8a:	d402      	bmi.n	8009b92 <_fflush_r+0x3a>
 8009b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b8e:	f000 f915 	bl	8009dbc <__retarget_lock_acquire_recursive>
 8009b92:	4628      	mov	r0, r5
 8009b94:	4621      	mov	r1, r4
 8009b96:	f7ff ff5d 	bl	8009a54 <__sflush_r>
 8009b9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	07da      	lsls	r2, r3, #31
 8009ba0:	d4e0      	bmi.n	8009b64 <_fflush_r+0xc>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	059b      	lsls	r3, r3, #22
 8009ba6:	d4dd      	bmi.n	8009b64 <_fflush_r+0xc>
 8009ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009baa:	f000 f908 	bl	8009dbe <__retarget_lock_release_recursive>
 8009bae:	e7d9      	b.n	8009b64 <_fflush_r+0xc>
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <_fflush_r+0x70>)
 8009bb2:	429c      	cmp	r4, r3
 8009bb4:	d101      	bne.n	8009bba <_fflush_r+0x62>
 8009bb6:	68ac      	ldr	r4, [r5, #8]
 8009bb8:	e7df      	b.n	8009b7a <_fflush_r+0x22>
 8009bba:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <_fflush_r+0x74>)
 8009bbc:	429c      	cmp	r4, r3
 8009bbe:	bf08      	it	eq
 8009bc0:	68ec      	ldreq	r4, [r5, #12]
 8009bc2:	e7da      	b.n	8009b7a <_fflush_r+0x22>
 8009bc4:	0800a7a4 	.word	0x0800a7a4
 8009bc8:	0800a7c4 	.word	0x0800a7c4
 8009bcc:	0800a784 	.word	0x0800a784

08009bd0 <std>:
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8009bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bde:	6083      	str	r3, [r0, #8]
 8009be0:	8181      	strh	r1, [r0, #12]
 8009be2:	6643      	str	r3, [r0, #100]	; 0x64
 8009be4:	81c2      	strh	r2, [r0, #14]
 8009be6:	6183      	str	r3, [r0, #24]
 8009be8:	4619      	mov	r1, r3
 8009bea:	2208      	movs	r2, #8
 8009bec:	305c      	adds	r0, #92	; 0x5c
 8009bee:	f7fb fe0d 	bl	800580c <memset>
 8009bf2:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <std+0x38>)
 8009bf4:	6224      	str	r4, [r4, #32]
 8009bf6:	6263      	str	r3, [r4, #36]	; 0x24
 8009bf8:	4b04      	ldr	r3, [pc, #16]	; (8009c0c <std+0x3c>)
 8009bfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bfc:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <std+0x40>)
 8009bfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <std+0x44>)
 8009c02:	6323      	str	r3, [r4, #48]	; 0x30
 8009c04:	bd10      	pop	{r4, pc}
 8009c06:	bf00      	nop
 8009c08:	08009f25 	.word	0x08009f25
 8009c0c:	08009f47 	.word	0x08009f47
 8009c10:	08009f7f 	.word	0x08009f7f
 8009c14:	08009fa3 	.word	0x08009fa3

08009c18 <_cleanup_r>:
 8009c18:	4901      	ldr	r1, [pc, #4]	; (8009c20 <_cleanup_r+0x8>)
 8009c1a:	f000 b8af 	b.w	8009d7c <_fwalk_reent>
 8009c1e:	bf00      	nop
 8009c20:	08009b59 	.word	0x08009b59

08009c24 <__sfmoreglue>:
 8009c24:	2268      	movs	r2, #104	; 0x68
 8009c26:	b570      	push	{r4, r5, r6, lr}
 8009c28:	1e4d      	subs	r5, r1, #1
 8009c2a:	4355      	muls	r5, r2
 8009c2c:	460e      	mov	r6, r1
 8009c2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c32:	f7ff fa63 	bl	80090fc <_malloc_r>
 8009c36:	4604      	mov	r4, r0
 8009c38:	b140      	cbz	r0, 8009c4c <__sfmoreglue+0x28>
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	e9c0 1600 	strd	r1, r6, [r0]
 8009c40:	300c      	adds	r0, #12
 8009c42:	60a0      	str	r0, [r4, #8]
 8009c44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c48:	f7fb fde0 	bl	800580c <memset>
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}

08009c50 <__sfp_lock_acquire>:
 8009c50:	4801      	ldr	r0, [pc, #4]	; (8009c58 <__sfp_lock_acquire+0x8>)
 8009c52:	f000 b8b3 	b.w	8009dbc <__retarget_lock_acquire_recursive>
 8009c56:	bf00      	nop
 8009c58:	200004b1 	.word	0x200004b1

08009c5c <__sfp_lock_release>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__sfp_lock_release+0x8>)
 8009c5e:	f000 b8ae 	b.w	8009dbe <__retarget_lock_release_recursive>
 8009c62:	bf00      	nop
 8009c64:	200004b1 	.word	0x200004b1

08009c68 <__sinit_lock_acquire>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__sinit_lock_acquire+0x8>)
 8009c6a:	f000 b8a7 	b.w	8009dbc <__retarget_lock_acquire_recursive>
 8009c6e:	bf00      	nop
 8009c70:	200004b2 	.word	0x200004b2

08009c74 <__sinit_lock_release>:
 8009c74:	4801      	ldr	r0, [pc, #4]	; (8009c7c <__sinit_lock_release+0x8>)
 8009c76:	f000 b8a2 	b.w	8009dbe <__retarget_lock_release_recursive>
 8009c7a:	bf00      	nop
 8009c7c:	200004b2 	.word	0x200004b2

08009c80 <__sinit>:
 8009c80:	b510      	push	{r4, lr}
 8009c82:	4604      	mov	r4, r0
 8009c84:	f7ff fff0 	bl	8009c68 <__sinit_lock_acquire>
 8009c88:	69a3      	ldr	r3, [r4, #24]
 8009c8a:	b11b      	cbz	r3, 8009c94 <__sinit+0x14>
 8009c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c90:	f7ff bff0 	b.w	8009c74 <__sinit_lock_release>
 8009c94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c98:	6523      	str	r3, [r4, #80]	; 0x50
 8009c9a:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <__sinit+0x68>)
 8009c9c:	4a13      	ldr	r2, [pc, #76]	; (8009cec <__sinit+0x6c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	bf08      	it	eq
 8009ca6:	2301      	moveq	r3, #1
 8009ca8:	4620      	mov	r0, r4
 8009caa:	bf08      	it	eq
 8009cac:	61a3      	streq	r3, [r4, #24]
 8009cae:	f000 f81f 	bl	8009cf0 <__sfp>
 8009cb2:	6060      	str	r0, [r4, #4]
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 f81b 	bl	8009cf0 <__sfp>
 8009cba:	60a0      	str	r0, [r4, #8]
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 f817 	bl	8009cf0 <__sfp>
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2104      	movs	r1, #4
 8009cc6:	60e0      	str	r0, [r4, #12]
 8009cc8:	6860      	ldr	r0, [r4, #4]
 8009cca:	f7ff ff81 	bl	8009bd0 <std>
 8009cce:	2201      	movs	r2, #1
 8009cd0:	2109      	movs	r1, #9
 8009cd2:	68a0      	ldr	r0, [r4, #8]
 8009cd4:	f7ff ff7c 	bl	8009bd0 <std>
 8009cd8:	2202      	movs	r2, #2
 8009cda:	2112      	movs	r1, #18
 8009cdc:	68e0      	ldr	r0, [r4, #12]
 8009cde:	f7ff ff77 	bl	8009bd0 <std>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	61a3      	str	r3, [r4, #24]
 8009ce6:	e7d1      	b.n	8009c8c <__sinit+0xc>
 8009ce8:	0800a340 	.word	0x0800a340
 8009cec:	08009c19 	.word	0x08009c19

08009cf0 <__sfp>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	4607      	mov	r7, r0
 8009cf4:	f7ff ffac 	bl	8009c50 <__sfp_lock_acquire>
 8009cf8:	4b1e      	ldr	r3, [pc, #120]	; (8009d74 <__sfp+0x84>)
 8009cfa:	681e      	ldr	r6, [r3, #0]
 8009cfc:	69b3      	ldr	r3, [r6, #24]
 8009cfe:	b913      	cbnz	r3, 8009d06 <__sfp+0x16>
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff ffbd 	bl	8009c80 <__sinit>
 8009d06:	3648      	adds	r6, #72	; 0x48
 8009d08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	d503      	bpl.n	8009d18 <__sfp+0x28>
 8009d10:	6833      	ldr	r3, [r6, #0]
 8009d12:	b30b      	cbz	r3, 8009d58 <__sfp+0x68>
 8009d14:	6836      	ldr	r6, [r6, #0]
 8009d16:	e7f7      	b.n	8009d08 <__sfp+0x18>
 8009d18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d1c:	b9d5      	cbnz	r5, 8009d54 <__sfp+0x64>
 8009d1e:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <__sfp+0x88>)
 8009d20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d24:	60e3      	str	r3, [r4, #12]
 8009d26:	6665      	str	r5, [r4, #100]	; 0x64
 8009d28:	f000 f847 	bl	8009dba <__retarget_lock_init_recursive>
 8009d2c:	f7ff ff96 	bl	8009c5c <__sfp_lock_release>
 8009d30:	2208      	movs	r2, #8
 8009d32:	4629      	mov	r1, r5
 8009d34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d3c:	6025      	str	r5, [r4, #0]
 8009d3e:	61a5      	str	r5, [r4, #24]
 8009d40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d44:	f7fb fd62 	bl	800580c <memset>
 8009d48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d50:	4620      	mov	r0, r4
 8009d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d54:	3468      	adds	r4, #104	; 0x68
 8009d56:	e7d9      	b.n	8009d0c <__sfp+0x1c>
 8009d58:	2104      	movs	r1, #4
 8009d5a:	4638      	mov	r0, r7
 8009d5c:	f7ff ff62 	bl	8009c24 <__sfmoreglue>
 8009d60:	4604      	mov	r4, r0
 8009d62:	6030      	str	r0, [r6, #0]
 8009d64:	2800      	cmp	r0, #0
 8009d66:	d1d5      	bne.n	8009d14 <__sfp+0x24>
 8009d68:	f7ff ff78 	bl	8009c5c <__sfp_lock_release>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	e7ee      	b.n	8009d50 <__sfp+0x60>
 8009d72:	bf00      	nop
 8009d74:	0800a340 	.word	0x0800a340
 8009d78:	ffff0001 	.word	0xffff0001

08009d7c <_fwalk_reent>:
 8009d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d80:	4606      	mov	r6, r0
 8009d82:	4688      	mov	r8, r1
 8009d84:	2700      	movs	r7, #0
 8009d86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d8e:	f1b9 0901 	subs.w	r9, r9, #1
 8009d92:	d505      	bpl.n	8009da0 <_fwalk_reent+0x24>
 8009d94:	6824      	ldr	r4, [r4, #0]
 8009d96:	2c00      	cmp	r4, #0
 8009d98:	d1f7      	bne.n	8009d8a <_fwalk_reent+0xe>
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009da0:	89ab      	ldrh	r3, [r5, #12]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d907      	bls.n	8009db6 <_fwalk_reent+0x3a>
 8009da6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009daa:	3301      	adds	r3, #1
 8009dac:	d003      	beq.n	8009db6 <_fwalk_reent+0x3a>
 8009dae:	4629      	mov	r1, r5
 8009db0:	4630      	mov	r0, r6
 8009db2:	47c0      	blx	r8
 8009db4:	4307      	orrs	r7, r0
 8009db6:	3568      	adds	r5, #104	; 0x68
 8009db8:	e7e9      	b.n	8009d8e <_fwalk_reent+0x12>

08009dba <__retarget_lock_init_recursive>:
 8009dba:	4770      	bx	lr

08009dbc <__retarget_lock_acquire_recursive>:
 8009dbc:	4770      	bx	lr

08009dbe <__retarget_lock_release_recursive>:
 8009dbe:	4770      	bx	lr

08009dc0 <__swhatbuf_r>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	460e      	mov	r6, r1
 8009dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc8:	4614      	mov	r4, r2
 8009dca:	2900      	cmp	r1, #0
 8009dcc:	461d      	mov	r5, r3
 8009dce:	b096      	sub	sp, #88	; 0x58
 8009dd0:	da08      	bge.n	8009de4 <__swhatbuf_r+0x24>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dd8:	602a      	str	r2, [r5, #0]
 8009dda:	061a      	lsls	r2, r3, #24
 8009ddc:	d410      	bmi.n	8009e00 <__swhatbuf_r+0x40>
 8009dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009de2:	e00e      	b.n	8009e02 <__swhatbuf_r+0x42>
 8009de4:	466a      	mov	r2, sp
 8009de6:	f000 f903 	bl	8009ff0 <_fstat_r>
 8009dea:	2800      	cmp	r0, #0
 8009dec:	dbf1      	blt.n	8009dd2 <__swhatbuf_r+0x12>
 8009dee:	9a01      	ldr	r2, [sp, #4]
 8009df0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009df4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009df8:	425a      	negs	r2, r3
 8009dfa:	415a      	adcs	r2, r3
 8009dfc:	602a      	str	r2, [r5, #0]
 8009dfe:	e7ee      	b.n	8009dde <__swhatbuf_r+0x1e>
 8009e00:	2340      	movs	r3, #64	; 0x40
 8009e02:	2000      	movs	r0, #0
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	b016      	add	sp, #88	; 0x58
 8009e08:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e0c <__smakebuf_r>:
 8009e0c:	898b      	ldrh	r3, [r1, #12]
 8009e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e10:	079d      	lsls	r5, r3, #30
 8009e12:	4606      	mov	r6, r0
 8009e14:	460c      	mov	r4, r1
 8009e16:	d507      	bpl.n	8009e28 <__smakebuf_r+0x1c>
 8009e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	6123      	str	r3, [r4, #16]
 8009e20:	2301      	movs	r3, #1
 8009e22:	6163      	str	r3, [r4, #20]
 8009e24:	b002      	add	sp, #8
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	466a      	mov	r2, sp
 8009e2a:	ab01      	add	r3, sp, #4
 8009e2c:	f7ff ffc8 	bl	8009dc0 <__swhatbuf_r>
 8009e30:	9900      	ldr	r1, [sp, #0]
 8009e32:	4605      	mov	r5, r0
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7ff f961 	bl	80090fc <_malloc_r>
 8009e3a:	b948      	cbnz	r0, 8009e50 <__smakebuf_r+0x44>
 8009e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d4ef      	bmi.n	8009e24 <__smakebuf_r+0x18>
 8009e44:	f023 0303 	bic.w	r3, r3, #3
 8009e48:	f043 0302 	orr.w	r3, r3, #2
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	e7e3      	b.n	8009e18 <__smakebuf_r+0xc>
 8009e50:	4b0d      	ldr	r3, [pc, #52]	; (8009e88 <__smakebuf_r+0x7c>)
 8009e52:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	6020      	str	r0, [r4, #0]
 8009e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5c:	81a3      	strh	r3, [r4, #12]
 8009e5e:	9b00      	ldr	r3, [sp, #0]
 8009e60:	6120      	str	r0, [r4, #16]
 8009e62:	6163      	str	r3, [r4, #20]
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	b15b      	cbz	r3, 8009e80 <__smakebuf_r+0x74>
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e6e:	f000 f8d1 	bl	800a014 <_isatty_r>
 8009e72:	b128      	cbz	r0, 8009e80 <__smakebuf_r+0x74>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	f023 0303 	bic.w	r3, r3, #3
 8009e7a:	f043 0301 	orr.w	r3, r3, #1
 8009e7e:	81a3      	strh	r3, [r4, #12]
 8009e80:	89a0      	ldrh	r0, [r4, #12]
 8009e82:	4305      	orrs	r5, r0
 8009e84:	81a5      	strh	r5, [r4, #12]
 8009e86:	e7cd      	b.n	8009e24 <__smakebuf_r+0x18>
 8009e88:	08009c19 	.word	0x08009c19

08009e8c <_malloc_usable_size_r>:
 8009e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e90:	1f18      	subs	r0, r3, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bfbc      	itt	lt
 8009e96:	580b      	ldrlt	r3, [r1, r0]
 8009e98:	18c0      	addlt	r0, r0, r3
 8009e9a:	4770      	bx	lr

08009e9c <_raise_r>:
 8009e9c:	291f      	cmp	r1, #31
 8009e9e:	b538      	push	{r3, r4, r5, lr}
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	d904      	bls.n	8009eb0 <_raise_r+0x14>
 8009ea6:	2316      	movs	r3, #22
 8009ea8:	6003      	str	r3, [r0, #0]
 8009eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009eb2:	b112      	cbz	r2, 8009eba <_raise_r+0x1e>
 8009eb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009eb8:	b94b      	cbnz	r3, 8009ece <_raise_r+0x32>
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f000 f830 	bl	8009f20 <_getpid_r>
 8009ec0:	462a      	mov	r2, r5
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eca:	f000 b817 	b.w	8009efc <_kill_r>
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d00a      	beq.n	8009ee8 <_raise_r+0x4c>
 8009ed2:	1c59      	adds	r1, r3, #1
 8009ed4:	d103      	bne.n	8009ede <_raise_r+0x42>
 8009ed6:	2316      	movs	r3, #22
 8009ed8:	6003      	str	r3, [r0, #0]
 8009eda:	2001      	movs	r0, #1
 8009edc:	e7e7      	b.n	8009eae <_raise_r+0x12>
 8009ede:	2400      	movs	r4, #0
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ee6:	4798      	blx	r3
 8009ee8:	2000      	movs	r0, #0
 8009eea:	e7e0      	b.n	8009eae <_raise_r+0x12>

08009eec <raise>:
 8009eec:	4b02      	ldr	r3, [pc, #8]	; (8009ef8 <raise+0xc>)
 8009eee:	4601      	mov	r1, r0
 8009ef0:	6818      	ldr	r0, [r3, #0]
 8009ef2:	f7ff bfd3 	b.w	8009e9c <_raise_r>
 8009ef6:	bf00      	nop
 8009ef8:	2000000c 	.word	0x2000000c

08009efc <_kill_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	2300      	movs	r3, #0
 8009f00:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_kill_r+0x20>)
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	4611      	mov	r1, r2
 8009f08:	602b      	str	r3, [r5, #0]
 8009f0a:	f7f8 fc64 	bl	80027d6 <_kill>
 8009f0e:	1c43      	adds	r3, r0, #1
 8009f10:	d102      	bne.n	8009f18 <_kill_r+0x1c>
 8009f12:	682b      	ldr	r3, [r5, #0]
 8009f14:	b103      	cbz	r3, 8009f18 <_kill_r+0x1c>
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	bd38      	pop	{r3, r4, r5, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200004ac 	.word	0x200004ac

08009f20 <_getpid_r>:
 8009f20:	f7f8 bc52 	b.w	80027c8 <_getpid>

08009f24 <__sread>:
 8009f24:	b510      	push	{r4, lr}
 8009f26:	460c      	mov	r4, r1
 8009f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2c:	f000 f894 	bl	800a058 <_read_r>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	bfab      	itete	ge
 8009f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f36:	89a3      	ldrhlt	r3, [r4, #12]
 8009f38:	181b      	addge	r3, r3, r0
 8009f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f3e:	bfac      	ite	ge
 8009f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f42:	81a3      	strhlt	r3, [r4, #12]
 8009f44:	bd10      	pop	{r4, pc}

08009f46 <__swrite>:
 8009f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4a:	461f      	mov	r7, r3
 8009f4c:	898b      	ldrh	r3, [r1, #12]
 8009f4e:	4605      	mov	r5, r0
 8009f50:	05db      	lsls	r3, r3, #23
 8009f52:	460c      	mov	r4, r1
 8009f54:	4616      	mov	r6, r2
 8009f56:	d505      	bpl.n	8009f64 <__swrite+0x1e>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f60:	f000 f868 	bl	800a034 <_lseek_r>
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	4632      	mov	r2, r6
 8009f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	4628      	mov	r0, r5
 8009f70:	463b      	mov	r3, r7
 8009f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7a:	f000 b817 	b.w	8009fac <_write_r>

08009f7e <__sseek>:
 8009f7e:	b510      	push	{r4, lr}
 8009f80:	460c      	mov	r4, r1
 8009f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f86:	f000 f855 	bl	800a034 <_lseek_r>
 8009f8a:	1c43      	adds	r3, r0, #1
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	bf15      	itete	ne
 8009f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f9a:	81a3      	strheq	r3, [r4, #12]
 8009f9c:	bf18      	it	ne
 8009f9e:	81a3      	strhne	r3, [r4, #12]
 8009fa0:	bd10      	pop	{r4, pc}

08009fa2 <__sclose>:
 8009fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa6:	f000 b813 	b.w	8009fd0 <_close_r>
	...

08009fac <_write_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4604      	mov	r4, r0
 8009fb0:	4608      	mov	r0, r1
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	4d05      	ldr	r5, [pc, #20]	; (8009fcc <_write_r+0x20>)
 8009fb8:	602a      	str	r2, [r5, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f7f8 fc42 	bl	8002844 <_write>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_write_r+0x1e>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_write_r+0x1e>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	200004ac 	.word	0x200004ac

08009fd0 <_close_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4d05      	ldr	r5, [pc, #20]	; (8009fec <_close_r+0x1c>)
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7f8 fc4e 	bl	800287c <_close>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_close_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_close_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	200004ac 	.word	0x200004ac

08009ff0 <_fstat_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	4d06      	ldr	r5, [pc, #24]	; (800a010 <_fstat_r+0x20>)
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	f7f8 fc48 	bl	8002892 <_fstat>
 800a002:	1c43      	adds	r3, r0, #1
 800a004:	d102      	bne.n	800a00c <_fstat_r+0x1c>
 800a006:	682b      	ldr	r3, [r5, #0]
 800a008:	b103      	cbz	r3, 800a00c <_fstat_r+0x1c>
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	bf00      	nop
 800a010:	200004ac 	.word	0x200004ac

0800a014 <_isatty_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	2300      	movs	r3, #0
 800a018:	4d05      	ldr	r5, [pc, #20]	; (800a030 <_isatty_r+0x1c>)
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	602b      	str	r3, [r5, #0]
 800a020:	f7f8 fc46 	bl	80028b0 <_isatty>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_isatty_r+0x1a>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_isatty_r+0x1a>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	200004ac 	.word	0x200004ac

0800a034 <_lseek_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4604      	mov	r4, r0
 800a038:	4608      	mov	r0, r1
 800a03a:	4611      	mov	r1, r2
 800a03c:	2200      	movs	r2, #0
 800a03e:	4d05      	ldr	r5, [pc, #20]	; (800a054 <_lseek_r+0x20>)
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f8 fc3e 	bl	80028c4 <_lseek>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_lseek_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_lseek_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	200004ac 	.word	0x200004ac

0800a058 <_read_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4604      	mov	r4, r0
 800a05c:	4608      	mov	r0, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	2200      	movs	r2, #0
 800a062:	4d05      	ldr	r5, [pc, #20]	; (800a078 <_read_r+0x20>)
 800a064:	602a      	str	r2, [r5, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	f7f8 fbcf 	bl	800280a <_read>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_read_r+0x1e>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	b103      	cbz	r3, 800a076 <_read_r+0x1e>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	200004ac 	.word	0x200004ac

0800a07c <_init>:
 800a07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07e:	bf00      	nop
 800a080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a082:	bc08      	pop	{r3}
 800a084:	469e      	mov	lr, r3
 800a086:	4770      	bx	lr

0800a088 <_fini>:
 800a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08a:	bf00      	nop
 800a08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08e:	bc08      	pop	{r3}
 800a090:	469e      	mov	lr, r3
 800a092:	4770      	bx	lr
